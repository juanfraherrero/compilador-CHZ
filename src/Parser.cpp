#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction(); /* este vector se guarda las listas de tercetos instanciadas y a usar, como funciones en main o métodos de un objeto instanciado*/
VectorOfFunction * vectorOfFunctionDeclaredInClasses = new VectorOfFunction(); /* este vector se usa para cuando declaramos un método o una función dentro de una clase (esto es una declaración y se debe instanciar por cada objeto)*/
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int cantLabels = 0;
int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';
bool isVariableToCheck = false;      /* booleano que sirve para indicar si se esta declarando una variable con check*/

string typeAux = "";
string actualClass = "";
symbol* lastMethod;
stack<symbol*>*  stackClasses = new stack<symbol*>();
void yyerrorFin(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Error: " << s <<"\033[0m"<< endl;
};
void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 58 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define CHECK 280
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
    4,    8,   11,   11,   11,   11,   11,   11,   12,    9,
    9,    9,    9,    9,   17,   15,   16,   16,   16,   16,
   16,   16,   16,   16,   18,   18,   19,   19,   19,   20,
   20,   10,   22,   23,   23,    6,    6,    6,    7,    7,
   21,   21,   21,   21,   21,   13,   13,   13,   13,   13,
   14,   14,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   24,   24,    5,    5,    5,    5,
    5,    5,    5,    5,   27,   27,   27,   27,   28,   28,
   28,   28,   33,   33,   33,   33,   33,   33,   33,   34,
   34,   34,   29,   36,   36,   36,   36,   36,   37,   37,
   37,   37,   37,   39,   41,   40,   32,   32,   43,   44,
   38,   38,   38,   38,   38,   38,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   26,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   35,   35,   35,   35,   35,   35,   35,   35,   31,   30,
   30,   30,   30,   30,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    3,    1,    1,
    1,    1,    7,    7,    6,    8,    8,    7,    2,    4,
    3,    2,    4,    3,    1,    2,    4,    3,    3,    4,
    3,    2,    2,    3,    3,    1,    7,    6,    8,    2,
    1,    2,    1,    3,    1,    1,    1,    1,    3,    1,
    2,    1,    1,    0,    4,    2,    1,    1,    0,    4,
    1,    1,    3,    2,    4,    3,    4,    3,    2,    1,
    3,    2,    3,    2,    2,    1,    1,    1,    1,    2,
    2,    2,    2,    1,    3,    5,    2,    4,    4,    3,
    6,    5,    3,    3,    4,    4,    4,    4,    1,    3,
    3,    1,    3,    3,    2,    2,    1,    2,    4,    3,
    3,    2,    3,    1,    1,    1,    4,    3,    1,    1,
    3,    3,    3,    3,    3,    3,    3,    5,    6,    5,
    4,    2,    2,    4,    3,    2,    6,    7,    4,    6,
    7,    6,    5,    3,    3,    5,    4,    3,    2,    1,
    3,    2,    2,    1,    3,    2,    2,    1,    3,    2,
    1,    2,    1,    1,    4,    3,    4,    1,    1,    1,
    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  139,   66,   67,   68,    0,
   32,    0,    6,    0,    0,    0,    0,   19,    0,    0,
    0,    0,   29,   30,   31,    0,    0,    0,   97,   98,
   99,  104,    0,   24,  107,    0,    0,    0,   39,    0,
    0,  189,  190,  192,  188,    0,    0,    0,  184,  183,
    0,    0,  122,    0,    0,  101,  100,  102,  103,    0,
    0,    0,    0,    0,   25,   11,   18,   14,    0,   20,
   21,   70,    0,    0,    0,    0,   65,    0,    0,  110,
    0,    0,    0,   78,    0,    0,  182,    0,    0,  128,
    0,  191,  193,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  170,    0,    0,    0,    0,    0,
  123,    0,  134,  126,    0,    0,   44,    0,    0,    0,
    0,    0,    8,    0,    3,    0,   16,    0,    0,    0,
   41,    0,    0,    0,  140,  138,  109,  108,    0,    0,
   76,    0,    0,    0,    0,  124,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  120,  121,
  169,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  153,  152,  156,  136,  132,    0,    0,  135,    0,   60,
   56,    0,    0,   43,    0,    0,    0,   53,   52,    0,
    7,    2,   69,    0,   40,   64,  137,  112,    0,    0,
    0,    0,  187,  185,    0,    0,    0,    0,  180,    0,
    0,  177,  173,  155,    0,    0,  147,    0,    0,    0,
  165,  164,  168,  133,    0,  131,   54,   51,    0,    0,
    0,   49,   48,   73,    0,    0,    0,  111,    0,   96,
    0,    0,   82,    0,   80,  167,    0,  159,    0,  154,
  179,  175,  171,  151,    0,    0,  129,   55,   50,   47,
   71,    0,    0,   35,    0,    0,    0,   34,   95,    0,
    0,    0,   94,  166,  163,    0,    0,  148,    0,    0,
  150,    0,    0,   38,    0,   33,   37,    0,    0,   88,
    0,   93,  160,    0,  162,  157,    0,  149,   58,    0,
    0,   75,   36,    0,   87,  161,  158,    0,   57,   59,
};
short yydgoto[] = {                                      15,
   16,  107,  240,   19,   20,   21,   73,   22,   23,   24,
   25,   26,   86,  241,   27,  119,  120,  182,  121,  122,
  236,   28,   78,  242,  243,  244,   29,   30,   31,   49,
   50,   32,   51,   52,   53,   54,  111,   55,  112,  176,
  177,  135,   33,  136,  167,
};
short yysindex[] = {                                   1267,
  -32,  -37,  -40,  -34,  264,    0,    0,    0,    0, -113,
    0, 1320,    0,   22,    0, 1590, 1604,    0,   22,   22,
 -200, -134,    0,    0,    0,   19,  -50, -181,    0,    0,
    0,    0,  -34,    0,    0,  -26,  237, -167,    0, -154,
  -19,    0,    0,    0,    0,   67,    3, -223,    0,    0,
   15,   -4,    0, 1219,   76,    0,    0,    0,    0,    0,
 -118, -140, 1618, 1632,    0,    0,    0,    0, 1646,    0,
    0,    0,   60, -200, -154,  -96,    0,   72, 1077,    0,
  141,   57,  -36,    0, -109,   -9,    0, -101,  237,    0,
  134,    0,    0,  237,  237,  237,  237,  118,  211,  237,
  237,  237,  237,  139,    0, 1129, 1809,  145,  146,  161,
    0, 1052,    0,    0,  -48,  -47,    0,  -45,  -69,  170,
  171,  179,    0,  -28,    0, 1671,    0,  -35,   60,    4,
    0,  172,  -20, 1219,    0,    0,    0,    0,    8,  237,
    0,  113, -134,  -25,  156,    0,   57,   57,   57,   57,
  237,  237,   -4,  237,  237,   -4,   57,   57,    0,    0,
    0,  194,  301,  196,   22,  -21, 1455,  198,  201,  202,
    0,    0,    0,    0,    0, 1104,  -17,    0,  207,    0,
    0,  -39,   -2,    0,  -45,  215,  226,    0,    0, -103,
    0,    0,    0,  148,    0,    0,    0,    0,  159,   57,
 1345,   18,    0,    0,   -4,   -4,   -4,   -4,    0,  -11,
 1469,    0,    0,    0,  147,  239,    0,   22,   22, 1359,
    0,    0,    0,    0,   16,    0,    0,    0,   28,  244,
  -13,    0,    0,    0,   36,   10, 1253,    0, 1306,    0,
  169, 1306,    0, 1388,    0,    0,  173,    0, 1402,    0,
    0,    0,    0,    0, 1427, 1685,    0,    0,    0,    0,
    0,  176, -134,    0, 1483,  175,  185,    0,    0, 1441,
 1306, 1306,    0,    0,    0, 1710, 1724,    0, 1753, 1767,
    0, 1292,   63,    0,  197,    0,    0, 1306, 1306,    0,
 1306,    0,    0, 1781,    0,    0, 1795,    0,    0, 1306,
  203,    0,    0, 1306,    0,    0,    0,  204,    0,    0,
};
short yyrindex[] = {                                      0,
    0,   64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  323,    0,  669,    0,  326,  338,    0,  683,  708,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
   39,    0,    0,    0,    0,    0,    0,   68,    0,    0,
    0,  125,    0,    0, 1154,    0,    0,    0,    0,  327,
    0,  339,  346,  351,    0,    0,    0,    0,  353,    0,
    0,    0,  506,    0,   26,    0,    0,  520,    0,    0,
    0,  547,    0,    0,   30,    0,    0,    0,    0,    0,
 1187,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  310,  319,    0,    0,    0,    0,
    0,    0,    0,  363,    0,  364,    0,    0,  575,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   93,    0,    0,  830,  949,  985,  999,
    0,    0,  151,    0,    0,  391, 1013, 1027,    0,    0,
    0,    0,    0, 1508, 1522,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  310,    0,    0,    0,    0,    0,    0,   33,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  608,
    0,    0,    0,    0,  417,  442,  467,  492,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1547, 1561,    0,
    0,    0,    0,    0,  633,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
    0,  249,    0,  255,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  258,
  259,  260,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  261,  270,    0,
  278,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  281,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
   23,    2,    1,  907,  915,  -14,  335,    0,    0,    0,
    0,    0,  336,   52,    0,  334,   13,  227,   14,    0,
    0,    0,    0, -216, -192,  889,    0,    0,    0,  416,
  428,    0,  833,  -57,   75,  389,    0,  390,    0,    0,
  262,  -24,    0,  306, -129,
};
#define YYTABLESIZE 2089
short yytable[] = {                                      40,
   18,   17,   36,  139,  228,   47,  117,   74,   38,   61,
   48,   34,   18,   64,   80,   65,   67,   18,   48,  229,
   70,   71,  215,   37,  140,   85,   88,  272,  131,  113,
  260,  142,  247,  211,   63,   92,   93,  102,  181,   69,
  153,  156,  103,   90,  194,  229,  118,   48,  198,  143,
  262,  273,   48,  289,  291,  184,   72,   98,   75,   99,
   85,  118,  143,   67,   18,   14,   79,  194,  263,   67,
   77,  304,   76,   74,  101,   77,  100,  290,  292,  181,
  181,  181,  181,  181,   79,  181,  126,  178,   77,   83,
  256,   74,  186,  205,  206,  305,  207,  208,  181,   98,
  181,   99,   84,  214,  185,   72,   89,  163,  194,  194,
  194,  194,  194,  246,  194,  123,  114,  185,  128,  277,
    7,    8,    9,   72,  119,  280,   67,  194,  202,  194,
  133,  186,  187,  186,  186,  186,  186,  186,  115,  186,
    7,    8,    9,   60,  186,  187,  294,  141,  116,  297,
  113,  178,  186,  234,  186,  144,    7,    8,    9,  151,
  115,  181,   48,  181,  152,  119,  213,  119,  119,  119,
  116,    7,    8,    9,  146,  235,  159,  160,    7,    8,
    9,  137,  161,   98,  119,   99,  119,  183,  171,  172,
  194,  113,  194,  113,  113,  113,  204,  116,   98,  238,
   99,   98,  239,   99,  173,    7,    8,    9,  179,  180,
  113,  181,  113,  188,  189,  186,   39,  186,  190,  252,
  253,  193,   41,   42,   43,   44,   45,  191,   35,  138,
   41,   42,   43,   44,   45,  201,  196,  209,  265,  212,
  203,  221,  269,   46,  222,  223,   87,  119,  283,  119,
  227,   46,  154,  226,  230,   48,  279,  155,  232,   41,
   42,   43,   44,   45,   41,   42,   43,   44,   45,  233,
  237,  250,  269,  113,  245,  113,   94,   95,   96,   97,
   46,   48,  251,  300,  258,   46,  257,  259,  266,  269,
  267,  269,  261,  268,  181,  181,  195,  274,  282,  286,
  181,  181,  181,  181,  269,  181,  181,  181,   48,  287,
  181,  181,  181,  181,  181,  181,  285,  181,  181,  302,
   63,  303,    5,  194,  194,    9,   42,  309,  310,  194,
  194,  194,  194,  301,  194,  194,  194,   12,    4,  194,
  194,  194,  194,  194,  194,   10,  194,  194,  186,  186,
   13,  308,   17,   45,  186,  186,  186,  186,   61,  186,
  186,  186,    1,   15,  186,  186,  186,  186,  186,  186,
   42,  186,  186,   81,   41,   42,   43,   44,   45,   90,
  119,  119,   84,   89,   92,   83,  119,  119,  119,  119,
  114,  119,  119,  119,   86,   46,  119,  119,  119,  119,
  119,  119,   91,  119,  119,   85,  113,  113,  129,  132,
  130,  231,  113,  113,  113,  113,  116,  113,  113,  113,
   58,   79,  113,  113,  113,  113,  113,  113,  183,  113,
  113,  114,   59,  114,  114,  114,   91,  225,  116,  197,
    0,  118,    0,    0,    0,    0,    7,    8,    9,   46,
  114,   42,  114,    0,    0,    0,    0,  116,    0,  116,
  116,  116,    0,    0,    0,    0,  115,   41,   42,   43,
   44,   45,    0,    0,    0,    0,  116,    0,  116,    0,
    0,    0,  118,    0,  118,  118,  118,    0,   46,    0,
    0,  117,    0,   41,   42,   43,   44,   45,    0,    0,
    0,  118,    0,  118,    0,   27,    0,  115,    0,  115,
  115,  115,    0,  114,   46,  114,    0,    0,    0,   62,
   56,   42,   43,   44,   57,    0,  115,    0,  115,    0,
    0,    0,  117,    0,  117,  117,  117,    0,    0,  116,
    0,  116,    0,    0,    0,    0,  105,    0,    0,   27,
    0,  117,    0,  117,    0,    0,  162,    2,    0,    0,
    0,    0,    0,   62,  118,    0,  118,    3,  105,    4,
    0,    0,    5,    6,   28,    7,    8,    9,    0,   10,
   11,    0,   42,   42,    0,    0,    0,    0,    0,  115,
  105,  115,    0,   42,   42,   42,    0,    0,   42,   42,
    0,   42,   42,   42,    0,   42,   42,  106,    0,    0,
    0,    0,    0,    0,  117,    0,  117,    0,   28,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   27,    0,  130,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   62,    0,  114,  114,    0,    0,
    0,  106,  114,  114,  114,  114,    0,  114,  114,  114,
    0,    0,  114,  114,  114,  114,  114,  114,   26,  114,
  114,  105,  116,  116,    0,    0,  130,    0,  116,  116,
  116,  116,   22,  116,  116,  116,    0,    0,  116,  116,
  116,  116,  116,  116,    0,  116,  116,  118,  118,   28,
    0,    0,    0,  118,  118,  118,  118,   23,  118,  118,
  118,    0,    0,  118,  118,  118,  118,  118,  118,    0,
  118,  118,  115,  115,    0,    0,    0,    0,  115,  115,
  115,  115,  106,  115,  115,  115,    0,    0,  115,  115,
  115,  115,  115,  115,    0,  115,  115,  117,  117,    0,
    0,    0,    0,  117,  117,  117,  117,  130,  117,  117,
  117,   27,   27,  117,  117,  117,  117,  117,  117,    0,
  117,  117,   27,   27,   27,   62,   62,   27,   27,    0,
   27,   27,   27,    0,   27,   27,   62,   62,   62,    0,
    0,   62,   62,   26,   62,   62,   62,    0,   62,   62,
    0,    0,  105,  105,    0,    0,    0,   22,    0,    0,
    0,    0,    0,  105,  105,  105,    0,    0,  105,  105,
    0,  105,  105,  105,    0,  105,  105,    0,    0,    0,
   28,   28,   23,    0,    0,    0,    0,    0,    0,    0,
    0,   28,   28,   28,    0,    0,   28,   28,    0,   28,
   28,   28,    0,   28,   28,    0,    0,    0,    0,    0,
    0,    0,    0,  106,  106,    0,    0,    0,   81,   82,
  143,    0,    0,  143,  106,  106,  106,    0,    0,  106,
  106,    0,  106,  106,  106,    0,  106,  106,  130,  130,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
  130,  130,    0,    0,  130,  130,    0,  130,  130,  130,
    0,  130,  130,    0,    0,    0,    0,    0,    0,    0,
    0,  145,    0,    0,   26,   26,  147,  148,  149,  150,
    0,    0,  157,  158,    0,   26,   26,   26,   22,   22,
   26,   26,  110,   26,   26,   26,    0,   26,   26,   22,
   22,   22,  143,    0,   22,   22,    0,   22,   22,   22,
  108,   22,   22,   23,   23,    0,    0,  110,  109,    0,
    0,  199,  200,    0,   23,   23,   23,    0,    0,   23,
   23,    0,   23,   23,   23,  108,   23,   23,    0,  144,
    0,    0,  144,  109,  166,  170,    0,    0,    0,    0,
  110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  164,  168,    0,    0,    0,    0,  108,    0,
  165,  169,  110,    0,    0,  146,  109,    0,  146,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  145,
  108,    0,  145,    0,    0,    0,    0,    0,  109,    0,
    0,  210,    0,  141,    0,  220,  141,    0,    0,    0,
    0,    0,    0,    0,  110,    0,    0,  142,    0,  164,
  142,  144,    0,  218,    0,    0,    0,  165,    0,    0,
    0,  219,  108,    0,    0,  143,  143,    0,    0,    0,
  109,    0,    0,    0,    0,   14,  143,  143,  143,  249,
    0,  143,  143,  143,  143,  143,  143,  146,  143,  143,
    0,    0,    0,    0,    0,    0,    0,  218,    0,    0,
   14,  145,    0,    0,    0,  219,  164,    0,    0,    0,
  270,    0,    0,    0,  165,  141,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,    0,  142,
    0,    0,    0,    0,    0,  164,    0,    0,    0,    0,
  270,  164,  218,  165,    0,    0,    0,    0,    0,  165,
  219,    0,   14,    0,  106,    0,    0,  270,    0,  270,
    0,    0,  164,  218,    0,  164,  218,    0,    0,    0,
  165,  219,  270,  165,  219,    0,    0,  127,    0,  106,
  218,    0,    0,  218,  144,  144,    0,    0,  219,    0,
    0,  219,    0,    0,    0,  144,  144,  144,    0,    0,
  144,  144,  144,  144,  144,  144,  106,  144,  144,    0,
  125,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  146,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  146,  146,  146,  145,  145,  146,  146,  146,  146,
  146,  146,   14,  146,  146,  145,  145,  145,  141,  141,
  145,  145,  145,  145,  145,  145,  127,  145,  145,  141,
  141,  141,  142,  142,  141,  141,  141,  141,  141,  141,
    0,  141,  141,  142,  142,  142,   14,    0,  142,  142,
  142,  142,  142,  142,    0,  142,  142,  104,    2,  125,
   14,    0,    0,    0,    0,    0,    0,    0,    3,  105,
    4,  174,  175,    5,    6,    0,    7,    8,    9,    0,
   10,   11,  104,    2,    0,   14,    0,    0,    0,    0,
    0,  106,    0,    3,  105,    4,    0,    0,    5,    6,
  134,    7,    8,    9,    0,   10,   11,    0,    0,  104,
    2,    0,    0,   14,    0,    0,    0,    0,    0,    0,
    3,  105,    4,    0,  224,    5,    6,  264,    7,    8,
    9,    0,   10,   11,  162,    2,    0,    0,   14,   12,
    0,   13,    0,    0,    0,    3,  105,    4,    0,    0,
    5,    6,  255,    7,    8,    9,    0,   10,   11,  127,
  127,    0,    0,    0,    0,    0,  299,    0,    0,    0,
  127,  127,  127,    0,    0,  127,  127,  127,  127,  127,
  127,  271,  127,  127,    0,    0,    0,    0,    0,    0,
    0,    0,  125,  125,   62,  276,    0,    0,    0,    0,
    0,    0,    0,  125,  125,  125,    0,    0,  125,  125,
  125,  125,  125,  125,    0,  125,  125,    0,    0,    0,
   14,    0,    0,    0,  104,    2,    0,    0,    0,    0,
    0,    0,    0,  254,  288,    3,  105,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,   11,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
  105,    4,    1,    2,    5,    6,  275,    7,    8,    9,
    0,   10,   11,    3,    0,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,   11,    1,    2,    0,
    0,  278,    0,    0,    0,    0,    0,    0,    3,  105,
    4,    1,    2,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    3,  105,    4,    1,    2,    5,    6,  217,
    7,    8,    9,    0,   10,   11,    3,    0,    4,    0,
    0,    5,    6,  248,    7,    8,    9,    0,   10,   11,
    1,    2,    0,    0,    0,    0,    0,  284,    0,    0,
    0,    3,  105,    4,  162,    2,    5,    6,    0,    7,
    8,    9,    0,   10,   11,    3,    0,    4,    0,    0,
    5,    6,  178,    7,    8,    9,    0,   10,   11,    0,
    0,    0,    0,    1,    2,    0,  174,    0,    0,    0,
    0,    0,    0,    0,    3,  105,    4,  162,    2,    5,
    6,    0,    7,    8,    9,    0,   10,   11,    3,    0,
    4,  176,    0,    5,    6,    0,    7,    8,    9,    0,
   10,   11,  162,    2,    0,  172,    0,    0,    0,    0,
    0,    0,    0,    3,    0,    4,    1,    2,    5,    6,
    0,    7,    8,    9,    0,   10,   11,    3,  105,    4,
  216,    2,    5,    6,   66,    7,    8,    9,    0,   10,
   11,    3,  105,    4,  216,    2,    5,    6,   68,    7,
    8,    9,    0,   10,   11,    3,  105,    4,    1,    2,
    5,    6,  124,    7,    8,    9,    0,   10,   11,    3,
  105,    4,    0,    0,    5,    6,  125,    7,    8,    9,
    0,   10,   11,  178,  178,    0,    0,    0,    0,    0,
  127,    0,    0,    0,  178,  178,  178,  174,  174,  178,
  178,    0,  178,  178,  178,    0,  178,  178,  174,  174,
  174,    0,    0,  174,  174,  192,  174,  174,  174,    0,
  174,  174,  176,  176,    0,    0,    0,    0,    0,  281,
    0,    0,    0,  176,  176,  176,  172,  172,  176,  176,
    0,  176,  176,  176,    0,  176,  176,  172,  172,  172,
    0,    0,  172,  172,  293,  172,  172,  172,    0,  172,
  172,    0,    0,    0,    0,    1,    2,    0,  295,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,    1,
    2,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    3,    0,    4,    1,    2,    5,    6,  296,    7,    8,
    9,    0,   10,   11,    3,    0,    4,    1,    2,    5,
    6,  298,    7,    8,    9,    0,   10,   11,    3,    0,
    4,    1,    2,    5,    6,  306,    7,    8,    9,    0,
   10,   11,    3,    0,    4,    0,    0,    5,    6,  307,
    7,    8,    9,    0,   10,   11,    1,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,    0,    4,
  216,    2,    5,    6,    0,    7,    8,    9,    0,   10,
   11,    3,    0,    4,    0,    0,    5,    6,    0,    7,
    8,    9,    0,   10,   11,  162,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,  216,
    2,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    3,    0,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,   11,    0,    0,    0,    0,  162,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,  216,    2,    5,    6,    0,    7,    8,    9,
    0,   10,   11,    3,    0,    4,  216,    2,    5,    6,
    0,    7,    8,    9,    0,   10,   11,    3,    0,    4,
  216,    2,    5,    6,    0,    7,    8,    9,    0,   10,
   11,    3,    0,    4,    0,    2,    5,    6,    0,    7,
    8,    9,    0,   10,   11,    3,  105,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,   11,
};
short yycheck[] = {                                      40,
    0,    0,   40,   40,   44,   40,  125,   22,   46,  123,
   45,   44,   12,   12,   41,   14,   16,   17,   45,   59,
   19,   20,   44,   61,   61,   40,   46,  244,  125,   54,
   44,   41,   44,  163,   12,  259,  260,   42,    0,   17,
   98,   99,   47,   41,   41,   59,   61,   45,   41,   59,
   41,  244,   45,  270,  271,  125,  257,   43,   40,   45,
   75,   76,   59,   63,   64,   44,   41,    0,   59,   69,
   41,  288,  123,   41,   60,  257,   62,  270,  271,   41,
   42,   43,   44,   45,   59,   47,   64,  112,   59,  257,
  220,   59,    0,  151,  152,  288,  154,  155,   60,   43,
   62,   45,  257,  125,  119,   41,   40,  106,   41,   42,
   43,   44,   45,  125,   47,  256,   41,  132,   59,  249,
  275,  276,  277,   59,    0,  255,  126,   60,  143,   62,
   59,  119,  119,   41,   42,   43,   44,   45,  257,   47,
  275,  276,  277,  257,  132,  132,  276,  257,  267,  279,
    0,  176,   60,  257,   62,  257,  275,  276,  277,   42,
  257,  123,   45,  125,   47,   41,  165,   43,   44,   45,
  267,  275,  276,  277,   41,  190,  102,  103,  275,  276,
  277,   41,   44,   43,   60,   45,   62,  257,   44,   44,
  123,   41,  125,   43,   44,   45,   41,  267,   43,   41,
   45,   43,  201,   45,   44,  275,  276,  277,  257,  257,
   60,  257,   62,   44,   44,  123,  257,  125,   40,  218,
  219,  257,  257,  258,  259,  260,  261,  256,  266,  266,
  257,  258,  259,  260,  261,  123,  257,   44,  237,   44,
  266,   44,  242,  278,   44,   44,  266,  123,  263,  125,
   44,  278,   42,  271,  257,   45,  255,   47,   44,  257,
  258,  259,  260,  261,  257,  258,  259,  260,  261,   44,
  123,  125,  272,  123,  257,  125,  262,  263,  264,  265,
  278,   45,   44,  282,  257,  278,  271,   44,  237,  289,
  239,  291,  257,  125,  256,  257,  125,  125,  123,  125,
  262,  263,  264,  265,  304,  267,  268,  269,   45,  125,
  272,  273,  274,  275,  276,  277,  265,  279,  280,  257,
  257,  125,    0,  256,  257,    0,    0,  125,  125,  262,
  263,  264,  265,  282,  267,  268,  269,    0,    0,  272,
  273,  274,  275,  276,  277,    0,  279,  280,  256,  257,
    0,  300,    0,   44,  262,  263,  264,  265,   40,  267,
  268,  269,    0,    0,  272,  273,  274,  275,  276,  277,
   44,  279,  280,  125,  257,  258,  259,  260,  261,  125,
  256,  257,  125,  125,  125,  125,  262,  263,  264,  265,
    0,  267,  268,  269,  125,  278,  272,  273,  274,  275,
  276,  277,  125,  279,  280,  125,  256,  257,   74,   76,
   75,  185,  262,  263,  264,  265,    0,  267,  268,  269,
    5,   33,  272,  273,  274,  275,  276,  277,  257,  279,
  280,   41,    5,   43,   44,   45,   47,  176,  267,  134,
   -1,    0,   -1,   -1,   -1,   -1,  275,  276,  277,  123,
   60,  125,   62,   -1,   -1,   -1,   -1,   41,   -1,   43,
   44,   45,   -1,   -1,   -1,   -1,    0,  257,  258,  259,
  260,  261,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,
   -1,   -1,   41,   -1,   43,   44,   45,   -1,  278,   -1,
   -1,    0,   -1,  257,  258,  259,  260,  261,   -1,   -1,
   -1,   60,   -1,   62,   -1,    0,   -1,   41,   -1,   43,
   44,   45,   -1,  123,  278,  125,   -1,   -1,   -1,    0,
  257,  258,  259,  260,  261,   -1,   60,   -1,   62,   -1,
   -1,   -1,   41,   -1,   43,   44,   45,   -1,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,    0,   -1,   -1,   44,
   -1,   60,   -1,   62,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   44,  123,   -1,  125,  267,  268,  269,
   -1,   -1,  272,  273,    0,  275,  276,  277,   -1,  279,
  280,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,  123,
   44,  125,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,    0,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,  256,  257,   -1,   -1,
   -1,   44,  262,  263,  264,  265,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,    0,  279,
  280,  125,  256,  257,   -1,   -1,   44,   -1,  262,  263,
  264,  265,    0,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,  256,  257,  125,
   -1,   -1,   -1,  262,  263,  264,  265,    0,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,
  279,  280,  256,  257,   -1,   -1,   -1,   -1,  262,  263,
  264,  265,  125,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,  256,  257,   -1,
   -1,   -1,   -1,  262,  263,  264,  265,  125,  267,  268,
  269,  256,  257,  272,  273,  274,  275,  276,  277,   -1,
  279,  280,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  267,  268,  269,   -1,
   -1,  272,  273,  125,  275,  276,  277,   -1,  279,  280,
   -1,   -1,  256,  257,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,   -1,   -1,   -1,
  256,  257,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   36,   37,
   41,   -1,   -1,   44,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   89,   -1,   -1,  256,  257,   94,   95,   96,   97,
   -1,   -1,  100,  101,   -1,  267,  268,  269,  256,  257,
  272,  273,   54,  275,  276,  277,   -1,  279,  280,  267,
  268,  269,  123,   -1,  272,  273,   -1,  275,  276,  277,
   54,  279,  280,  256,  257,   -1,   -1,   79,   54,   -1,
   -1,  139,  140,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   79,  279,  280,   -1,   41,
   -1,   -1,   44,   79,  106,  107,   -1,   -1,   -1,   -1,
  112,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  106,  107,   -1,   -1,   -1,   -1,  112,   -1,
  106,  107,  134,   -1,   -1,   41,  112,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
  134,   -1,   44,   -1,   -1,   -1,   -1,   -1,  134,   -1,
   -1,  163,   -1,   41,   -1,  167,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  176,   -1,   -1,   41,   -1,  163,
   44,  123,   -1,  167,   -1,   -1,   -1,  163,   -1,   -1,
   -1,  167,  176,   -1,   -1,  256,  257,   -1,   -1,   -1,
  176,   -1,   -1,   -1,   -1,   44,  267,  268,  269,  211,
   -1,  272,  273,  274,  275,  276,  277,  123,  279,  280,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  211,   -1,   -1,
   44,  123,   -1,   -1,   -1,  211,  220,   -1,   -1,   -1,
  242,   -1,   -1,   -1,  220,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,  123,
   -1,   -1,   -1,   -1,   -1,  249,   -1,   -1,   -1,   -1,
  272,  255,  256,  249,   -1,   -1,   -1,   -1,   -1,  255,
  256,   -1,   44,   -1,  123,   -1,   -1,  289,   -1,  291,
   -1,   -1,  276,  277,   -1,  279,  280,   -1,   -1,   -1,
  276,  277,  304,  279,  280,   -1,   -1,   44,   -1,  123,
  294,   -1,   -1,  297,  256,  257,   -1,   -1,  294,   -1,
   -1,  297,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,  123,  279,  280,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,  256,  257,  272,  273,  274,  275,
  276,  277,   44,  279,  280,  267,  268,  269,  256,  257,
  272,  273,  274,  275,  276,  277,  123,  279,  280,  267,
  268,  269,  256,  257,  272,  273,  274,  275,  276,  277,
   -1,  279,  280,  267,  268,  269,   44,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,  256,  257,  123,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  270,  271,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  256,  257,   -1,   44,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,   -1,   -1,  256,
  257,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,  271,  272,  273,  125,  275,  276,
  277,   -1,  279,  280,  256,  257,   -1,   -1,   44,  123,
   -1,  125,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   44,  275,  276,  277,   -1,  279,  280,  256,
  257,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,  276,
  277,   44,  279,  280,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,  125,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,   -1,   -1,   -1,
   44,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   44,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  280,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  256,  257,  272,  273,  125,  275,  276,  277,
   -1,  279,  280,  267,   -1,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,  256,  257,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  267,  268,  269,  256,  257,  272,  273,  125,
  275,  276,  277,   -1,  279,  280,  267,   -1,  269,   -1,
   -1,  272,  273,  125,  275,  276,  277,   -1,  279,  280,
  256,  257,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   -1,  267,  268,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  267,   -1,  269,   -1,   -1,
  272,  273,  125,  275,  276,  277,   -1,  279,  280,   -1,
   -1,   -1,   -1,  256,  257,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  267,   -1,
  269,  125,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  256,  257,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,  267,  268,  269,
  256,  257,  272,  273,  125,  275,  276,  277,   -1,  279,
  280,  267,  268,  269,  256,  257,  272,  273,  125,  275,
  276,  277,   -1,  279,  280,  267,  268,  269,  256,  257,
  272,  273,  125,  275,  276,  277,   -1,  279,  280,  267,
  268,  269,   -1,   -1,  272,  273,  125,  275,  276,  277,
   -1,  279,  280,  256,  257,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  267,  268,
  269,   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,
  279,  280,  256,  257,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,  267,  268,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
  280,   -1,   -1,   -1,   -1,  256,  257,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
  267,   -1,  269,  256,  257,  272,  273,  125,  275,  276,
  277,   -1,  279,  280,  267,   -1,  269,  256,  257,  272,
  273,  125,  275,  276,  277,   -1,  279,  280,  267,   -1,
  269,  256,  257,  272,  273,  125,  275,  276,  277,   -1,
  279,  280,  267,   -1,  269,   -1,   -1,  272,  273,  125,
  275,  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,   -1,  269,   -1,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
};
#define YYFINAL 15
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 280
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS","CHECK",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : check tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"check : CHECK",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"clase_heredada : IDENTIFICADOR",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos clase_heredada ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos IDENTIFICADOR IDENTIFICADOR ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_atributos_y_metodos : clase_heredada ','",
"lista_atributos_y_metodos : IDENTIFICADOR IDENTIFICADOR ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : return ','",
"cuerpo_de_la_funcion_con_return : return",
"cuerpo_de_la_funcion_con_return : return ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : return cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : return ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : return cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' return ',' '}'",
"bloque_ejecutables : '{' return '}'",
"bloque_ejecutables : return ','",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas return ',' '}'",
"bloque_ejecutables : '{' comas return '}'",
"bloque_ejecutables : comas return ','",
"bloque_ejecutables : error ','",
"return : RETURN",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : IDENTIFICADOR '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 357 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
void checkTypesAsignationFin(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerrorFin("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
void checkTypesParams(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos "+ type2 + " y " + type1 + " entre los parametros");
        }
}
void checkTypesParamsFin(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerrorFin("Incompatibilidad de tipos "+ type2 + " y " + type1 + " entre los parametros");
        }
}
/**
 * Carga el símbolo en la tabla
 * Dado el acceso a un elemento de la tabla de simbolos lo elimina
 * Actualiza el símbolocon los datos pasados, 
 * si no se quiere modificar los datos dejar ""
 * 
 * @param key nombre del acceso
 * @param type tipo del acceso
 * @param scope scope actual
 * @param uso uso del acceso
 * @param ts tabla de símbolo a la que agregarle el acceso
 */
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        // le marcamos al terceto si tiene un elemento pospuesto
        symbol* smArg1 = tableSymbol->getSymbol(operando1);
        symbol* smArg2 = tableSymbol->getSymbol(operando2);
        if(smArg1!= nullptr && smArg1->posponeForForwarding == true){
                t->arg1Pospone = true;
                t->type1 = smArg1->type;
        }
        if(smArg2!= nullptr && smArg2->posponeForForwarding == true){
                t->arg2Pospone = true;
                t->type2 = smArg2->type;
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercetWithType(string argumento, string operando1, string operando2, string _type1, string _type2, string _type){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        t->typeTercet = _type;
        t->type1 = _type1;
        t->type2 = _type2;
        // le marcamos al terceto si tiene un elemento pospuesto
        symbol* smArg1 = tableSymbol->getSymbol(operando1);
        symbol* smArg2 = tableSymbol->getSymbol(operando2);
        if(smArg1!= nullptr && smArg1->posponeForForwarding == true){
                t->arg1Pospone = true;
                t->type1 = smArg1->type;
        }
        if(smArg2!= nullptr && smArg2->posponeForForwarding == true){
                t->arg2Pospone = true;
                t->type2 = smArg2->type;
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos. pero setea si algun parametro esta pospuesto
// Los paramtros son argumento, operador1, y operador2
int addTercetPospone(string argumento, string operando1, string operando2, bool _arg1pospone, bool _arg2pospone, string _op1Type, string _op2Type){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        t->arg1Pospone = _arg1pospone;
        t->type1 = _op1Type;
        t->arg2Pospone = _arg2pospone;
        t->type2 = _op2Type;
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos. pero setea si algun parametro esta pospuesto
// Los paramtros son argumento, operador1, y operador2
int addTercetPospone(string argumento, string operando1, string operando2, bool _arg1pospone, bool _arg2pospone, string _op1Type, string _op2Type, string _typeTercet){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        t->arg1Pospone = _arg1pospone;
        t->type1 = _op1Type;
        t->arg2Pospone = _arg2pospone;
        t->type2 = _op2Type;
        t->typeTercet = _typeTercet;
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 

        // le marcamos al terceto si tiene un elemento pospuesto
        if(operando1[0] == charTercetoId){
            string type;
            if(cantOfRecursions <= 0){
                type = tableTercets->get(stoi(operando1.substr(1, operando1.size())))->typeTercet;
            }else{
                type = stackFunction->top()->ter->get(stoi(operando1.substr(1, operando1.size())))->typeTercet;
            }
            if(type == "pospone"){
                t->arg1Pospone = true;
                t->type1 = "pospone";
            }
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope2(key, "clase", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                        
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        
                        // agregamos la clase al stack de clases para que aunque este redeclarada no tire un error si intentamos acceder a una clase del stack que no existe
                        stackClasses->push(symbolFinded);
                }else{
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        symbolFinded->classOfSymbol = key;
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                newIdentificador->classOfSymbol = key;
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
/**
 * Esta función se llama cuando se quiere crear un método o función de un objeto a instanciar
 * Para esto se require de buscar el bloque de tercetos en el vecto de bloques de tercetos de declaración
 * copiarlo y agregarle a cada argumento que sea propio del objeto ":"+objeto+scope 
 * al nuevo bloque también le agregamos eso al nombre e insertamos la copia en el vecotr de bloques de tercetos de ejecución
 * 
 * 
 * @param objectName El nombre del objeto.
 * @param scope El scope actual.
 * @param simboloDeFuncion El símbolo de la función o método.
 * @param tableSymbolOfTheClass La tabla de símbolos de la clase.
 */
void createFunctionTerecets(string objectName, string scope, symbol* simboloDeFuncion, TableSymbol* tableSymbolOfTheClass){
     /*
        la función debe buscar en el vector de declaración de bloques de tercetos de funciones la declaraciónde este método o función, 
            copiarlo al vector de ejecución
            recorrer cada terceto y por cada operador de este terceto verificar si alguno es igual a algún atributo o método de la clase ode sus herencias, 
            en ese caso se le agrega el objeto y el scope actual
    */
    functionStack* copyOfTheStack = vectorOfFunctionDeclaredInClasses->getCopyOfFunction(simboloDeFuncion->lexema);

    // recorremos el stack de tercetos de la función o método
    for (const auto& tercet : copyOfTheStack->ter->getTercets()){
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg1())){
            tercet->setArg1(tercet->getArg1()+":"+objectName+scope);
        }
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg2())){
            tercet->setArg2(tercet->getArg1()+":"+objectName+scope);
        }
    }

    copyOfTheStack->name += ":"+objectName+scope; // le agregamos el nombre del objeto + el scope actual
    // agregamos el nuevo stack de funciones a la tabla de funciones en ejecución
    vectorOfFunction->add(copyOfTheStack);

};
// ob1 ob2:main:clase1 :main clase1
bool instanciateObject(string objectName, string objectWithScopeStatic, string scopeDynamic, string classNameOfNewObject){

    // obtenemos el símbolo de la clase del objeto
    symbol* classOfNewObject = tableSymbol->getFirstSymbolMatching2(classNameOfNewObject, "clase", ":main"); // obtenemos el símbolo de la clase del nuevo objeto
    
    // verificamos si la clase es una forward declaration 
    // de ser forward el objeto también se convierte en forwarded para luego isntanciarlo cuando la clase se declare
    // ya que si es asi no podemos agregar sus atributos y métodos
    if(classOfNewObject->forwarded){
        return true;
    }
    
    // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
    for (const auto& par : classOfNewObject->attributesAndMethodsVector->getSymbolTable()){
        symbol* simbolo = par.second;
        // creamos el nuevo símbolo
        symbol* newSm = new symbol(*simbolo);                
        
        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
        //      la tabla de tercetos principal o de ejecución
        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
            createFunctionTerecets(objectName, scopeDynamic, newSm, classOfNewObject->attributesAndMethodsVector);
        }
                
        if(newSm->uso=="objeto"){
            // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
            // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
            // ob1 ob2:main:clase1 :main clase1
            newSm->posponeForForwarding = instanciateObject(objectName, newSm->lexema, scopeDynamic, newSm->classOfSymbol);
        }

        newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
        
        // agregamos el nuevo símbolo a la tabla de simbolos        
        tableSymbol->insert(newSm);
    }

    // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general

    // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
    for (int i=1; i >= 0; i--){
        TableSymbol* tableSymbolMatchingClass = classOfNewObject->inheritance[i];
        // si hereda de alguna clase recorremos sus simbolos y los agregamos
        if(tableSymbolMatchingClass != nullptr){
            
            // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
            for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                symbol* simbolo = par.second;
                // creamos el nuevo símbolo
                symbol* newSm = new symbol(*simbolo);                
                
                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                //      la tabla de tercetos principal o de ejecución
                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                    createFunctionTerecets(objectName, scopeDynamic, newSm, tableSymbolMatchingClass);
                }

                if(newSm->uso=="objeto"){
                    // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                    // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                    // ob1 ob2:main:clase1 :main clase1
                    newSm->posponeForForwarding = instanciateObject(objectName, newSm->lexema, scopeDynamic, newSm->classOfSymbol);
                }

                newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
                
                // agregamos el nuevo símbolo a la tabla de simbolos        
                tableSymbol->insert(newSm);
            }
        }
    }
    
};
/**
 * Cuando se detecta una clase que fue forwardeada y un objeto fue declarado de esa clase se llma a esta función
 * instranciamos el obejo cargando los elementos de la tabla de simbolos de la clase y de sus herencias a la tabla general
 * 
 * @param symbolObject Puntero al símbolo del objeto.
 * @param classSymbol Puntero al símbolo de la clase del objeto.
 */
void addObjectForwarded(symbol* symbolObject, symbol* classSymbol){
        // Encontrar la posición del segundo "main"
        size_t lastPosMain = symbolObject->lexema.rfind("main");
        
        // Encontrar la posición del último ":" antes del segundo "main"
        size_t posUltimo = symbolObject->lexema.rfind(":", lastPosMain - 2);
        
        string correctLexeme;
        if (posUltimo != string::npos){
            correctLexeme = symbolObject->lexema.substr(posUltimo + 1);
        }else{
            correctLexeme = symbolObject->lexema;
        };
        // Extraer la subcadena deseada
        
        string key = correctLexeme.substr(0, correctLexeme.find(":"));
        string scope = correctLexeme.substr( correctLexeme.find(":"), correctLexeme.size());
        string classType = symbolObject->classOfSymbol;
              
        // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
        for (const auto& par : classSymbol->attributesAndMethodsVector->getSymbolTable()){
                symbol* simbolo = par.second;
                // creamos el nuevo símbolo
                symbol* newSm = new symbol(*simbolo);                
                
                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                //      la tabla de tercetos principal o de ejecución
                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                    createFunctionTerecets(key, scope, newSm, classSymbol->attributesAndMethodsVector);
                }

                if(newSm->uso=="objeto"){
                    // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                    // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                    // ob1 ob2:main:clase1 :main clase1

                    newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
                }

                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                
                // agregamos el nuevo símbolo a la tabla de simbolos        
                tableSymbol->insert(newSm);
        }

        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = classSymbol->inheritance[i];
            // si hereda de alguna clase recorremos sus simbolos y los agregamos
            if(tableSymbolMatchingClass != nullptr){
                
                // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                        symbol* simbolo = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*simbolo);                
                        
                        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                        //      la tabla de tercetos principal o de ejecución
                        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                            createFunctionTerecets(key, scope, newSm, tableSymbolMatchingClass);
                        }

                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
            }
        }
};
/**
 * Cuando se detecta una finalización de declaración de clase se llama a esta función
 * Recorre la tabla de símbolos en busca de símbolos de uso objeto y de la clase actual y que hayan sido declarados luego del forwarded y previo a la declaración de la clase. 
 * Por cada uno de esos objetos, los instancia y les agrega los atributos y métodos de la clase y de sus herencias.
 * 
 * @return void
 */
void finishClass(){
        tableSymbol->deleteScope();
        
        symbol* symbolClass = stackClasses->top();

        vector<symbol*> symbolsMatched = tableSymbol->getSymbolsByUseAndNameClassAndForwarded("objeto", symbolClass->classOfSymbol);

        for (symbol* sm : symbolsMatched){
                // recorremos los simbolos de los objetos e instanciamos
                sm->forwarded = false;
                sm->posponeForForwarding = false;

                addObjectForwarded(sm, symbolClass);
        }
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
/**
 * Cuando detectamos un atributo de clase se ejecuta esta función
 * Obtiene el símbolo viejo lo elimina 
 * y lo carga a la tabla de la clase
 *
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addAtribute(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);         // eliminamos el simbolo dela tabla general

        // operamos sobre la tabla de símbolos de la clase
        TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

        // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
        int diff = tsClass->getDiffOffScope2(key, "atributo", scope); 
                
        if(diff == 0){
                yyerror("Redeclaracion de atributo en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAttribute = new symbol(key+scope, "", type, "atributo");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
                */

                // Marcamos a la clase que pertenece el atributo
                newAttribute->classOfSymbol = classOfAttribute;

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newAttribute);
        }        
};
/**
 * Esta función verifica si un método con la clave, alcance y uso dados existe en la tabla de símbolos de la clase actual o en cualquiera de sus clases heredadas.
 * Si el método se encuentra en la tabla de símbolos de la clase actual, devuelve 0.
 * Si el método se encuentra en una tabla de símbolos de clase heredada, devuelve 1.
 * Si el método no se encuentra en ninguna de las tablas de símbolos, devuelve -1.
 *
 * @param key La clave del método a buscar.
 * @param scope El alcance del método a buscar.
 * @param uso El uso del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return Un entero que indica si el método se encontró en la tabla de símbolos de la clase actual (0), en una tabla de símbolos de clase heredada (1), o no se encontró (-1).
 */
int existMethodInInheritance(string key, string scope, string uso, symbol* classSymbol){
    // verificamos si el método está en la tabla de símbolos de la clase actual, si es asi devolvemos 0
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si es asi devolvemos 1 y si no esta devolvemos 2
    // revisar cuantas herencias hay, en base a esto hacer un for que se encargue de reccorer cada una de las tablas de las clases y en cada llamado usar la funcion getdiffscope y si lo que devuelve es 0 significa que esta
    
    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = classSymbol->attributesAndMethodsVector->getDiffOffScope2(key, "metodo", scope);        
    if(diff == 0){
        //si el método está en la propia tabla de símbolos de la clase se devuelve 0
        return 0;
    }else{
        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // verificar que en esa tabla no exista el simbolo
                bool existMethodInTable = classSymbol->inheritance[i]->existMethodInTable(key,uso);

                if(existMethodInTable){
                    return 1;
                }
            }
        }
        return -1;
   }           
}
/**
 * Cuando detectamos un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param classOfAttribute nombre de la clase a la que pertenece
 */
void initMethod(string key, string scope, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);   // eliminamos el simbolo (usa el contador) de la tabla general
        symbol * classSymbol = stackClasses->top();
        TableSymbol* tsClass = classSymbol->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        int methodAlredyExist = existMethodInInheritance(key, scope, "metodo", classSymbol);    // verificamos si el método ya existe en la clase o en alguna de sus clases heredadas

        if(methodAlredyExist == 0){
                yyerror("Redeclaracion de metodo en la misma clase");
        }
        if(methodAlredyExist == 1){
                yyerror("Sobreescritura de metodos prohibida");
        }      
        // aunque tire error igual lo agregamos para que no falle la genreacion de codigo   
                
        // creamos el nuevo símbolo
        symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");
        /*
                ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE METODOS CARGADOS
        */

        newMetodo->classOfSymbol = classOfAttribute;

        // agregamos el nuevo símbolo al vector de simbolos de la clase        
        tsClass->insert(newMetodo);
        
        // seteamos que si se debe agregar un parametro se le haga a este método
        lastMethod = newMetodo;

        // agregamos un scope
        tableSymbol->addScope(key);

        // creamos una stack para la función y la agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        
        cantOfRecursions++;        
};                        
/**
 * Cuando detectamos un parámtro en un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * Se carga como una variable y se le agrega a su scope el nombre del método
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addParamMetodo(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // verificar que no esté previamente en ese scope en esa tabla de símobolo
        // lo agregamos y setear el tipo del parametro


        tableSymbol->deleteSymbol(key);    // eliminamos el simbolo (usa el contador) de la tabla general
        
        TableSymbol* tsClass = stackClasses->top()->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        /* SE SUPONE QUE ESTO NUNCA DEBERÍA SUCEDER PORQUE ES UN SOLO PARÁEMETRO Y LA PRIMER VARIABLE DEL ÁMBITO */

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable dentro de la tala de símbolos de la clase
        int diff = tsClass->getDiffOffScope2(key, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el misma ambito del metodo");
        }else{
                // creamos el nuevo símbolo
                symbol* newparam = new symbol(key+scope, "", type, "var");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE PARAMETROS DE METODO CARGADOS
                */

                // Marcamos a la clase que pertenece la variable
                newparam->classOfSymbol = classOfAttribute;

                // obtenemos el scopeInsideClass, que al ser un parámetro de un método siempre es el mismo método
                newparam->scopeInsideClass = ":"+lastMethod->lexema.substr(0, lastMethod->lexema.find(":"));

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newparam);

                lastMethod->cantParam++;
                lastMethod->typeParam = type;
                lastMethod->nameParam = key+scope;
        }
};
/**
 * Cuando detectamos un parámtro en una declaración de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase terminamos
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del parámetro
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
*/
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
        // verificamos si está dentro de la declaración de una clase o no

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;

        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general y le cargamos el parametro como variable
                ts = tableSymbol;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
        }else{
                // obtenemos la tabla de la clase y le cargamos el parametro como variable
                ts = stackClasses->top()->attributesAndMethodsVector;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
                
                // marcamos a que clase pertenece el simbolo
                string classOfAttribute = stackClasses->top()->classOfSymbol;
                newIdentificador->classOfSymbol = classOfAttribute;

                string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                newIdentificador->scopeInsideClass = scopeInsideClass;
        }

        // seteamos el parámetro al símbolo de la función
        lastMethod->cantParam++;
        lastMethod->typeParam = type;
        lastMethod->nameParam = key+scope;
        
        reglaptr = newIdentificador->lexema; 
        reglatype = type; 
};

string checkNewNameBeforeInsert(symbol* newSm){
    // funcion que se encarga de borrar las apariciones de nombres de clases dentro un lexema 
    // y de verificar que no exista un nombre igual en el mismo ámbito
    // la logica funciona en iterar sobre la tabla de symbolor preguntando por cada uno de los lexemas si es que son de tipo clase
    // si es asi se crea una variable auxiliar donde se concatena de forma correcta el nuevo lexema para buscar si este se encuentra como substring dentro de 
    // de nuevo lexema a insertar dentro de la tabla de simbolos 
    
    for (const auto& par : tableSymbol->getSymbolTable()){
        symbol* sm = par.second;
        if(sm->uso == "clase"){
            // creo una variable aux para guardar el lexema                 ejemplo= b:main:func3
            string lexemaAux = sm->lexema;
            //busco la primera aparicion de :                               ejemplo= 2
            size_t firstColonPos = lexemaAux.find(':');
            //obtengo el nombre de la clase para su uso a posteriori        ejemplo= b
            string nameOfClass = lexemaAux.substr(0, firstColonPos); 
            //busco el tamaño de la palabra                                 ejemplo= 12
            size_t secondColonPos = lexemaAux.size();
            //creo el nuevo lexema                                         ejemplo= primer substr = main:func3 segundo substr = b, lo concateno y queda main:func3:b
            lexemaAux =  lexemaAux.substr(firstColonPos + 1, secondColonPos)+":"+lexemaAux.substr(0,firstColonPos);
            //busco si el nuevo lexema se encuentra dentro del lexema a insertar
            size_t pos = newSm->lexema.find(lexemaAux);
            // si encuentra una posicion con el find significa que esta
            if(pos != string::npos){
                    //si se encuentra dentro del lexema a insertar, se borra la aparicion de el nombre de la clase unicamente 
                    size_t pos = newSm->lexema.find(nameOfClass);
                    newSm->lexema.erase(pos-1, pos);      //siguiendo con el ejemplo y suponiendo que tenemos x:main:func3:b, se borra la aparicion de b y queda x:main:func3
                    newSm->lexema =  newSm->lexema +":"+nameOfClass; //se concatena el nombre de la clase al final del lexema
            }
        }
    }
    return newSm->lexema;
}
/**
 * Cuando se detecta una declaración de objeto se llama esta función
 * Verificamos que no exista un objeto en el mismo ámbito con el mismo nombre   
 * agregamos el objeto a la tabla general, obtenemos la clase del objeto
 * agregamos cada atributo y método de la clase y de sus herencias. 
 * 
 * @param key El nombre del objeto a agregar.
 * @param scope El scope del objeto a agregar.
 * @param classType La clase del objeto a agregar.
 */
void addObject(string key, string scope, string classType){
    // si la clase no existe no hacemos nada ya que en la función initObjectDeclaration() se levanta el error de clase no declarada
    if (classType == "_error"){
        return;
    }
        
    // verificamos que no existea un objeto con el mismo nombre en el mismo ámbito
    int diff = tableSymbol->getDiffOffScope2(key, "objeto", scope); 
    if(diff == 0){
        // existe un objeto ocn el mismo nombre en el mismo ámbito
        yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
    }else{
        // eliminamos el símbolo viejo y lo agregamos en la tabla de simbolo general
        symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
        /*
            ACA SE AGREGAN LOS ATRIBUTOS AL OBJETO INSTANCIADO
        */
        newObject->classOfSymbol = classType; // seteamos el tipo de clase del objeto

        // obtenemos el símbolo de la clase del objeto
        symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(classType, "clase", ":main"); // obtenemos el símbolo de la clase del objeto
        
        // verificamos si la clase es una forward declaration 
        // de ser forward el objeto también se convierte en forwarded para luego isntanciarlo cuando la clase se declare
        // ya que si es asi no podemos agregar sus atributos y métodos
        if(matchingClass->forwarded){
            newObject->posponeForForwarding = true;    
            return;
        }
        
        // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
        for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
            symbol* simbolo = par.second;
            // creamos el nuevo símbolo
            symbol* newSm = new symbol(*simbolo);                
            
            // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
            //      la tabla de tercetos principal o de ejecución
            if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                createFunctionTerecets(key, scope, newSm, matchingClass->attributesAndMethodsVector);
            }
                    
            if(newSm->uso=="objeto"){
                // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                // ob1 ob2:main:clase1 :main clase1
                newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
            }

            newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
            
            // agregamos el nuevo símbolo a la tabla de simbolos        
            tableSymbol->insert(newSm);
        }

        // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general

        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = matchingClass->inheritance[i];
            // si hereda de alguna clase recorremos sus simbolos y los agregamos
            if(tableSymbolMatchingClass != nullptr){
                
                // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                        symbol* simbolo = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*simbolo);                
                        
                        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                        //      la tabla de tercetos principal o de ejecución
                        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                            createFunctionTerecets(key, scope, newSm, tableSymbolMatchingClass);
                        }

                        if(newSm->uso=="objeto"){
                            // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                            // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                            // ob1 ob2:main:clase1 :main clase1
                            newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
                        }

                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
            }
        }
    } 
};
/**
 * cuando detectamos una declaracion de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase lo agregamos a la tabla general
 * si está dentro de una clase lo agregamos a la tabla de la clase y le seteamos la clase a la que pertenece y el scope inside class
 * 
 * @param key nombre del acceso
 * @param scope scope actual
*/
void initFunction(string key, string scope){
        TableSymbol* ts;
        
        string scopeOriginal = scope;

        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        // buscamos si existe una función con el mismo nombre en el mismo ámbito
        int diff = ts->getDiffOffScope2(key, "funcion", scope); 
        if( diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newFunction = setNewScope(key, "void", scope, "funcion", ts); 
                
                // cargamos cual fue el último método o función por si tiene un parámetro
                lastMethod = newFunction;
                // si esta dentro de una clase le seteamos los atributos de clase y scopeInsideClass
                if(stackClasses->size() > 0){
                        string classOfAttribute = stackClasses->top()->classOfSymbol;
                        newFunction->classOfSymbol = classOfAttribute;
                        newFunction->scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                }
        } 
        // agregamos al scope el nombre de la función
        tableSymbol->addScope(key);
        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        //verificamos las recursiones y le sumamos uno
        cantOfRecursions++;
};
/**
 * Cuando detectamos el fin de una declaracion de función
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión

        if(stackClasses->size() <= 0){
                // si no está dentro de una clase lo agregamos a la tabla general
                vectorOfFunction->add(fs);
        }else{
            // si está dentro de una clase es una función declarada de ntro de un metodo y se guarda en el vector de funciones declaradas en clases
            vectorOfFunctionDeclaredInClasses->add(fs);
        }
            
}
/**
 * cuando detectamos el fin de una declaracion de metodo
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        // los vectores siempre se guardan en el vector de funciones declaradas en clases
        vectorOfFunctionDeclaredInClasses->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
/**
 * Cuando detectas una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable y si existe seteea el $$->ptr con el lexema
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void checkVarInScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        // verifico si estoy dentro de una clase o no
        TableSymbol* ts;
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        symbol* symbolFinded = ts->getFirstSymbolMatching2(key, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;

                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                */
                
                // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta usando la variable "+ key +" como una expresion en un ambito diferente al de su declaracion");
                }
        }
};

/**
 * función cuando se detecta una variable++ 
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void newFactorMasMas (string key, string scope, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key);

        // busca variable en scope que coincide con el uso
        //verificamos si estamos adentro de una clase
        TableSymbol* ts;
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }        
        symbol* symbolFinded = ts->getFirstSymbolMatching2(key, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                string value = "";
                if(symbolFinded->type == "unsigned int"){
                    value = "1_ui";
                }else if(symbolFinded->type == "short"){
                    value = "1_s";
                }else if(symbolFinded->type == "float"){
                    value = "1.0";
                }
                int number = addTercet("+", symbolFinded->lexema, value);   
                number = addTercet("=", symbolFinded->lexema, charTercetoId + to_string(number));       
                
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;

                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                    ESTO LO DEJO PARA ZUCCHI, DESPUES BORRAR ESTE COMENTARIO
                */
                
                // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta modificando la variable "+ key +" en un ambito diferente al de su declaracion");
                }
        }
}
/**
 * función cuando se detecta una asginación sobre una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable
 * verifica que los tipos sean iguales
 * verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key el acceso al identificador al que se le asigna.
 * @param scope el scope actual
 * @param op2Lexeme el acceso de lo que se asigna
 * @param op2Type el tipo de lo que se asigna
 * @throws yyerror si no hay variable alcanzable
 */
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        TableSymbol* ts;
        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        
        //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
        symbol* symbolFinded = ts->getFirstSymbolMatching2(key, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                // checkeamos que los tipos sean iguales 
                checkTypesAsignation(symbolFinded->type, op2Type); 
                bool isOp1Posponed = symbolFinded->type == "pospone";
                bool isOp2Posponed = op2Type == "pospone";
                // agregamos el terceto de asignación en la respectiva tabla de tercetos
                int number = addTercetPospone("=", symbolFinded->lexema, op2Lexeme, isOp1Posponed, isOp2Posponed, symbolFinded->type, op2Type, symbolFinded->type);
                
                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                
                */

                // si al variable tiene asignado que se checke y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta usando la variable "+ key +" a la izquierda de una asignacion en un ambito diferente al de su declaracion");
                }
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(op1type != "pospone" && op2type != "pospone"){
            if(checkTypesOperation(op1type, op2type)){
                    reglatype = op1type;
            }else{
                    reglatype = "error";
            } 

            int number = addTercetWithType(operador, op1ptr, op2ptr, op1type, op2type, reglatype); 
            reglaptr = charTercetoId + to_string(number); 

        }else{
            reglatype = "pospone";
            bool isOp1Posponed = op1type == "pospone";
            bool isOp2Posponed = op2type == "pospone";
            int number = addTercetPospone(operador, op1ptr, op2ptr, isOp1Posponed, isOp2Posponed, op1type, op2type, reglatype); 
            reglaptr = charTercetoId + to_string(number); 
        }
        
}
void newTof(string key, string& reglaptr, string& reglatype){
        int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        reglatype = "float";
}
void condition(string& reglaptr){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet());
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet());
        }
        int number = addTercetAndStack("BF", charTercetoId + lastTercet, ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void addElse(string& reglaptr){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet()+ 2);
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 2);
        }
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + lastTercet);
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        number = addTercet("label","label"+to_string(cantLabels),"");
        cantLabels++;
        reglaptr = charTercetoId + to_string(number); 
}

void finIf(){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet() + 1);
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 1);
        }
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + lastTercet);
        }
        int number = addTercet("label","label"+to_string(cantLabels),"");
        cantLabels++;
}

void initWhile(){
    string lastTercet;
    if(cantOfRecursions <= 0){
        lastTercet = to_string(tableTercets->numberOfLastTercet() + 1);
    }else{
        lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 1);
    }
    addTercetOnlyStack("incioCondicionWhile", charTercetoId + lastTercet, "");
    int number = addTercet("label","label"+to_string(cantLabels),"");
    cantLabels++;
}

void finWhile(string & reglaptr) {
    string lastTercet;
    if(cantOfRecursions <= 0){
        lastTercet = to_string(tableTercets->numberOfLastTercet() + 2);
    }else{
        lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 2);
    }
    Tercet *t = popTercet(); 
    if (t!=nullptr){
            t->setArg2( charTercetoId + lastTercet );
    } 
    Tercet *t2 = popTercet(); 
    int number; 
    if(t2!=nullptr){
            number = addTercet("BI", t2->getArg1(), "");
    } 
    number = addTercet("label","label"+to_string(cantLabels),"");
    cantLabels++;
    reglaptr = charTercetoId + to_string(number);
}

void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
    checkTypesCompare(op1type, op2type); 
    int number = addTercet(operador, op1ptr, op2ptr); 
    reglaptr = charTercetoId + to_string(number);
}

/**
 * Cuando se detecta una sentencia que declara una variable se llama esta función.
 * Agrega una nueva variable a la tabla de símbolos específica de clase o la general.
 * Agrega los atributos correspondientes al símbolo
 * Verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key La clave de la variable.
 * @param scope El ámbito de la variable.
 * @param type El tipo de la variable.
 */
void newVariable(string key, string scope, string type){
        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;
        
        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general
                ts = tableSymbol;
        }else{
                // obtenemos la tabla de la clase
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        //buscamos si esta definida ya una variable con ese mismo nombre dentro de la tabla de simbolos que corresponda
        int diff = ts->getDiffOffScope2(key, "var", scope); 
        
        if(diff == 0){
                // existe una variable previa en el mismo ambito con el mismo nombre
                yyerror("Redeclaracion de variable en el mismo ambito");
        }else{
            // eliminamos el simbolo de la tabla general y lo agregamos a la tabla específica, si es de clase le seteamos los atributos
            if(stackClasses->size() <= 0){
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */
                    if (isVariableToCheck){
                        // si es una variable a chequear le seteamos que se debe checkear en el simbolo
                        newIdentificador->isVariableToCheck = true;
                    }
            }else{
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */

                    // marcamos a que clase pertenece el simbolo
                    string classOfAttribute = stackClasses->top()->classOfSymbol;
                    newIdentificador->classOfSymbol = classOfAttribute;
                    // marcamos cual seria el scope dentro de la clase de donde proviene la variable
                    string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                    newIdentificador->scopeInsideClass = scopeInsideClass;

                    if (isVariableToCheck){
                        // si es una variable a chequear le seteamos que se debe checkear en el simbolo
                        newIdentificador->isVariableToCheck = true;
                    }
            }
        }
};
/**
 * Cuando se detecta la clase de un objeto a instanciar se llama esta función.
 * Borra el símbolo de la tabla de símbolos general.
 * Verifica que la clase haya sido declarada y exista.
 * 
 * @param key nombre de la clase
 * @param scope El alcance del objeto.
 * @param reglaptr El puntero a la regla.
 */
void initObjectDeclaration(string key, string scope, string& reglaptr){
    // verificar que la clase haya sido declarada y exista
    // borramos el símbolo de la tabla de símbolos general
    tableSymbol->deleteSymbol(key);
    // usamos ":main" porque todas las clases se usan en el ámbito ":main"
    symbol* classFinded = tableSymbol->getFirstSymbolMatching2(key, "clase", ":main");
    //debo revisar si es estoy dentro de una clase o no, ya que pudiera pasar que uno quiera declarar un objeto de una dentro de la misma clase
    if(classFinded == nullptr){
        yyerror("No se encontro declaracion previa de la clase "+ key);
        actualClass = "_error"; 
    }else{ 
        if(stackClasses->size() > 0){
            //si estoy dentro de una clase, debo verificar que la clase que quiero instanciar no sea la misma clase en la que estoy
            if(stackClasses->top()->classOfSymbol == key){
                yyerror("No se puede instanciar un objeto de la misma clase en la que se encuentra");
                actualClass = "_error"; 
            }
        }
        reglaptr = key; 
        actualClass = key; 
    }
}
/**
 * Borra el simbolo de la tabla general
 * verifica si existe la clase a heredar, sino existe lanza un error de que no existe la clase
 * si encontras la clase copias su arreglo de herencia a esta clase que hereda y le agregas en el primer nullptr la clase a heredar (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))
 *
 *
 * @param classToInherit The name of the class to inherit from.
 * @param scope The scope of the inheriting class.
 * @param classWhoInherit The name of the class that inherits.
 * @return void
 */
void  detectInheritance(string classToInherit , string scope, string classWhoInherit){
        
        // borrar el simbolo de la tabla general
        // buscar si existe la clase a heredar, sino existe lanzar un error de que no existe la clase
        // si encontras la clase copias su arrehlo de herencia a el arreglo de este símbolo y luego le agregas la clase a 
        // heredar en el primer nullptr de ese arreglo (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))

        tableSymbol->deleteSymbol(classToInherit); // borramos el símbolo de la tabla general

        symbol* symbolofClassWhoInherit = stackClasses->top();  //guardas el simbolo de la ultima clase creada y agregada al stack de clases

        // verificamos que no herede esta clase de otro,solo puede heredar de una
        if (symbolofClassWhoInherit->isAlreadyInhenriting){
                        yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de otra clase");
        }else{
                // buscamos la clase a heredar, la buscamos con scope ":main" porque es en el único lugar donde se pueden declarar clases
                symbol* classFinded = tableSymbol->getFirstSymbolMatching2(classToInherit, "clase", ":main");
                if(classFinded == nullptr){
                        yyerror("No se encontro declaracion previa de la clase a heredar "+ classToInherit);
                }else if (symbolofClassWhoInherit->classOfSymbol == classToInherit)
                        {
                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de si misma");
                        }else{
                            // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                            // intentamos agregar la clase a heredar en el primer nullptr del arreglo de herencia, si tiene más de 3 elementos lanzamos un error

                            // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                            for(int i = 0; i < 2; i++) {
                                    symbolofClassWhoInherit->inheritance[i] = classFinded->inheritance[i];
                            }
                            bool isNullptr = false;
                            int posOfNullInInheritance = -1;
                            // recorres el arreglo verificando que exista alguna posicion con nullptr, si es asi seteas el booleano con true y guardas la posicion del nullptr.
                            for (int i=0; i < 2; i++){
                                    if(symbolofClassWhoInherit->inheritance[i]==nullptr){
                                            isNullptr = true;
                                            posOfNullInInheritance = i;
                                            break;
                                    }
                            }
                            // si el boleano es true, agregas la clase a heredar en el lugar que se encuentra nullptr del arreglo de herencia, si no es true lanzas un error diciendo que ya existe una herencia de 3 clases
                            if(isNullptr){
                                    symbolofClassWhoInherit->inheritance[posOfNullInInheritance] = classFinded->attributesAndMethodsVector; 
                                    symbolofClassWhoInherit->isAlreadyInhenriting = true; 
                                    //se debe realizar un chequeo de metodos para evitar la sobreescritura de metodos
                                    //si se encuentra un metodo con el mismo nombre en la clase que hereda y en la clase que es heredada se lanza un error
                                    for (const auto& par : symbolofClassWhoInherit->attributesAndMethodsVector->getSymbolTable()){
                                        symbol* sm = par.second;
                                        if(sm->uso == "metodo"){
                                            string lexemaAux = sm->lexema.substr(0, sm->lexema.find(":"));
                                            symbol* sm2 = classFinded->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(lexemaAux, "metodo");
                                            //accedo si es que classfinded hereda de otra clase para verificar si esta tambien hereda un metodo con el mismo nombre
                                            symbol* sm3;
                                            if(classFinded->inheritance[0] != nullptr){
                                                symbol* sm3 = classFinded->inheritance[0]->getElementInTableByFisrtPartAndUse(lexemaAux, "metodo");
                                            }
                                            if(sm2 != nullptr || sm3 != nullptr){
                                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de " + classToInherit + " pero ya hereda un metodo con el mismo nombre");
                                                }
                                        }
                                    }
                                    
                            }else{
                                    yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de " + classToInherit + " pero ya hereda de 2 clases");
                            }
                        
                        }
        }
}
/**
 * Cuando finaliza la declaración de variables se llama esta función.
 * Establece la variable para checkeo de variables en falso.
 */
void finishVariableDeclaration(){
    isVariableToCheck = false;
}
/**
 * Cuando se detecta la palabra reservada CHECK se llama esta función.
 * Establece la variable para checkeo de variables en true.
 */
void setVariableToCheck(){
    isVariableToCheck = true;
}
/**
 * Esta función busca el símbolo de un atributo que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra elsímbololo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfAttribute(string attributeName, symbol* classSymbol){
    
    // verificamos si el elemento está en la tabla de símbolos de la clase actual, si está devolvemos el símbolo
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si está devilvemos el símbolo
    // sino lo encontramos devolvemos nullptr
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
/**
 * Esta función se llama cuando se detecta el uso de un atributo en una expresión aritmética (a la derecha de una asignación).
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * asigna a reglaptr el lexema del símbolo y a reglatype el tipo del símbolo.
 *
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param reglaptr Puntero a la regla.
 * @param reglatype Tipo de la regla.
 */
void newUseObjectAttribute(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                reglaptr =  attributeName+":"+classOfObject+":"+objectName+scope;
                reglatype = "pospone";
                return;
            }
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    reglaptr =  attributeSymbol->lexema;
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta la asignación de una expresión a un atributo de un objeto.
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * Verifica que los tipos sean iguales.
 * Genera la asignación de la expresión al atributo del objeto.
 * 
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param op2Lexeme Lexema de la expresión a asignar.
 * @param op2Type Tipo de la expresión a asignar.
 * @param reglaptr Puntero al terceto generado.
 * @param reglatype Tipo del atributo.
 */
void newAsignacionObjectAttribute(string objectName, string attributeName, string scope, string op2Lexeme, string op2Type, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                int number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+scope, op2Lexeme, true, false, "pospone", op2Type);

                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    // checkeamos que los tipos sean iguales 
                    checkTypesAsignation(attributeSymbol->type, op2Type); 

                    // agregamos el terceto de asignación en la respectiva tabla de tercetos
                    int number = addTercet("=", attributeSymbol->lexema, op2Lexeme);
                    
                    reglaptr = charTercetoId + to_string(number);
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};

void newUseObjectAttributeFactorMasMas(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                int number = addTercetPospone("++", attributeName+":"+classOfObject+":"+objectName+scope, "", true, false, "pospone", ""); 
                number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+scope, charTercetoId + to_string(number), true, false,"pospone",""); 
                reglaptr = attributeName+":"+classOfObject+":"+objectName+scope;
                reglatype = "pospone";
                return;
            }
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    string value = "";
                    if(attributeSymbol->type == "unsigned int"){
                        value = "1_ui";
                    }else if(attributeSymbol->type == "short"){
                        value = "1_s";
                    }else if(attributeSymbol->type == "float"){
                        value = "1.0";
                    }
                    int number = addTercet("+", attributeSymbol->lexema, value);   
                    number = addTercet("=", attributeSymbol->lexema, charTercetoId + to_string(number));           
                
                    reglaptr = charTercetoId + to_string(number);
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta una invocación a función sin parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función no tenga parámetros, sino tiramos un error de que falta pasar un parámetro.
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacion(string nombreFuncion, string scope, string& reglaptr){
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 

    TableSymbol* ts;
    // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
    if(stackClasses->size() <= 0){
        ts = tableSymbol;
    }else{
        ts = stackClasses->top()->attributesAndMethodsVector;
    }
        
    //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
    symbol* functionFinded = ts->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam != 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " sin pasarle un parametro, el parametro debe ser de tipo " + functionFinded->typeParam);
        }

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        int number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
/**
 * Esta función se llama cuando se detecta una invocación a función con parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función tenga parámetros, sino tiramos un error de que estamos llamando a una función que no requiere de parametros.
 * verificamos que los tipos de los parametros coincidan
 * generamos el terceto de pasaje de parameros
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacionWithParam(string nombreFuncion, string scope, string ptrParam, string typeParam, string& reglaptr){

    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 

    TableSymbol* ts;
    // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
    if(stackClasses->size() <= 0){
        ts = tableSymbol;
    }else{
        ts = stackClasses->top()->attributesAndMethodsVector;
    }
        
    //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
    symbol* functionFinded = ts->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam == 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " con parametro y la funcion no recibe parametro");
        }else{
            // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
            // verificamos que los tipos de los parametros sean ifuales
            checkTypesParams(functionFinded->typeParam, typeParam); 
        }
            
        /*
            NO SE PORQUE PERO PRESIENTO QUE VA A SERVIR
        */

        // creamos un terceto de pasaje de parametro con su ptr y su tipo
        int number = addTercet("paramReal", ptrParam, typeParam);
        number = addTercet("paramFormal", functionFinded->nameParam, functionFinded->typeParam);

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
/**
 * Esta función busca el símbolo de un metoddo que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra el símbololo lo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfMethod(string attributeName, symbol* classSymbol){
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(attributeName, "metodo");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(attributeName, "metodo");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
void newInvocacionMethod(string objectName, string methodName, string scope, string& reglaptr){
    /*
        Esta funciónse llama cuando se detecta quese quiere invocar un método sin parametro de un objeto
        Verifica que el objeto esté declarado y obtiene su clase.
        Verificar que la clase exista
        Verificar que la clase contenga el método
        Obtener sumando el scope estático del método + nombre objeto + scope actual el lexema del símbolo propio del objeto.
        verificar que el metodo no reciba atributos, sino informarlo
        generar el terceto de call a ese método

    */

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                int number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+scope, "", true, false,"pospone","");

                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // si encontramos la clase verificamos que contenga el metodo    
            symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);

            if(methodSymbol == nullptr){
                yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                
                methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + objectName, "metodo", scope);
                if (methodSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    // verificamos que el metodo no tenga parametros
                    if(methodSymbol->cantParam != 0){
                        yyerror("Se esta llamando al metodo "+ methodName + " del objeto " + objectName + " sin pasarle un parametro, el parametro debe ser de tipo " + methodSymbol->typeParam);
                    }
                    // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos
                    int number = addTercet("call", methodSymbol->lexema, "");

                    reglaptr = charTercetoId + to_string(number);
                }
            }
        }
    }

};

void newInvocacionMethodWithParam(string objectName, string methodName, string scope, string ptrParam, string typeParam, string& reglaptr){
    /*
        Esta funciónse llama cuando se detecta quese quiere invocar un método con parametro de un objeto 
        Verifica que el objeto esté declarado y obtiene su clase.
        Verificar que la clase exista
        Verificar que la clase contenga el método
        Obtener sumando el scope estático del método + nombre objeto + scope actual el lexema del símbolo propio del objeto.
        verificar que el metodo no reciba atributos, sino informarlo
        generar el terceto de call a ese método

    */

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                // como tiene un parametro se lo ponemoscomo segundo argumetno para suposterior uso
                // creamos un terceto de pasaje de parametro con su ptr y su tipo
                int number = addTercet("paramReal", ptrParam, typeParam);
                number = addTercet("paramFormal", "", "");
                number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+scope, typeParam+":"+ptrParam, true, false,"pospone","");

                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // si encontramos la clase verificamos que contenga el metodo    
            symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);
            /*
                Esta función debe buscar en la tabla de la clase si existe elmétodo y sino buscarlo en las clases heredadas
                devuelve el puntero a ese metodo
            */

            if(methodSymbol == nullptr){
                yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                
                methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + objectName, "metodo", scope);
                if (methodSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    // verificamos que el metodo tenga parametros
                    if(methodSymbol->cantParam == 0){
                        yyerror("Se esta llamando al metodo "+ methodName + " con parametro y la funcion no recibe parametro");
                    }else{
                        // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
                        // verificamos que los tipos de los parametros sean iguales
                        checkTypesParams(methodSymbol->typeParam, typeParam); 
                    }
                        
                    /*
                        NO SE PORQUE PERO PRESIENTO QUE VA A SERVIR
                    */

                    // creamos un terceto de pasaje de parametro con su ptr y su tipo
                    int number = addTercet("paramReal", ptrParam, typeParam);
                    number = addTercet("paramFormal", methodSymbol->nameParam, methodSymbol->typeParam);

                    // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos
                    number = addTercet("call", methodSymbol->lexema, "");

                    reglaptr = charTercetoId + to_string(number);
                }
            }
        }
    }
};
void addTercetReturn(string& reglaptr){
        int number = addTercet("return","","");        

        reglaptr = charTercetoId + to_string(number);
};
void addObjectToClass(string objectName, string scope, string className, string classActual){
    yyPrintInLine("Se detecto declaracion de objeto en clase"); 
    cout << className << "    " << classActual << endl;
    // Obtememos el simbolo viejo de la clase y el objeto y los borramos
    // buscamos si existe la clase de este objeto, sino lanzamos ese error
    // buscamos si existe la clase en donde queremos poner el objeto sino no hacemos nada
    // agregamos el objeto a la clase

    tableSymbol->deleteSymbol(objectName);         // eliminamos el simbolo de la tabla general
    tableSymbol->deleteSymbol(className);

    // operamos sobre la tabla de símbolos de la clase
    TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = tsClass->getDiffOffScope2(objectName, "objeto", scope); 
            
    if(diff == 0){
            yyerror("Redeclaracion de objeto en la misma clase");
    }else{
            // creamos el nuevo símbolo para el atributo
            symbol* newAttribute = new symbol(objectName+scope, "", "", "objeto");
            /*
                    ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
            */

            // Marcamos a la clase que pertenece el atributo
            newAttribute->classOfSymbol = className;

            // agregamos el nuevo símbolo al vector de simbolos de la clase        
            tsClass->insert(newAttribute);
    }        
}
void verifyAllClassForwardedAreDeclared(){
        // esta función se encarga de recorrer la tabla de símbolo y por cada clase verifica que no este forwardeada

        // recorremos la tabla de símbolos
        for(const auto& pair : tableSymbol->getSymbolTable()){
                symbol* sm = pair.second;
                // verificamos que sea una clase
                if(sm->uso == "clase"){
                        // verificamos que no este forwardeada
                        if(sm->forwarded){
                                yyerror("La clase " + sm->lexema + " esta forwardeada y no se completó su declaración");
                        }
                }
        }
};
void instanciatePosponeObjectForForwarding(){
        // esta función se encarga de recorrer la tabla de símbolo y por cada objeto que tenga posponeForForwarding en true, 
        // agrega sus atributos y métodos a la tabla de símbolos general y setea posponeForForwarding en false

        // recorremos la tabla de símbolos
        for(const auto& pair : tableSymbol->getSymbolTable()){
                symbol* sm = pair.second;
                // verificamos que sea una clase
                if(sm->uso == "objeto"){
                        // verificamos que no este forwardeada
                        if(sm->posponeForForwarding){
                                // agregamos los atributos y métodos a la tabla de símbolos general
                                symbol* symbolClass = tableSymbol->getFirstSymbolMatching2(sm->classOfSymbol, "clase", ":main");
                                addObjectForwarded(sm, symbolClass);
                        }
                }
        } 
};
void checkTercetsPosponeAreCorrect(Tercets* ts){
    // recorrer los tercetos del main y buscamos que terceto tiene algún pospone activado
    // sabemos que si es un call es a un étodo del primer argumento y debemos verificar que exista y setear correctamente el argumento (por el scope)
    // si es una operación aritmétca es una tributo de clase y debemos ver cual de los argumetnos está pospuesto, buscar ese atributo y checkear tipos
    int numberTercet = -1;
    for (Tercet* tercet : ts->getTercets()){
        numberTercet++;
        // tercet->print();
        if(tercet->getOp() == "call"){
            if(tercet->arg1Pospone ){
                // es un llamado a método
                size_t firstPos = tercet->getArg1().find(":");
                size_t secondPos = tercet->getArg1().find(":", firstPos + 1);
                size_t thirdPos = tercet->getArg1().find(":", secondPos + 1);
                
                // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                string methodName = tercet->getArg1().substr(0, firstPos);
                string classOfObject = tercet->getArg1().substr(firstPos+1, secondPos - firstPos - 1);
                string objectName = tercet->getArg1().substr(secondPos+1, thirdPos - secondPos - 1);
                string scope  = tercet->getArg1().substr(thirdPos, tercet->getArg1().size());
                
                // Verifica que el objeto este declarado y obtiene su clase
                symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                if(objectSymbol == nullptr){
                        yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                }else{
                    // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                    symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                    }else{
                        // si encontramos la clase verificamos que contenga el metodo    
                        symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);
                        if(methodSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName); 
                        }else{
                            // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                            // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                
                            methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + objectName, "metodo", scope);
                            if (methodSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + objectName);
                            }else{
                            // verificamos que el metodo tenga parametros
                                if(tercet->getArg2() != ""){
                                    // el método tiene parametros
                                    string typeParam = tercet->getArg2().substr(0, tercet->getArg2().find(":"));
                                    string ptrParam = tercet->getArg2().substr(tercet->getArg2().find(":")+1, tercet->getArg2().size());
                                    if(methodSymbol->cantParam == 0){
                                        yyerrorFin("Se esta llamando al metodo "+ methodName + " con parametro y el metodo no recibe parametro");
                                    }else{
                                        // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
                                        // verificamos que los tipos de los parametros sean iguales
                                        checkTypesParamsFin(methodSymbol->typeParam, typeParam); 
                                    }

                                    // reemplazamos los tercetos existentes de los parametros por los correctos
                                    Tercet *t1 = new Tercet("paramReal", ptrParam, typeParam); 
                                    Tercet *t2 = new Tercet("paramFormal", methodSymbol->nameParam, methodSymbol->typeParam); 
                                    ts->replace(numberTercet-2, t1);
                                    ts->replace(numberTercet-1, t2);

                                }else{
                                    // el método no tiene parametros
                                    if(methodSymbol->cantParam != 0){
                                        yyerrorFin("Se esta llamando al metodo "+ methodName + " sin parametro y el metodo recibe parametro");
                                    }
                                }
                                Tercet *tcall = new Tercet("call", methodSymbol->lexema, "");
                                ts->replace(numberTercet, tcall);
                            }
                        }
                    }
                }
            }
            
        }
        if(tercet->getOp() == "++"){
            // estamos ante una operación de ++
            // verificamos que el atributo exista y atualzamosel terceto
            if(tercet->arg1Pospone ){
                // es un llamado a método
                size_t firstPos = tercet->getArg1().find(":");
                size_t secondPos = tercet->getArg1().find(":", firstPos + 1);
                size_t thirdPos = tercet->getArg1().find(":", secondPos + 1);
                
                // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                string attributeName = tercet->getArg1().substr(0, firstPos);
                string classOfObject = tercet->getArg1().substr(firstPos+1, secondPos - firstPos - 1);
                string objectName = tercet->getArg1().substr(secondPos+1, thirdPos - secondPos - 1);
                string scope  = tercet->getArg1().substr(thirdPos, tercet->getArg1().size());
                
                // Verifica que el objeto este declarado y obtiene su clase
                symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                if(objectSymbol == nullptr){
                        yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                }else{
                    // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                    symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                    }else{
                        // si encontramos la clase verificamos que contenga el atributo     
                        symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                        if(attributeSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
                        }else{
                            // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                            // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                            
                            attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                            if (attributeSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                            }else{
                                string value = "";
                                if(attributeSymbol->type == "unsigned int"){
                                    value = "1_ui";
                                }else if(attributeSymbol->type == "short"){
                                    value = "1_s";
                                }else if(attributeSymbol->type == "float"){
                                    value = "1.0";
                                }
                                Tercet *tcall = new Tercet("+", attributeSymbol->lexema, value);
                                tcall->typeTercet = attributeSymbol->type; // le seteamos el tipo al terceto para luego poder operar con estos
                                tcall->type1 = attributeSymbol->type;
                                tcall->type2 = attributeSymbol->type;
                                ts->replace(numberTercet, tcall);

                            }
                        }
                    }
                }
            }
        }   
        if(tercet->getOp() == "="){
            // detectamos una asignación
            // verificamos que alguno de los dos argumentos sea pospone
            symbol* attributeSymbol1;
            symbol* attributeSymbol2;
            bool isErrorInAttribute = false;
            if ( tercet->arg1Pospone){
                if(tercet->getArg1()[0] == charTercetoId){
                    tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    size_t firstPos = tercet->getArg1().find(":");
                    size_t secondPos = tercet->getArg1().find(":", firstPos + 1);
                    size_t thirdPos = tercet->getArg1().find(":", secondPos + 1);
                    
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    string attributeName = tercet->getArg1().substr(0, firstPos);
                    string classOfObject = tercet->getArg1().substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = tercet->getArg1().substr(secondPos+1, thirdPos - secondPos - 1);
                    string scope = tercet->getArg1().substr(thirdPos, tercet->getArg1().size());

                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        string classOfObject = objectSymbol->classOfSymbol;
                        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            // si encontramos la clase verificamos que contenga el atributo     
                            attributeSymbol1 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                            if(attributeSymbol1 == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
                                isErrorInAttribute = true;
                            }else{
                                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                
                                attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + objectName, "atributo", scope);
                                if (attributeSymbol1 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                                    isErrorInAttribute = true;
                                }
                            }
                        }
                    }
                }
            }
            if ( tercet->arg2Pospone){
                if(tercet->getArg2()[0] == charTercetoId){
                    tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    size_t firstPos = tercet->getArg2().find(":");
                    size_t secondPos = tercet->getArg2().find(":", firstPos + 1);
                    size_t thirdPos = tercet->getArg2().find(":", secondPos + 1);
                    
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    string attributeName = tercet->getArg2().substr(0, firstPos);
                    string classOfObject = tercet->getArg2().substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = tercet->getArg2().substr(secondPos+1, thirdPos - secondPos - 1);
                    string scope = tercet->getArg2().substr(thirdPos, tercet->getArg2().size());

                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        string classOfObject = objectSymbol->classOfSymbol;
                        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            // si encontramos la clase verificamos que contenga el atributo     
                            attributeSymbol2 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                            if(attributeSymbol2 == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
                                isErrorInAttribute = true;
                            }else{
                                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                
                                attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + objectName, "atributo", scope);
                                if (attributeSymbol2 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                                    isErrorInAttribute = true;
                                }
                            }
                        }
                    }
                }
            }
            if (!isErrorInAttribute){
                if (tercet->arg1Pospone && !tercet->arg2Pospone){
                    // checkeamos que los tipos sean iguales 
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                    }
                    checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                    // agregamos el terceto de asignación en la respectiva tabla de tercetos
                    tercet->setArg1(attributeSymbol1->lexema);
                    tercet->type1 = attributeSymbol1->type;
                    tercet->arg1Pospone = false;
                }
                if (!tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = tercet->type2;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 

                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol2->type;
                    }
                }
                if (tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;

                    }else{
                        // checkeamos que los tipos sean iguales 
                        checkTypesAsignationFin(attributeSymbol1->type, attributeSymbol2->type);
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                    }
                }
            }
                
        }
        if(tercet->getOp() == "+" || tercet->getOp() == "-" || tercet->getOp() == "*" || tercet->getOp() == "/"){
            // encontramos un terceto de operación
            // verificamos que alguno de los dos argumentos sea pospone
            symbol* attributeSymbol1;
            symbol* attributeSymbol2;
            bool isErrorInAttribute = false;
            if ( tercet->arg1Pospone){
                if(tercet->getArg1()[0] == charTercetoId){
                    tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    size_t firstPos = tercet->getArg1().find(":");
                    size_t secondPos = tercet->getArg1().find(":", firstPos + 1);
                    size_t thirdPos = tercet->getArg1().find(":", secondPos + 1);
                    
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    string attributeName = tercet->getArg1().substr(0, firstPos);
                    string classOfObject = tercet->getArg1().substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = tercet->getArg1().substr(secondPos+1, thirdPos - secondPos - 1);
                    string scope = tercet->getArg1().substr(thirdPos, tercet->getArg1().size());

                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        string classOfObject = objectSymbol->classOfSymbol;
                        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            // si encontramos la clase verificamos que contenga el atributo     
                            attributeSymbol1 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                            if(attributeSymbol1 == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
                                isErrorInAttribute = true;
                            }else{
                                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                
                                attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + objectName, "atributo", scope);
                                if (attributeSymbol1 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                                    isErrorInAttribute = true;
                                }
                            }
                        }
                    }
                }
            }
            if ( tercet->arg2Pospone){
                if(tercet->getArg2()[0] == charTercetoId){
                    tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    size_t firstPos = tercet->getArg2().find(":");
                    size_t secondPos = tercet->getArg2().find(":", firstPos + 1);
                    size_t thirdPos = tercet->getArg2().find(":", secondPos + 1);
                    
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    string attributeName = tercet->getArg2().substr(0, firstPos);
                    string classOfObject = tercet->getArg2().substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = tercet->getArg2().substr(secondPos+1, thirdPos - secondPos - 1);
                    string scope = tercet->getArg2().substr(thirdPos, tercet->getArg2().size());

                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto"+ objectName);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        string classOfObject = objectSymbol->classOfSymbol;
                        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            // si encontramos la clase verificamos que contenga el atributo     
                            attributeSymbol2 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                            if(attributeSymbol2 == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
                                isErrorInAttribute = true;
                            }else{
                                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                
                                attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + objectName, "atributo", scope);
                                if (attributeSymbol2 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                                    isErrorInAttribute = true;
                                }
                            }
                        }
                    }
                }
            }
            if (!isErrorInAttribute){
                if (tercet->arg1Pospone && !tercet->arg2Pospone){
                    if(tercet->getArg1()[0] == charTercetoId){
                        tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg2()[0] == charTercetoId){
                            tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg1Pospone = false;
                        tercet->typeTercet = tercet->type1;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg2()[0] == charTercetoId){
                            tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        Tercet * tasig = ts->get(numberTercet);
                        tasig->setArg1(attributeSymbol1->lexema);
                        tasig->type1 = attributeSymbol1->type;
                        tasig->arg1Pospone = false;
                        tasig->typeTercet = attributeSymbol1->type;
                    }   
                }
                if (!tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = tercet->type2;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 

                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        Tercet * tasig = ts->get(numberTercet);
                        tasig->setArg2(attributeSymbol2->lexema);
                        tasig->type2 = attributeSymbol2->type;
                        tasig->arg2Pospone = false;
                        tasig->typeTercet = attributeSymbol2->type;
                    }
                }
                if (tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg1()[0] == charTercetoId && tercet->getArg2()[0] != charTercetoId){
                        tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol2->type;
                    }
                    if(tercet->getArg1()[0] != charTercetoId && tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol1->type;
                    }
                    if(tercet->getArg1()[0] != charTercetoId && tercet->getArg2()[0] != charTercetoId){
                        
                        checkTypesAsignationFin(attributeSymbol1->type, attributeSymbol2->type); 
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol1->type;
                    }
                }
            }
        }
        
    }
};
void finPrograma(){
        int number = addTercet("FIN", "-", "-");
        verifyAllClassForwardedAreDeclared();
        instanciatePosponeObjectForForwarding();
        checkTercetsPosponeAreCorrect(tableTercets);
        for(functionStack* fs : *(vectorOfFunction->getFunctions())){
            checkTercetsPosponeAreCorrect(fs->ter);
        }
}
#line 3215 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:

#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 80 "./gramaticaForGenCod.y"
{ finPrograma();  }
break;
case 2:
#line 81 "./gramaticaForGenCod.y"
{ finPrograma(); }
break;
case 3:
#line 82 "./gramaticaForGenCod.y"
{ finPrograma(); }
break;
case 4:
#line 83 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 84 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 85 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 86 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 88 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 89 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 90 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 91 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 92 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 93 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 94 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 95 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 96 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 105 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 106 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 107 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 114 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); yyPrintInLine("Se detecto declaracion de variable");}
break;
case 28:
#line 115 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); yyPrintInLine("Se detecto declaracion de variable con CHECK");}
break;
case 30:
#line 117 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 31:
#line 118 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 32:
#line 120 "./gramaticaForGenCod.y"
{ setVariableToCheck(); }
break;
case 33:
#line 122 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 34:
#line 123 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 35:
#line 124 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 36:
#line 126 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 37:
#line 127 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 38:
#line 128 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 39:
#line 131 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 40:
#line 134 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 41:
#line 135 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 42:
#line 136 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 43:
#line 137 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 44:
#line 138 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 45:
#line 140 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 46:
#line 142 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 47:
#line 144 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 50:
#line 147 "./gramaticaForGenCod.y"
{ addObjectToClass(yyvsp[-1]->ptr, tableSymbol->getScope(), yyvsp[-2]->ptr, actualClass); }
break;
case 51:
#line 148 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 54:
#line 151 "./gramaticaForGenCod.y"
{ addObjectToClass(yyvsp[-1]->ptr, tableSymbol->getScope(), yyvsp[-2]->ptr, actualClass);}
break;
case 55:
#line 153 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 56:
#line 154 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 57:
#line 156 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 58:
#line 157 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 59:
#line 158 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 60:
#line 161 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 61:
#line 162 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 62:
#line 165 "./gramaticaForGenCod.y"
{}
break;
case 63:
#line 167 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 64:
#line 170 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 65:
#line 171 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 66:
#line 174 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 67:
#line 175 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 68:
#line 176 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 69:
#line 179 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 70:
#line 180 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 71:
#line 182 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, actualClass); yyval->type = yyvsp[-1]->type;}
break;
case 72:
#line 183 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 73:
#line 184 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 75:
#line 186 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 76:
#line 189 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 77:
#line 190 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 78:
#line 191 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 80:
#line 193 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 81:
#line 196 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 84:
#line 200 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 85:
#line 201 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 86:
#line 202 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 87:
#line 203 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 88:
#line 204 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 90:
#line 206 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 91:
#line 207 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 92:
#line 208 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 93:
#line 209 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 94:
#line 210 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 100:
#line 218 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 101:
#line 219 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 102:
#line 220 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 103:
#line 221 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 105:
#line 225 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 106:
#line 226 "./gramaticaForGenCod.y"
{ newAsignacionObjectAttribute(yyvsp[-4]->ptr, yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr, yyvsp[0]->type, yyvsp[0]->ptr,yyvsp[0]->type); }
break;
case 107:
#line 227 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 108:
#line 228 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 109:
#line 231 "./gramaticaForGenCod.y"
{ newInvocacionWithParam(yyvsp[-3]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, yyvsp[-1]->type, yyval->ptr); }
break;
case 110:
#line 232 "./gramaticaForGenCod.y"
{ newInvocacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 111:
#line 233 "./gramaticaForGenCod.y"
{ newInvocacionMethodWithParam(yyvsp[-5]->ptr, yyvsp[-3]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, yyvsp[-1]->type, yyval->ptr); }
break;
case 112:
#line 234 "./gramaticaForGenCod.y"
{ newInvocacionMethod(yyvsp[-4]->ptr, yyvsp[-2]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 113:
#line 238 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 114:
#line 239 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 115:
#line 240 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 116:
#line 241 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 117:
#line 242 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 118:
#line 243 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 119:
#line 244 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 120:
#line 247 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 121:
#line 248 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 122:
#line 249 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 123:
#line 252 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 124:
#line 255 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 125:
#line 256 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 126:
#line 257 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 127:
#line 258 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 128:
#line 259 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 130:
#line 263 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 131:
#line 264 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 133:
#line 266 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 136:
#line 273 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 137:
#line 275 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 138:
#line 276 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 139:
#line 279 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 141:
#line 285 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 142:
#line 286 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 143:
#line 287 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 144:
#line 288 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 145:
#line 289 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 146:
#line 290 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 149:
#line 295 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 150:
#line 296 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 151:
#line 297 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 153:
#line 299 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 155:
#line 301 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 158:
#line 305 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 161:
#line 310 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 162:
#line 311 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 163:
#line 312 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 165:
#line 314 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 167:
#line 316 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 169:
#line 318 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 170:
#line 321 "./gramaticaForGenCod.y"
{ addTercetReturn(yyval->ptr); }
break;
case 172:
#line 325 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 174:
#line 327 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 175:
#line 328 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 176:
#line 329 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 177:
#line 330 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 178:
#line 331 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 179:
#line 332 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 180:
#line 333 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 181:
#line 336 "./gramaticaForGenCod.y"
{ checkVarInScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 182:
#line 337 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 183:
#line 338 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 184:
#line 339 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 185:
#line 340 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr,yyval->ptr,yyval->type); }
break;
case 186:
#line 341 "./gramaticaForGenCod.y"
{ newUseObjectAttribute(yyvsp[-2]->ptr, yyvsp[0]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 187:
#line 342 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 188:
#line 343 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 189:
#line 346 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 190:
#line 349 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 191:
#line 350 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 192:
#line 351 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 193:
#line 352 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 194:
#line 353 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 3971 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
