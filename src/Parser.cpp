#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction();
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";
string actualClass = "";
symbol* lastParam;
symbol* lastClass;

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 52 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
   10,   10,   10,   10,   10,   10,   11,    8,    8,    8,
    8,    8,   14,   15,   15,   15,   15,   16,   16,   17,
   17,   17,   18,   18,    9,   19,   20,   20,    6,    6,
    6,    7,    7,   12,   12,   12,   12,   12,   13,   13,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   21,   21,    5,    5,    5,    5,    5,    5,
    5,    5,   23,   23,   24,   24,   24,   24,   29,   29,
   29,   29,   29,   29,   29,   30,   30,   30,   25,   32,
   32,   32,   32,   32,   33,   33,   33,   33,   33,   35,
   37,   36,   28,   28,   39,   40,   34,   34,   34,   34,
   34,   34,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   31,   31,   31,   31,   31,
   31,   31,   27,   26,   26,   26,   26,   26,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,
    7,    7,    6,    8,    8,    7,    2,    4,    3,    2,
    4,    3,    2,    4,    3,    3,    2,    3,    1,    7,
    6,    8,    2,    1,    2,    1,    3,    1,    1,    1,
    1,    3,    1,    2,    1,    1,    0,    4,    1,    1,
    3,    2,    4,    3,    4,    3,    2,    1,    3,    2,
    3,    2,    2,    1,    1,    1,    1,    2,    2,    2,
    2,    1,    3,    5,    4,    3,    6,    5,    3,    3,
    4,    4,    4,    4,    1,    3,    3,    1,    3,    3,
    2,    2,    1,    2,    4,    3,    3,    2,    3,    1,
    1,    1,    4,    3,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    5,    6,    5,    4,    2,    2,    4,
    3,    2,    6,    7,    4,    6,    7,    6,    5,    3,
    3,    5,    4,    3,    2,    3,    2,    2,    1,    3,
    2,    2,    1,    3,    2,    1,    2,    1,    1,    4,
    3,    1,    1,    1,    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  125,   59,   60,   61,    0,
    0,    6,    0,    0,    0,    0,   19,    0,    0,    0,
   28,   29,   30,    0,    0,    0,   85,   86,   87,   92,
    0,   24,    0,    0,    0,   37,    0,    0,  173,  174,
  176,  172,    0,    0,    0,  169,  168,    0,    0,  108,
    0,    0,   89,   88,   90,   91,    0,    0,    0,    0,
    0,   25,   11,   18,   14,    0,   20,   21,   63,    0,
    0,    0,   58,    0,    0,   96,    0,    0,    0,   66,
    0,    0,  167,    0,    0,  114,    0,  175,  177,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  109,    0,  120,  112,    0,
   42,    0,    0,    0,    0,    8,    0,    3,    0,   16,
    0,    0,   39,    0,    0,    0,  126,  124,   95,    0,
    0,   64,    0,    0,  171,    0,  110,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  106,
  107,  155,  142,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  139,  138,  122,  118,    0,    0,  121,   53,
   49,    0,   41,    0,    0,   47,    0,    7,    2,   62,
    0,   38,   57,  123,   98,    0,    0,    0,    0,  170,
    0,    0,    0,    0,  165,  141,    0,    0,    0,  162,
  158,    0,    0,  133,    0,    0,  154,  151,  150,  119,
    0,  117,   46,    0,    0,   45,    0,    0,   97,    0,
    0,   84,    0,    0,   70,   68,  140,  153,    0,    0,
  145,  164,  137,    0,    0,  160,  156,  115,   48,   44,
    0,   33,    0,    0,    0,    0,   82,    0,   32,    0,
   83,  152,  149,    0,    0,  134,    0,    0,  136,    0,
   36,    0,   31,    0,   81,   35,    0,    0,   76,  146,
    0,  148,  143,    0,  135,   51,    0,    0,   34,    0,
   75,  147,  144,    0,   50,   52,
};
short yydgoto[] = {                                      14,
   15,  103,  222,   18,   19,   20,   70,   21,   22,   23,
   24,   82,  223,   25,  113,  172,  114,  115,   26,   74,
  224,  225,   27,   28,   29,   46,   47,   30,   48,   49,
   50,   51,  106,   52,  107,  167,  168,  127,   31,  128,
  159,
};
short yysindex[] = {                                    858,
   -9,  -21,  -40,  -37,  164,    0,    0,    0,    0, -118,
  933,    0,   29,    0, 1293, 1307,    0,   29,   29, -213,
    0,    0,    0,   31,  -43, -160,    0,    0,    0,    0,
  -37,    0,   -8,  274, -156,    0, -227,  -35,    0,    0,
    0,    0,   69,  157, -237,    0,    0,  -36,  -11,    0,
  882,   75,    0,    0,    0,    0,    0, -121, -133, 1321,
 1345,    0,    0,    0,    0, 1359,    0,    0,    0,   66,
 -227,  -96,    0,   70,  750,    0,  117,   63,  -19,    0,
 -123,  -14,    0, -113,  274,    0,   95,    0,    0,  274,
  274,  274,  274,  532,  581,  274,  274,  274,  274,  105,
  109,  957, 1162,  122,  124,    0,  723,    0,    0,  -84,
    0,  -63,  -32,  148,  156,    0,  -59,    0, 1386,    0,
  -58,   -3,    0,  212,  -57,  882,    0,    0,    0,  399,
  274,    0,   78,  -87,    0,  120,    0,   63,   63,   63,
   63,  274,  274,  -11,  274,  274,  -11,   63,   63,    0,
    0,    0,    0,  159,  -30, 1508,  160,   29,  593,  161,
  163,  166,    0,    0,    0,    0,  764,  -60,    0,    0,
    0,   25,    0,  -63,  168,    0, -227,    0,    0,    0,
   90,    0,    0,    0,    0,  142,   63,  971,  -42,    0,
  -11,  -11,  -11,  -11,    0,    0,   93,  -26, 1130,    0,
    0,  175, 1001,    0,   29,   29,    0,    0,    0,    0,
  -34,    0,    0,  -15,   54,    0,   23,  844,    0, 1015,
 1522,    0,  133, 1536,    0,    0,    0,    0,  134, 1039,
    0,    0,    0, 1066, 1400,    0,    0,    0,    0,    0,
  137,    0, 1188,  136, 1522, 1536,    0,  138,    0, 1080,
    0,    0,    0, 1414, 1428,    0, 1442, 1456,    0,  909,
    0,  139,    0, 1536,    0,    0, 1522, 1536,    0,    0,
 1470,    0,    0, 1484,    0,    0, 1522,  143,    0, 1536,
    0,    0,    0,  146,    0,    0,
};
short yyrindex[] = {                                      0,
    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
  280,    0,  294,    0,  300,  304,    0,  496,  530,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   27,   10,    0,    0,
    0,    0,    0,    0,   34,    0,    0,    0,   59,    0,
    0,  799,    0,    0,    0,    0,  170,    0,  305,  312,
  314,    0,    0,    0,    0,  317,    0,    0,    0,  248,
   27,    0,    0,  341,    0,    0,    0,  397,    0,    0,
   33,    0,    0,    0,    0,    0,  813,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
    0,    0,    0,    0,    0,    0,  329,    0,  330,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  544,  558,  607,
  639,    0,    0,   83,    0,    0,  107,  673,  699,    0,
    0,    0,    0,    0,    0,    0, 1237, 1251,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  456,    0,    0,    0,
  131,  195,  368,  432,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1265, 1279,    0,    0,    0,    0,
  482,    0,    0,    0,    0,    0,    0,    0,    0,  217,
    0,    0,    0,  218,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  219,  224,    0,    0,    0,  228,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  229,    0,    0,  236,  240,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  241,
    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    4,   28,    1, 1218, 1224, 1697,    0,    0,    0,    0,
    0,  -65, -155,    0,  295,  203,  -81,    0,    0,    0,
 -135, -103,    0,    0,    0,  373,  384,    0,  452,   -5,
   79,  359,    0,  347,    0,    0,  225,  -49,    0,  275,
 -143,
};
#define YYTABLESIZE 1874
short yytable[] = {                                      37,
   17,  108,   44,  111,   58,  122,   94,   45,   95,  166,
   84,   17,  199,  197,   60,   64,   17,  229,   33,   66,
  130,   88,   89,   97,   35,   96,  133,   16,  123,   80,
   98,  175,   76,  178,   32,   99,   45,  181,   61,   34,
   62,  131,  175,   69,  134,   67,   68,    7,    8,    9,
  166,  166,  166,  166,  166,  134,  166,  169,  105,  235,
   64,   17,  244,  241,  119,  248,   64,   67,  213,  166,
   71,  166,   13,   65,  178,  178,  178,  178,  178,   72,
  178,  134,   99,  214,  246,   67,  255,  262,  144,  147,
  258,   65,  173,  178,  196,  178,   73,  240,  228,  105,
   79,  105,  105,  105,  278,   94,  100,   95,   85,  264,
  271,  217,  214,  274,  268,  109,  247,  169,  105,   64,
  105,  284,  116,   99,  121,   99,   99,   99,  125,  156,
  102,  280,  166,  132,  166,  137,  191,  192,   57,  193,
  194,  265,   99,  135,   99,  110,  269,  100,  152,  100,
  100,  100,  153,    7,    8,    9,  178,  129,  178,   94,
  190,   95,   94,  281,   95,  163,  100,  164,  100,   40,
  110,  102,  170,  102,  102,  102,  150,  151,    7,    8,
    9,  105,  219,  105,   94,  201,   95,    7,    8,    9,
  102,  176,  102,  171,  104,  177,  178,   86,  180,  183,
  188,   45,  195,  200,  207,   99,  208,   99,   45,  209,
  212,  216,  218,   40,  226,  221,   36,  227,  232,   38,
   39,   40,   41,   42,  251,   90,   91,   92,   93,  100,
   83,  100,  236,  237,  110,  104,  238,  104,  104,  104,
   43,  239,    7,    8,    9,  243,  251,   27,   38,   39,
   40,   41,   42,  102,  104,  102,  104,  249,  252,  260,
  263,  257,  266,  279,  251,  166,  166,  285,  251,   43,
  286,  166,  166,  166,  166,   56,  166,  166,  166,    5,
  251,  166,  166,  166,  166,  166,  166,  277,  166,  178,
  178,   27,   43,   26,   40,  178,  178,  178,  178,    9,
  178,  178,  178,   12,    4,  178,  178,  178,  178,  178,
  178,   10,  178,   13,  105,  105,   17,  104,   45,  104,
  105,  105,  105,  105,   54,  105,  105,  105,    1,   15,
  105,  105,  105,  105,  105,  105,  182,  105,   99,   99,
   55,   78,   69,   77,   99,   99,   99,   99,   80,   99,
   99,   99,   72,   79,   99,   99,   99,   99,   99,   99,
   71,   99,  100,  100,   74,   73,  124,  101,  100,  100,
  100,  100,   27,  100,  100,  100,  215,   55,  100,  100,
  100,  100,  100,  100,   55,  100,  102,  102,   56,   75,
   87,  211,  102,  102,  102,  102,   93,  102,  102,  102,
  184,    0,  102,  102,  102,  102,  102,  102,  101,  102,
  101,  101,  101,   38,   39,   40,   41,   42,   26,    0,
   53,   39,   40,   41,   54,   40,   40,  101,    0,  101,
    0,  103,    0,    0,   43,    0,   40,   40,   40,  185,
   93,   40,   40,   45,   40,   40,   40,    0,   40,    0,
  104,  104,    0,    0,    0,   94,  104,  104,  104,  104,
    0,  104,  104,  104,    0,   55,  104,  104,  104,  104,
  104,  104,  103,  104,  103,  103,  103,    0,  110,    0,
    0,  116,    0,    0,   77,   78,    7,    8,    9,    0,
  101,  103,  101,  103,    0,   22,    0,    0,    0,   94,
    0,    0,    0,   27,   27,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   27,   27,   27,    0,    0,   27,
   27,   93,   27,   27,   27,  116,   27,    0,    0,   23,
   38,   39,   40,   41,   42,    0,  136,    0,    0,    0,
    0,  138,  139,  140,  141,    0,    0,  148,  149,   26,
   26,   43,    0,    0,  103,    0,  103,    0,    0,    0,
   26,   26,   26,    0,    0,   26,   26,    0,   26,   26,
   26,    0,   26,  142,    0,    0,   45,    0,  143,    0,
   94,  186,  187,    0,  129,    0,    0,  129,    0,    0,
    0,    0,    0,    0,    0,    0,   55,   55,  130,    0,
    0,  130,    0,    0,    0,    0,  116,   55,   55,   55,
    0,    0,   55,   55,    0,   55,   55,   55,    0,   55,
   22,    0,  145,  101,  101,   45,    0,  146,    0,  101,
  101,  101,  101,    0,  101,  101,  101,    0,    0,  101,
  101,  101,  101,  101,  101,    0,  101,  132,    0,    0,
  132,    0,   93,   93,   23,   38,   39,   40,   41,   42,
    0,    0,    0,   93,   93,   93,  129,    0,   93,   93,
    0,   93,   93,   93,    0,   93,   43,    0,    0,  131,
  130,    0,  131,    0,    0,    0,    0,  103,  103,    0,
    0,    0,    0,  103,  103,  103,  103,    0,  103,  103,
  103,    0,    0,  103,  103,  103,  103,  103,  103,    0,
  103,   94,   94,  127,    0,    0,  127,  204,    0,    0,
    0,    0,   94,   94,   94,    0,    0,   94,   94,  132,
   94,   94,   94,    0,   94,    0,    0,  116,  116,  128,
    0,    0,  128,    0,    0,    0,    0,    0,  116,  116,
  116,   22,   22,  116,  116,    0,  116,  116,  116,    0,
  116,  131,   22,   22,   22,    0,   13,   22,   22,    0,
   22,   22,   22,    0,   22,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   23,   23,    0,   38,   39,
   40,   41,   42,   13,    0,  127,   23,   23,   23,  129,
  129,   23,   23,    0,   23,   23,   23,   13,   23,   43,
  129,  129,  129,  130,  130,  129,  129,  129,  129,  129,
  129,  128,  129,    0,  130,  130,  130,    0,    0,  130,
  130,  130,  130,  130,  130,    0,  130,   38,   39,   40,
   41,   42,  113,    0,    0,  102,    0,    0,  202,    2,
    0,    0,    0,    0,    0,    0,  111,    0,   43,    3,
  203,    4,  132,  132,    5,    6,    0,    7,    8,    9,
    0,   10,  102,  132,  132,  132,    0,    0,  132,  132,
  132,  132,  132,  132,    0,  132,  102,   13,    0,    0,
    0,    0,    0,    0,  131,  131,    0,    0,    0,    0,
    0,   13,    0,    0,    0,  131,  131,  131,    0,    0,
  131,  131,  131,  131,  131,  131,    0,  131,    0,    0,
    0,  113,    0,    0,    0,   13,    0,    0,  127,  127,
    0,    0,    0,    0,    0,  111,    0,    0,    0,  127,
  127,  127,    0,    0,  127,  127,  127,  127,  127,  127,
    0,  127,   13,    0,  128,  128,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  128,  128,  128,  242,    0,
  128,  128,  128,  128,  128,  128,   13,  128,  100,    2,
   11,    0,   12,    0,    0,    0,    0,    0,    0,    3,
  101,    4,  165,  166,    5,    6,    0,    7,    8,    9,
   13,   10,    0,    0,  102,  100,    2,    0,    0,    0,
    0,    0,    0,    0,   13,    0,    3,  101,    4,  100,
    2,    5,    6,  126,    7,    8,    9,    0,   10,    0,
    3,  101,    4,  276,  210,    5,    6,    0,    7,    8,
    9,    0,   10,    0,  234,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  113,  113,    0,   59,  245,    0,
    0,    0,    0,    0,    0,  113,  113,  113,  111,  111,
  113,  113,  113,  113,  113,  113,    0,  113,    0,  111,
  111,  111,  254,    0,  111,  111,  111,  111,  111,  111,
    0,  111,    0,    0,    0,    0,    0,    0,    0,    1,
    2,    0,    0,    0,    0,    0,    0,    0,    0,   13,
    3,  220,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,  267,    3,  233,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,  100,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,  101,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,  253,    1,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,  220,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    1,    2,
  256,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,  154,    2,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    3,  155,    4,    1,    2,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    3,  220,    4,
    0,    0,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    0,    0,    0,  231,    0,  154,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,  104,    4,
    1,    2,    5,    6,  105,    7,    8,    9,    0,   10,
    0,    3,  220,    4,    0,    0,    5,    6,    0,    7,
    8,    9,  104,   10,  154,    2,    0,    0,  105,    0,
    0,    0,    0,    0,    0,    3,    0,    4,    0,    0,
    5,    6,  261,    7,    8,    9,    0,   10,    0,  157,
  161,  154,    2,    0,  104,  158,  162,    0,    0,    0,
  105,    0,    3,    0,    4,    1,    2,    5,    6,    0,
    7,    8,    9,  104,   10,    0,    3,  220,    4,  105,
    0,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    0,  163,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  157,    0,  159,  205,    0,    0,  158,
    0,    0,  206,    0,  104,  202,    2,    0,    0,  161,
  105,    0,    0,    0,    0,    0,    3,  230,    4,    0,
    0,    5,    6,  157,    7,    8,    9,    0,   10,    0,
    0,    0,    0,    0,    0,    0,  205,   63,    2,    0,
  157,    0,  206,    0,    0,    0,  158,    0,    3,  160,
    4,   65,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,    1,    2,  117,    0,  157,    0,    0,
    0,  157,  205,  158,    3,  220,    4,  158,  206,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    0,  118,
    0,  157,  205,    0,  157,  205,    0,  158,  206,    0,
  158,  206,    0,  120,    0,    0,    0,    0,  205,    0,
    0,  205,  163,  163,  206,    0,    0,  206,    0,    0,
    0,    0,    0,  163,  163,  163,  159,  159,  163,  163,
  179,  163,  163,  163,    0,  163,    0,  159,  159,  159,
  161,  161,  159,  159,  259,  159,  159,  159,    0,  159,
    0,  161,  161,  161,  157,  157,  161,  161,  270,  161,
  161,  161,    0,  161,    0,  157,  157,  157,    1,    2,
  157,  157,  272,  157,  157,  157,    0,  157,    0,    3,
    0,    4,    1,    2,    5,    6,  273,    7,    8,    9,
    0,   10,    0,    3,    0,    4,    1,    2,    5,    6,
  275,    7,    8,    9,    0,   10,    0,    3,    0,    4,
    0,    0,    5,    6,  282,    7,    8,    9,    0,   10,
    1,    2,    0,    0,    0,    0,    0,    0,  283,    0,
    0,    3,    0,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    0,
    0,    1,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    0,    4,  202,    2,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    3,    0,    4,  154,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,    0,    4,  202,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,  154,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,  202,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,    0,    4,  202,    2,    5,    6,    0,
    7,    8,    9,   81,   10,    0,    3,    0,    4,  202,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,    0,    4,    0,  112,    5,    6,    0,    7,    8,
    9,    0,   10,  154,    2,    0,    0,   81,  112,    0,
    0,    0,    0,    0,    3,  198,    4,    1,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,  220,
    4,    1,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,  250,    4,    0,    0,    5,    6,  174,
    7,    8,    9,    0,   10,    0,    0,    0,    0,    0,
  174,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   81,
};
short yycheck[] = {                                      40,
    0,   51,   40,  125,  123,   71,   43,   45,   45,    0,
   46,   11,  156,   44,   11,   15,   16,   44,   40,   16,
   40,  259,  260,   60,   46,   62,   41,    0,  125,  257,
   42,  113,   41,    0,   44,   47,   45,   41,   11,   61,
   13,   61,  124,  257,   59,   18,   19,  275,  276,  277,
   41,   42,   43,   44,   45,   59,   47,  107,    0,  203,
   60,   61,  218,   41,   61,  221,   66,   41,   44,   60,
   40,   62,   44,   41,   41,   42,   43,   44,   45,  123,
   47,   59,    0,   59,  220,   59,  230,  243,   94,   95,
  234,   59,  125,   60,  125,   62,  257,   44,  125,   41,
  257,   43,   44,   45,  260,   43,    0,   45,   40,  245,
  254,  177,   59,  257,  250,   41,  220,  167,   60,  119,
   62,  277,  256,   41,   59,   43,   44,   45,   59,  102,
    0,  267,  123,  257,  125,   41,  142,  143,  257,  145,
  146,  245,   60,  257,   62,  267,  250,   41,   44,   43,
   44,   45,   44,  275,  276,  277,  123,   41,  125,   43,
   41,   45,   43,  267,   45,   44,   60,   44,   62,    0,
  267,   41,  257,   43,   44,   45,   98,   99,  275,  276,
  277,  123,   41,  125,   43,  158,   45,  275,  276,  277,
   60,   44,   62,  257,    0,   40,  256,   41,  257,  257,
  123,   45,   44,   44,   44,  123,   44,  125,   45,   44,
  271,   44,  123,   44,  257,  188,  257,  125,   44,  257,
  258,  259,  260,  261,  224,  262,  263,  264,  265,  123,
  266,  125,  205,  206,  267,   41,  271,   43,   44,   45,
  278,  257,  275,  276,  277,  218,  246,    0,  257,  258,
  259,  260,  261,  123,   60,  125,   62,  125,  125,  123,
  125,  234,  125,  125,  264,  256,  257,  125,  268,  278,
  125,  262,  263,  264,  265,  257,  267,  268,  269,    0,
  280,  272,  273,  274,  275,  276,  277,  260,  279,  256,
  257,   44,  123,    0,  125,  262,  263,  264,  265,    0,
  267,  268,  269,    0,    0,  272,  273,  274,  275,  276,
  277,    0,  279,    0,  256,  257,    0,  123,   45,  125,
  262,  263,  264,  265,   40,  267,  268,  269,    0,    0,
  272,  273,  274,  275,  276,  277,  125,  279,  256,  257,
    0,  125,  125,  125,  262,  263,  264,  265,  125,  267,
  268,  269,  125,  125,  272,  273,  274,  275,  276,  277,
  125,  279,  256,  257,  125,  125,   72,    0,  262,  263,
  264,  265,  125,  267,  268,  269,  174,    5,  272,  273,
  274,  275,  276,  277,   44,  279,  256,  257,    5,   31,
   44,  167,  262,  263,  264,  265,    0,  267,  268,  269,
  126,   -1,  272,  273,  274,  275,  276,  277,   41,  279,
   43,   44,   45,  257,  258,  259,  260,  261,  125,   -1,
  257,  258,  259,  260,  261,  256,  257,   60,   -1,   62,
   -1,    0,   -1,   -1,  278,   -1,  267,  268,  269,   41,
   44,  272,  273,   45,  275,  276,  277,   -1,  279,   -1,
  256,  257,   -1,   -1,   -1,    0,  262,  263,  264,  265,
   -1,  267,  268,  269,   -1,  125,  272,  273,  274,  275,
  276,  277,   41,  279,   43,   44,   45,   -1,  267,   -1,
   -1,    0,   -1,   -1,   33,   34,  275,  276,  277,   -1,
  123,   60,  125,   62,   -1,    0,   -1,   -1,   -1,   44,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  125,  275,  276,  277,   44,  279,   -1,   -1,    0,
  257,  258,  259,  260,  261,   -1,   85,   -1,   -1,   -1,
   -1,   90,   91,   92,   93,   -1,   -1,   96,   97,  256,
  257,  278,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,   42,   -1,   -1,   45,   -1,   47,   -1,
  125,  130,  131,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,  125,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  125,   -1,   42,  256,  257,   45,   -1,   47,   -1,  262,
  263,  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,   41,   -1,   -1,
   44,   -1,  256,  257,  125,  257,  258,  259,  260,  261,
   -1,   -1,   -1,  267,  268,  269,  123,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  278,   -1,   -1,   41,
  123,   -1,   44,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,  262,  263,  264,  265,   -1,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,
  279,  256,  257,   41,   -1,   -1,   44,  125,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,  123,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,  123,  267,  268,  269,   -1,   44,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,  257,  258,
  259,  260,  261,   44,   -1,  123,  267,  268,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   44,  279,  278,
  267,  268,  269,  256,  257,  272,  273,  274,  275,  276,
  277,  123,  279,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,  257,  258,  259,
  260,  261,   44,   -1,   -1,  123,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,  278,  267,
  268,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,  123,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  123,   44,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   44,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,  123,   -1,   -1,   -1,   44,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,   44,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  125,   -1,
  272,  273,  274,  275,  276,  277,   44,  279,  256,  257,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  270,  271,  272,  273,   -1,  275,  276,  277,
   44,  279,   -1,   -1,  123,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   44,   -1,  267,  268,  269,  256,
  257,  272,  273,  274,  275,  276,  277,   -1,  279,   -1,
  267,  268,  269,  125,  271,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,  125,   44,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,
  272,  273,  274,  275,  276,  277,   -1,  279,   -1,  267,
  268,  269,   44,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,
  267,  268,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   44,  267,  125,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  125,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,  125,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   51,  269,
  256,  257,  272,  273,   51,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   75,  279,  256,  257,   -1,   -1,   75,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,
  272,  273,  125,  275,  276,  277,   -1,  279,   -1,  102,
  103,  256,  257,   -1,  107,  102,  103,   -1,   -1,   -1,
  107,   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,  126,  279,   -1,  267,  268,  269,  126,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  156,   -1,  125,  159,   -1,   -1,  156,
   -1,   -1,  159,   -1,  167,  256,  257,   -1,   -1,  125,
  167,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  125,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  199,  125,  257,   -1,
  203,   -1,  199,   -1,   -1,   -1,  203,   -1,  267,  268,
  269,  125,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  256,  257,  125,   -1,  230,   -1,   -1,
   -1,  234,  235,  230,  267,  268,  269,  234,  235,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  125,
   -1,  254,  255,   -1,  257,  258,   -1,  254,  255,   -1,
  257,  258,   -1,  125,   -1,   -1,   -1,   -1,  271,   -1,
   -1,  274,  256,  257,  271,   -1,   -1,  274,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
  125,  275,  276,  277,   -1,  279,   -1,  267,  268,  269,
  256,  257,  272,  273,  125,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,  256,  257,  272,  273,  125,  275,
  276,  277,   -1,  279,   -1,  267,  268,  269,  256,  257,
  272,  273,  125,  275,  276,  277,   -1,  279,   -1,  267,
   -1,  269,  256,  257,  272,  273,  125,  275,  276,  277,
   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,  273,
  125,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   37,  279,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,   -1,  269,   -1,   58,  272,  273,   -1,  275,  276,
  277,   -1,  279,  256,  257,   -1,   -1,   71,   72,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,   -1,   -1,  272,  273,  113,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  134,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  177,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro ')' '{' '}'",
"metodo : metodo_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro : tipo IDENTIFICADOR",
"parametro : tipo",
"parametro : IDENTIFICADOR",
"parametro :",
"parametro : parametro ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 331 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
// Esta funcion dado el acceso a un elemento de la tabla de simbolos elimina el simbolo y lo actualiza con el scope y el tipo de esa variable.
symbol* setNewScope(string key, string type, string scope, string uso){
        
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        tableSymbol->insert(newIdentificador);                          // insertamos el nuevo simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                cout << "xs" << endl;
                functionStack* fs = stackFunction->top();
                cout << "xs" << endl;
                Tercets * ty = fs->ter;
                cout << "xs" << endl;
                number = ty->add(t);
                cout << "xs" << endl;
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase"); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new vector<symbol*>; // inicializamos el vector de simbolos
                        lastClass = symbolFinded;
                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase"); 
                newIdentificador->attributesAndMethodsVector = new vector<symbol*>; // inicializamos el vector de simbolos
                lastClass = newIdentificador;
        } 
        actualClass = key; 
};
void addAtribute(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        int diff = tableSymbol->getDiffOffScope(key + scope, "atributo"); 
        if(diff == 0){
                yyerror("Redeclaracion de atributio en la misma clase");
        }else{
                tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
                
                // creamos el nuevo símbolo para el atributo
                symbol* newAtribute = new symbol(key+scope, "", type, "atributo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                lastClass->attributesAndMethodsVector->push_back(newAtribute);

                // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newAtribute;
        }
};
void initMethod(string key, string scope ){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // creamos el nuevo símbolo
        symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");

        // agregamos el nuevo símbolo al vector de simbolos de la clase        
        lastClass->attributesAndMethodsVector->push_back(newMetodo);
        
        // seteamos que si se debe agregar un parametro se le haga a este método
        lastParam = newMetodo;

        // agregamos un scope
        tableSymbol->addScope(key);

        // creamos una stack para la función y la agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        cantOfRecursions++;
};
void addParam(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        lastParam->cantParam++;
        lastParam->typeParam = type;
        lastParam->nameParam = key;
};
void addObject(string key, string scope, string classType){
        
        // Verificamos que no exista otro objeto con el mismo nombre en el mismo ámbito
        // buscamos la clase más cercana de classType
        // si la encontramos por cada atributo y método creamos un nuevo símbolo con el scope del objeto

        
        
        int diff = tableSymbol->getDiffOffScope(key+scope, "objeto"); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe un objeto
                yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
        }else{
                tableSymbol->deleteSymbol(key); // borramos elobjeto de la tabla de simbolos
                
                symbol* matchingClass = tableSymbol->getFirstSymbolMatching(classType+scope, "clase"); // buscamos la primera clase que matchee
                
                for (symbol * sm : *matchingClass->attributesAndMethodsVector){
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*sm);
                        newSm->lexema = key+":"+sm->lexema;

                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
        } 
};
void initFunction(string key, string scope){
        int diff = tableSymbol->getDiffOffScope(key+scope, "funcion"); 
        if(diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "void", scope, "funcion"); 
                lastParam = newIdentificador;
        } 
        
        tableSymbol->addScope(key);

        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        cantOfRecursions++;
}
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
}
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};

void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        tableSymbol->deleteSymbol(key); 
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, "var"); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                checkTypesAsignation(symbolFinded->type, op2Type); 
                int number = addTercet("=", symbolFinded->lexema, op2Lexeme); 
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(checkTypesOperation(op1type, op2type)){
                reglatype = op1type;
        }else{
                reglatype = "error";
        } 
        
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number); 
}
#line 1106 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 73 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 74 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 75 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 76 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 77 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 78 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 79 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 80 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 82 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 84 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 85 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 86 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 88 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 98 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 99 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 100 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 107 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 29:
#line 109 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 30:
#line 110 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 31:
#line 113 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 32:
#line 114 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 33:
#line 115 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 34:
#line 117 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 35:
#line 118 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 36:
#line 119 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 37:
#line 122 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 38:
#line 125 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); }
break;
case 39:
#line 126 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 40:
#line 127 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "clase"); if(diff == 0){yyerror("Redeclaracion de funcion en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, "", tableSymbol->getScope(), "clase"); } tableSymbol->getSymbol(yyvsp[0]->ptr+tableSymbol->getScope())->forwarded = true; }
break;
case 41:
#line 128 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 42:
#line 129 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 43:
#line 132 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope()); yyval->ptr = yyvsp[0]->ptr; tableSymbol->addScope(yyvsp[0]->ptr);}
break;
case 44:
#line 134 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 46:
#line 136 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 48:
#line 139 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 49:
#line 140 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 50:
#line 142 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 51:
#line 143 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 52:
#line 144 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 53:
#line 147 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 54:
#line 148 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 55:
#line 151 "./gramaticaForGenCod.y"
{}
break;
case 56:
#line 153 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; actualClass = yyvsp[0]->ptr; tableSymbol->deleteSymbol(yyvsp[0]->ptr);}
break;
case 57:
#line 156 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 58:
#line 157 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 59:
#line 160 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 60:
#line 161 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 61:
#line 162 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 62:
#line 165 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "var"); if(diff == 0){yyerror("Redeclaracion de variable en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, typeAux, tableSymbol->getScope(),"var");} }
break;
case 63:
#line 166 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "var"); if(diff == 0){yyerror("Redeclaracion de variable en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, typeAux, tableSymbol->getScope(),"var");} }
break;
case 64:
#line 169 "./gramaticaForGenCod.y"
{ addParam(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type); yyval->type = yyvsp[-1]->type;}
break;
case 65:
#line 170 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 66:
#line 171 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 68:
#line 173 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 69:
#line 176 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 72:
#line 180 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 73:
#line 181 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 74:
#line 182 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 75:
#line 183 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 76:
#line 184 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 78:
#line 186 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 79:
#line 187 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 80:
#line 188 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 81:
#line 189 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 82:
#line 190 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 88:
#line 198 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 89:
#line 199 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 90:
#line 200 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 91:
#line 201 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 93:
#line 205 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr, yyvsp[0]->type);}
break;
case 99:
#line 216 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); }
break;
case 100:
#line 217 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); }
break;
case 101:
#line 218 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 102:
#line 219 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 103:
#line 220 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 104:
#line 221 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 105:
#line 222 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 106:
#line 225 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); }
break;
case 107:
#line 226 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->ptr, yyval->ptr, yyval->type); }
break;
case 108:
#line 227 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 109:
#line 230 "./gramaticaForGenCod.y"
{ Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );}}
break;
case 110:
#line 233 "./gramaticaForGenCod.y"
{ int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 111:
#line 234 "./gramaticaForGenCod.y"
{ yywarning("Falta de ultimo parentesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 112:
#line 235 "./gramaticaForGenCod.y"
{ yywarning("Falta de primer parentesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 113:
#line 236 "./gramaticaForGenCod.y"
{ yywarning("Falta de parantesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 114:
#line 237 "./gramaticaForGenCod.y"
{ yyerror("Falta de condicion en el bloque de control IF"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 116:
#line 241 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 117:
#line 242 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 119:
#line 244 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 122:
#line 251 "./gramaticaForGenCod.y"
{ Tercet * t = popTercet();  if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));} int number =  addTercetAndStack("BI", "", ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 123:
#line 253 "./gramaticaForGenCod.y"
{ Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );} Tercet *t2 = popTercet(); int number; if(t2!=nullptr){int number = addTercet("BI", t2->getArg1(), "");} yyval->ptr = charTercetoId + to_string(number);}
break;
case 124:
#line 254 "./gramaticaForGenCod.y"
{ yywarning("Falta de DO en WHILE-DO"); Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );} Tercet *t2 = popTercet();int number; if(t2!=nullptr){int number = addTercet("BI", t2->getArg1(), "");} yyval->ptr = charTercetoId + to_string(number);}
break;
case 125:
#line 257 "./gramaticaForGenCod.y"
{ addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), ""); }
break;
case 127:
#line 263 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet(">", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 128:
#line 264 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("<", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 129:
#line 265 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("==", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 130:
#line 266 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("!!", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 131:
#line 267 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet(">=", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 132:
#line 268 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("<=", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 135:
#line 273 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 136:
#line 274 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 137:
#line 275 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 139:
#line 277 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 141:
#line 279 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 144:
#line 283 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 147:
#line 288 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 148:
#line 289 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 149:
#line 290 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 151:
#line 292 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 153:
#line 294 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 155:
#line 296 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 157:
#line 300 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 159:
#line 302 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 160:
#line 303 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 161:
#line 304 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 162:
#line 305 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 163:
#line 306 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 164:
#line 307 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 165:
#line 308 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 166:
#line 311 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = tableSymbol->getSymbol(yyvsp[0]->ptr)->type;}
break;
case 167:
#line 312 "./gramaticaForGenCod.y"
{ int number = addTercet("+", yyvsp[-1]->ptr, yyvsp[-1]->ptr); yyval->ptr = charTercetoId + to_string(number); yyval->type = tableSymbol->getSymbol(yyvsp[-1]->ptr)->type;}
break;
case 168:
#line 313 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 169:
#line 314 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 170:
#line 315 "./gramaticaForGenCod.y"
{ int number = addTercet("tof", " ", yyvsp[-1]->ptr); yyval->ptr = charTercetoId + to_string(number); yyval->type = "float"; }
break;
case 172:
#line 317 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 173:
#line 320 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 174:
#line 323 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 175:
#line 324 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 176:
#line 325 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 177:
#line 326 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 178:
#line 327 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 1786 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
