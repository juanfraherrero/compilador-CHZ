#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction(); /* este vector se guarda las listas de tercetos instanciadas y a usar, como funciones en main o métodos de un objeto instanciado*/
VectorOfFunction * vectorOfFunctionDeclaredInClasses = new VectorOfFunction(); /* este vector se usa para cuando declaramos un método o una función dentro de una clase (esto es una declaración y se debe instanciar por cada objeto)*/
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';
bool isVariableToCheck = false;      /* booleano que sirve para indicar si se esta declarando una variable con check*/

string typeAux = "";
string actualClass = "";
symbol* lastMethod;
stack<symbol*>*  stackClasses = new stack<symbol*>();

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 54 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define CHECK 280
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
    4,    8,   11,   11,   11,   11,   11,   11,   12,    9,
    9,    9,    9,    9,   17,   15,   16,   16,   16,   16,
   16,   16,   18,   18,   19,   19,   19,   20,   20,   10,
   22,   23,   23,    6,    6,    6,    7,    7,   21,   21,
   21,   21,   21,   13,   13,   13,   13,   13,   14,   14,
   25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   24,   24,    5,    5,    5,    5,    5,    5,
    5,    5,   26,   26,   26,   26,   27,   27,   27,   27,
   32,   32,   32,   32,   32,   32,   32,   33,   33,   33,
   28,   35,   35,   35,   35,   35,   36,   36,   36,   36,
   36,   38,   40,   39,   31,   31,   42,   43,   37,   37,
   37,   37,   37,   37,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   34,   34,   34,
   34,   34,   34,   34,   34,   30,   29,   29,   29,   29,
   29,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    3,    1,    1,
    1,    1,    7,    7,    6,    8,    8,    7,    2,    4,
    3,    2,    4,    3,    1,    2,    4,    3,    3,    3,
    2,    2,    3,    1,    7,    6,    8,    2,    1,    2,
    1,    3,    1,    1,    1,    1,    3,    1,    2,    1,
    1,    0,    4,    2,    1,    1,    0,    4,    1,    1,
    3,    2,    4,    3,    4,    3,    2,    1,    3,    2,
    3,    2,    2,    1,    1,    1,    1,    2,    2,    2,
    2,    1,    3,    5,    2,    4,    4,    3,    6,    5,
    3,    3,    4,    4,    4,    4,    1,    3,    3,    1,
    3,    3,    2,    2,    1,    2,    4,    3,    3,    2,
    3,    1,    1,    1,    4,    3,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    5,    6,    5,    4,    2,
    2,    4,    3,    2,    6,    7,    4,    6,    7,    6,
    5,    3,    3,    5,    4,    3,    2,    3,    2,    2,
    1,    3,    2,    2,    1,    3,    2,    1,    2,    1,
    1,    4,    3,    4,    1,    1,    1,    2,    1,    2,
    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  137,   64,   65,   66,    0,
   32,    0,    6,    0,    0,    0,    0,   19,    0,    0,
    0,    0,   29,   30,   31,    0,    0,    0,   95,   96,
   97,  102,    0,   24,  105,    0,    0,    0,   39,    0,
    0,  186,  187,  189,  185,    0,    0,    0,  181,  180,
    0,    0,  120,    0,    0,   99,   98,  100,  101,    0,
    0,    0,    0,    0,   25,   11,   18,   14,    0,   20,
   21,   68,    0,    0,    0,    0,   63,    0,    0,  108,
    0,    0,    0,   76,    0,    0,  179,    0,    0,  126,
    0,  188,  190,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  121,
    0,  132,  124,   45,    0,   44,    0,    0,    0,    0,
    0,    8,    0,    3,    0,   16,    0,    0,    0,   41,
    0,    0,    0,  138,  136,  107,  106,    0,    0,   74,
    0,    0,    0,    0,  122,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  118,  119,  167,
  154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  151,  150,  134,  130,    0,    0,  133,   58,   54,    0,
   43,    0,    0,    0,   52,   51,    0,    7,    2,   67,
    0,   40,   62,  135,  110,    0,    0,    0,    0,  184,
  182,    0,    0,    0,    0,  177,  153,    0,    0,    0,
  174,  170,    0,    0,  145,    0,    0,  166,  163,  162,
  131,    0,  129,   50,    0,    0,   49,   48,   71,    0,
    0,    0,  109,    0,    0,   94,    0,    0,   80,   78,
  152,  165,    0,    0,  157,  176,  149,    0,    0,  172,
  168,  127,   53,   47,   69,    0,    0,   35,    0,    0,
    0,    0,   92,    0,   34,    0,   93,  164,  161,    0,
    0,  146,    0,    0,  148,    0,    0,   38,    0,   33,
    0,   91,   37,    0,    0,   86,  158,    0,  160,  155,
    0,  147,   56,    0,    0,   73,   36,    0,   85,  159,
  156,    0,   55,   57,
};
short yydgoto[] = {                                      15,
   16,  107,  236,   19,   20,   21,   73,   22,   23,   24,
   25,   26,   86,  237,   27,  118,  119,  180,  120,  121,
  231,   28,   78,  238,  239,   29,   30,   31,   49,   50,
   32,   51,   52,   53,   54,  110,   55,  111,  175,  176,
  134,   33,  135,  167,
};
short yysindex[] = {                                   1096,
   -5,  -40,  -38,  -37,  305,    0,    0,    0,    0, -114,
    0, 1191,    0,   -1,    0, 1550, 1575,    0,   -1,   -1,
 -250, -157,    0,    0,    0,   29,  -55, -164,    0,    0,
    0,    0,  -37,    0,    0,  204,  231, -151,    0, -225,
  -41,    0,    0,    0,    0,   73,  658, -211,    0,    0,
  -31,  -14,    0, 1110,   80,    0,    0,    0,    0,    0,
  -79, -122, 1600, 1614,    0,    0,    0,    0, 1639,    0,
    0,    0,   88, -250, -225,  237,    0,   90,  919,    0,
  103,   95,  -36,    0, -100,  -19,    0,  -98,  231,    0,
  122,    0,    0,  231,  231,  231,  231, 1379, 1385,  231,
  231,  231,  231,  121,  125, 1222, 1208,  128,  132,    0,
  672,    0,    0,    0,  -76,    0,  -63,  689,  151,  155,
  160,    0,  -53,    0, 1653,    0,  -52,   88,   -4,    0,
  700,  -51, 1110,    0,    0,    0,    0,  765,  231,    0,
   84, -157,  -58,  139,    0,   95,   95,   95,   95,  231,
  231,  -14,  231,  231,  -14,   95,   95,    0,    0,    0,
    0,  165,  -34, 1831,  166,   -1,  727,  167,  168,  169,
    0,    0,    0,    0,  985,  -57,    0,    0,    0,  -33,
    0,  -63,  172,  174,    0,    0, -102,    0,    0,    0,
  104,    0,    0,    0,    0,  148,   95, 1236,  -28,    0,
    0,  -14,  -14,  -14,  -14,    0,    0,  112,  -29, 1392,
    0,    0,  184, 1263,    0,   -1,   -1,    0,    0,    0,
    0,  -27,    0,    0,   -7,  -17,    0,    0,    0,    3,
   15, 1138,    0, 1277, 1845,    0,  113, 1859,    0,    0,
    0,    0,  118, 1304,    0,    0,    0, 1330, 1678,    0,
    0,    0,    0,    0,    0,  134, -157,    0, 1422,  136,
 1845, 1859,    0,  137,    0, 1355,    0,    0,    0, 1703,
 1728,    0, 1753, 1767,    0, 1166,    9,    0,  143,    0,
 1859,    0,    0, 1845, 1859,    0,    0, 1792,    0,    0,
 1806,    0,    0, 1845,  144,    0,    0, 1859,    0,    0,
    0,  149,    0,    0,
};
short yyrindex[] = {                                      0,
    0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  264,    0,  270,    0,  277,  287,    0,  593,  621,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
   16,    0,    0,    0,    0,    0,    0,   41,    0,    0,
    0,   92,    0,    0, 1026,    0,    0,    0,    0,  319,
    0,  294,  300,  301,    0,    0,    0,    0,  302,    0,
    0,    0,  358,    0,   39,    0,    0,  472,    0,    0,
    0,  486,    0,    0,   40,    0,    0,    0,    0,    0,
 1067,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  267,    0,    0,    0,    0,    0,
    0,    0,  311,    0,  312,    0,    0,  511,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,    0,    0,  -21,  741,  779,  804,    0,
    0,  117,    0,    0,  142,  830,  862,    0,    0,    0,
    0,    0,    0,    0, 1447, 1473,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   63,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  536,    0,    0,    0,
    0,  383,  408,  433,  458,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1500, 1525,    0,    0,    0,
    0,  561,    0,    0,    0,    0,    0,    0,    0,   66,
    0,    0,    0,  197,    0,    0,    0,  200,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  201,  202,    0,    0,    0,  203,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  208,    0,    0,  212,  213,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    7,  757,    1,  958, 1041,   14,  278,    0,    0,    0,
    0,    0,  276, -197,    0,  299,  -84,  171,  -65,    0,
    0,    0,    0, -189, -161,    0,    0,    0,  365,  371,
    0, 1956,   17,   28,  344,    0,  331,    0,    0,  225,
  -24,    0,  254, -120,
};
#define YYTABLESIZE 2139
short yytable[] = {                                      36,
   18,   40,   47,  138,   88,   38,   72,   48,   61,  208,
  224,   98,   18,   99,  243,  178,   67,   18,   63,  141,
   37,  141,  141,   69,  139,  225,  254,  102,  101,  112,
  100,   84,  103,  183,  260,   74,  191,  264,   34,  142,
  191,  225,   14,  210,  262,  116,  183,   92,   93,    7,
    8,    9,  184,   85,  142,  256,  178,  178,  178,  178,
  178,  279,  178,   67,   18,  184,  183,   76,   75,   67,
  125,  281,  263,  257,  117,  178,  285,  178,  295,   77,
   75,  191,  191,  191,  191,  191,  177,  191,   85,  117,
  207,  117,   77,  249,  298,  242,  302,   77,   75,  282,
  191,  141,  191,   72,  286,   83,   70,  183,  183,  183,
  183,  183,   89,  183,  152,  155,  111,    7,    8,    9,
  113,   72,  299,  271,   70,   67,  183,  274,  183,  158,
  159,  182,  117,  122,  117,  117,  117,   98,  178,   99,
  178,  112,   60,  136,  182,   98,  127,   99,  132,  288,
  177,  117,  291,  117,  229,  199,  140,  111,  143,  111,
  111,  111,  145,  191,  160,  191,  202,  203,  161,  204,
  205,  171,    7,    8,    9,  172,  111,  114,  111,  201,
  178,   98,  112,   99,  112,  112,  112,  115,  233,  183,
   98,  183,   99,  179,  185,    7,    8,    9,  186,  187,
  230,  112,  188,  112,  190,  193,  198,  200,  206,  211,
  218,  219,  220,  223,  117,  227,  117,  228,   39,   41,
   42,   43,   44,   45,   87,   35,  232,  246,  240,  137,
   94,   95,   96,   97,  141,  141,  241,  265,  267,  111,
   46,  111,  268,  252,   80,  141,  141,  141,   48,  253,
  141,  141,  141,  141,  141,  141,  276,  141,  141,  255,
  280,  283,  267,    5,  112,  296,  112,  297,  303,   26,
  277,  178,  178,  304,   61,   48,    9,  178,  178,  178,
  178,  267,  178,  178,  178,  267,   12,  178,  178,  178,
  178,  178,  178,    4,  178,  178,  191,  191,  267,   10,
   13,   17,  191,  191,  191,  191,   59,  191,  191,  191,
    1,   15,  191,  191,  191,  191,  191,  191,   42,  191,
  191,   88,  183,  183,   79,   87,   90,   82,  183,  183,
  183,  183,   89,  183,  183,  183,   81,   84,  183,  183,
  183,  183,  183,  183,   83,  183,  183,  117,  117,   48,
  129,  128,  226,  117,  117,  117,  117,   27,  117,  117,
  117,  130,   42,  117,  117,  117,  117,  117,  117,   58,
  117,  117,  111,  111,  131,   59,   79,   91,  111,  111,
  111,  111,  114,  111,  111,  111,  194,    0,  111,  111,
  111,  111,  111,  111,   26,  111,  111,  112,  112,  222,
    0,   27,    0,  112,  112,  112,  112,  116,  112,  112,
  112,    0,    0,  112,  112,  112,  112,  112,  112,    0,
  112,  112,    0,  114,    0,  114,  114,  114,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,    0,    0,
    0,   46,  114,   42,  114,    0,    0,    0,  116,    0,
  116,  116,  116,    0,    0,    0,    0,  115,    0,    0,
   41,   42,   43,   44,   45,    0,    0,  116,    0,  116,
    0,   60,    0,  113,    0,  113,  113,  113,    0,    0,
    0,   46,   27,    0,    0,  103,    0,   41,   42,   43,
   44,   45,  113,  114,  113,    0,    0,    0,  115,    0,
  115,  115,  115,  115,    0,  114,    0,  114,   46,    0,
   28,    7,    8,    9,    0,   60,    0,  115,    0,  115,
    0,    0,    0,    0,    0,   26,   26,    0,    0,  103,
  116,    0,  116,    0,    0,  104,   26,   26,   26,    0,
    0,   26,   26,    0,   26,   26,   26,    0,   26,   26,
    0,    0,    0,    0,   28,  113,    0,  113,    0,    0,
  128,   56,   42,   43,   44,   57,    0,    0,    0,    0,
    0,    0,    0,    0,   42,   42,    0,    0,    0,  104,
  115,    0,  115,    0,    0,   42,   42,   42,    0,    0,
   42,   42,   22,   42,   42,   42,   60,   42,   42,    0,
    0,    0,    0,    0,  128,    0,    0,    0,    0,    0,
  103,    0,    0,   27,   27,    0,    0,    0,    0,    0,
   23,    0,    0,    0,   27,   27,   27,    0,    0,   27,
   27,    0,   27,   27,   27,   28,   27,   27,  114,  114,
    0,    0,    0,    0,  114,  114,  114,  114,    0,  114,
  114,  114,    0,    0,  114,  114,  114,  114,  114,  114,
  104,  114,  114,  116,  116,    0,    0,    0,    0,  116,
  116,  116,  116,    0,  116,  116,  116,    0,    0,  116,
  116,  116,  116,  116,  116,  128,  116,  116,  113,  113,
    0,    0,    0,    0,  113,  113,  113,  113,   90,  113,
  113,  113,   48,    0,  113,  113,  113,  113,  113,  113,
    0,  113,  113,  115,  115,   14,    0,   22,    0,  115,
  115,  115,  115,    0,  115,  115,  115,   60,   60,  115,
  115,  115,  115,  115,  115,    0,  115,  115,   60,   60,
   60,  103,  103,   60,   60,   23,   60,   60,   60,    0,
   60,   60,  103,  103,  103,    0,   17,  103,  103,    0,
  103,  103,  103,    0,  103,  103,   28,   28,   64,    0,
   65,    0,    0,    0,    0,   70,   71,   28,   28,   28,
    0,  142,   28,   28,  142,   28,   28,   28,    0,   28,
   28,  104,  104,    0,  106,    0,    0,    0,    0,    0,
    0,    0,  104,  104,  104,  195,    0,  104,  104,   48,
  104,  104,  104,  181,  104,  104,  128,  128,    0,  144,
    0,    0,  144,    0,  192,    0,    0,  128,  128,  128,
    0,    0,  128,  128,    0,  128,  128,  128,    0,  128,
  128,    0,    0,    0,  143,    0,    0,  143,   22,   22,
    0,  215,    0,    0,    0,    0,    0,    0,    0,   22,
   22,   22,  164,  142,   22,   22,    0,   22,   22,   22,
  139,   22,   22,  139,    0,    0,   23,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   23,   23,   23,
    0,    0,   23,   23,    0,   23,   23,   23,    0,   23,
   23,  144,  140,    0,    0,  140,    0,    0,    0,    0,
    0,    0,    0,    0,   41,   42,   43,   44,   45,    0,
    0,    0,  212,    0,    0,    0,  143,  104,    2,    0,
    0,    0,    0,    0,    0,   46,    0,    0,    3,  105,
    4,  173,  174,    5,    6,  114,    7,    8,    9,    0,
   10,   11,  139,    0,  235,  115,  114,    0,    0,    0,
    0,    0,   14,    7,    8,    9,  115,    0,    0,    0,
    0,    0,  250,  251,    7,    8,    9,    0,    0,    0,
    0,    0,  213,    2,  140,    0,    0,    0,  259,    0,
    0,    0,    0,    3,  214,    4,  142,  142,    5,    6,
    0,    7,    8,    9,  273,   10,   11,  142,  142,  142,
    0,  108,  142,  142,  142,  142,  142,  142,    0,  142,
  142,   41,   42,   43,   44,   45,    0,    0,   14,    0,
    0,    0,  294,    0,  144,  144,  108,    0,    0,    0,
    0,  106,   46,    0,    0,  144,  144,  144,    0,    0,
  144,  144,  144,  144,  144,  144,    0,  144,  144,  143,
  143,    0,    0,  165,  169,    0,    0,    0,  108,  125,
  143,  143,  143,    0,    0,  143,  143,  143,  143,  143,
  143,    0,  143,  143,    0,  139,  139,    0,    0,    0,
  108,    0,    0,    0,  109,    0,  139,  139,  139,    0,
    0,  139,  139,  139,  139,  139,  139,  106,  139,  139,
  123,    0,    0,    0,    0,    0,    0,  140,  140,  109,
    0,  165,    0,    0,  216,    0,    0,    0,  140,  140,
  140,    0,  108,  140,  140,  140,  140,  140,  140,   14,
  140,  140,    0,    0,    0,    0,  166,  170,  125,    0,
    0,  109,    0,   14,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  216,    0,    0,
    0,  165,    0,  109,  104,    2,    0,    0,    0,    0,
    0,   14,    0,    0,    0,    3,  105,    4,    0,  123,
    5,    6,  133,    7,    8,    9,    0,   10,   11,    0,
    0,  165,    0,    0,  166,  165,  216,  217,    0,   14,
    0,    0,    0,    0,    0,  109,    0,    0,   12,    0,
   13,    0,    0,    0,    0,    0,    0,  165,  216,    0,
  165,  216,  106,    0,   14,    0,    0,    0,    0,    0,
  104,    2,    0,    0,    0,  216,    0,    0,  216,    0,
  217,    3,  105,    4,  166,  221,    5,    6,    0,    7,
    8,    9,  258,   10,   11,   14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
    0,  125,  125,    0,  166,    0,    0,    0,  166,  217,
  293,    0,  125,  125,  125,    0,    0,  125,  125,  125,
  125,  125,  125,    0,  125,  125,  248,    0,    0,    0,
  166,  217,    0,  166,  217,   62,    0,    0,    0,    0,
  261,    0,  123,  123,    0,    0,    0,    0,  217,    0,
    0,  217,    0,  123,  123,  123,    0,    0,  123,  123,
  123,  123,  123,  123,    0,  123,  123,  270,    0,    0,
    0,    1,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    0,    4,  104,    2,    5,    6,    0,
    7,    8,    9,   14,   10,   11,    3,  105,    4,    0,
    0,    5,    6,    0,    7,    8,    9,  247,   10,   11,
    0,    0,    0,    1,    2,    0,    0,    0,  284,    0,
    0,    0,    0,    0,    3,  234,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,   11,    0,    0,
  150,    1,    2,   48,    0,  151,  153,    0,  269,   48,
    0,  154,    3,  234,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    1,    2,    0,    0,
    0,    0,    0,    0,  272,    0,    0,    3,    0,    4,
    0,    0,    5,    6,    2,    7,    8,    9,    0,   10,
   11,    0,    0,    0,    3,  168,    4,  162,    2,    5,
    6,    0,    7,    8,    9,    0,   10,   11,    3,  163,
    4,    1,    2,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    3,  234,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,  245,    0,  162,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,    1,    2,    5,    6,    0,    7,    8,    9,
    0,   10,   11,    3,  234,    4,  278,    0,    5,    6,
    0,    7,    8,    9,    0,   10,   11,    0,    0,  162,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,  175,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,   11,    0,  162,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,  171,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    3,  234,    4,  173,    0,    5,    6,    0,    7,
    8,    9,    0,   10,   11,   41,   42,   43,   44,   45,
    0,   41,   42,   43,   44,   45,    0,  213,    2,  169,
    0,    0,    0,    0,    0,    0,   46,    0,    3,  244,
    4,    0,   46,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    0,    0,   66,    0,    0,    1,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,  234,
    4,    0,    0,    5,    6,    0,    7,    8,    9,   68,
   10,   11,  175,  175,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  175,  175,  175,    0,    0,  175,  175,
    0,  175,  175,  175,  123,  175,  175,    0,  171,  171,
    0,    0,    0,    0,    0,    0,    0,    0,  124,  171,
  171,  171,    0,    0,  171,  171,    0,  171,  171,  171,
    0,  171,  171,    0,    0,  173,  173,    0,    0,    0,
    0,    0,    0,  126,    0,    0,  173,  173,  173,    0,
    0,  173,  173,    0,  173,  173,  173,  189,  173,  173,
  169,  169,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  169,  169,  169,    0,    0,  169,  169,    0,  169,
  169,  169,  275,  169,  169,    1,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,    0,
    0,    5,    6,    0,    7,    8,    9,  287,   10,   11,
    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    3,    0,    4,    0,    0,    5,    6,    0,    7,
    8,    9,  289,   10,   11,    1,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,    1,
    2,    5,    6,    0,    7,    8,    9,  290,   10,   11,
    3,    0,    4,    0,    0,    5,    6,    0,    7,    8,
    9,  292,   10,   11,    1,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,    0,    4,    1,    2,
    5,    6,    0,    7,    8,    9,  300,   10,   11,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
  301,   10,   11,  213,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,   11,  162,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,   11,  213,    2,    0,    0,    0,    0,    0,
    0,   81,   82,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,   11,  162,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,  213,    2,    5,    6,    0,    7,    8,    9,
    0,   10,   11,    3,    0,    4,    0,    0,    5,    6,
    0,    7,    8,    9,  144,   10,   11,  213,    2,  146,
  147,  148,  149,    0,    0,  156,  157,    0,    3,    0,
    4,  213,    2,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    3,    0,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,  162,    2,    0,    0,
    0,    0,    0,  196,  197,    0,    0,    3,  209,    4,
    1,    2,    5,    6,    0,    7,    8,    9,    0,   10,
   11,    3,  234,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,   11,    3,  266,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,   11,
};
short yycheck[] = {                                      40,
    0,   40,   40,   40,   46,   46,  257,   45,  123,   44,
   44,   43,   12,   45,   44,    0,   16,   17,   12,   41,
   61,   41,   44,   17,   61,   59,   44,   42,   60,   54,
   62,  257,   47,  118,  232,   22,   41,  235,   44,   59,
    0,   59,   44,  164,  234,  125,  131,  259,  260,  275,
  276,  277,  118,   40,   59,   41,   41,   42,   43,   44,
   45,  259,   47,   63,   64,  131,    0,  123,   40,   69,
   64,  261,  234,   59,   61,   60,  266,   62,  276,   41,
   41,   41,   42,   43,   44,   45,  111,   47,   75,   76,
  125,    0,  257,  214,  284,  125,  294,   59,   59,  261,
   60,  123,   62,   41,  266,  257,   41,   41,   42,   43,
   44,   45,   40,   47,   98,   99,    0,  275,  276,  277,
   41,   59,  284,  244,   59,  125,   60,  248,   62,  102,
  103,  118,   41,  256,   43,   44,   45,   43,  123,   45,
  125,    0,  257,   41,  131,   43,   59,   45,   59,  270,
  175,   60,  273,   62,  257,  142,  257,   41,  257,   43,
   44,   45,   41,  123,   44,  125,  150,  151,   44,  153,
  154,   44,  275,  276,  277,   44,   60,  257,   62,   41,
  257,   43,   41,   45,   43,   44,   45,  267,   41,  123,
   43,  125,   45,  257,   44,  275,  276,  277,   44,   40,
  187,   60,  256,   62,  257,  257,  123,  266,   44,   44,
   44,   44,   44,  271,  123,   44,  125,   44,  257,  257,
  258,  259,  260,  261,  266,  266,  123,   44,  257,  266,
  262,  263,  264,  265,  256,  257,  125,  125,  238,  123,
  278,  125,  125,  271,   41,  267,  268,  269,   45,  257,
  272,  273,  274,  275,  276,  277,  123,  279,  280,  257,
  125,  125,  262,    0,  123,  257,  125,  125,  125,    0,
  257,  256,  257,  125,  257,   45,    0,  262,  263,  264,
  265,  281,  267,  268,  269,  285,    0,  272,  273,  274,
  275,  276,  277,    0,  279,  280,  256,  257,  298,    0,
    0,    0,  262,  263,  264,  265,   40,  267,  268,  269,
    0,    0,  272,  273,  274,  275,  276,  277,    0,  279,
  280,  125,  256,  257,  125,  125,  125,  125,  262,  263,
  264,  265,  125,  267,  268,  269,  125,  125,  272,  273,
  274,  275,  276,  277,  125,  279,  280,  256,  257,   45,
   75,   74,  182,  262,  263,  264,  265,    0,  267,  268,
  269,  125,   44,  272,  273,  274,  275,  276,  277,    5,
  279,  280,  256,  257,   76,    5,   33,   47,  262,  263,
  264,  265,    0,  267,  268,  269,  133,   -1,  272,  273,
  274,  275,  276,  277,  125,  279,  280,  256,  257,  175,
   -1,   44,   -1,  262,  263,  264,  265,    0,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,
  279,  280,   -1,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   60,  125,   62,   -1,   -1,   -1,   41,   -1,
   43,   44,   45,   -1,   -1,   -1,   -1,    0,   -1,   -1,
  257,  258,  259,  260,  261,   -1,   -1,   60,   -1,   62,
   -1,    0,   -1,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,  278,  125,   -1,   -1,    0,   -1,  257,  258,  259,
  260,  261,   60,  257,   62,   -1,   -1,   -1,   41,   -1,
   43,   44,   45,  267,   -1,  123,   -1,  125,  278,   -1,
    0,  275,  276,  277,   -1,   44,   -1,   60,   -1,   62,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   44,
  123,   -1,  125,   -1,   -1,    0,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
   -1,   -1,   -1,   -1,   44,  123,   -1,  125,   -1,   -1,
    0,  257,  258,  259,  260,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   44,
  123,   -1,  125,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,    0,  275,  276,  277,  125,  279,  280,   -1,
   -1,   -1,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,  125,  279,  280,  256,  257,
   -1,   -1,   -1,   -1,  262,  263,  264,  265,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
  125,  279,  280,  256,  257,   -1,   -1,   -1,   -1,  262,
  263,  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,  125,  279,  280,  256,  257,
   -1,   -1,   -1,   -1,  262,  263,  264,  265,   41,  267,
  268,  269,   45,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,  280,  256,  257,   44,   -1,  125,   -1,  262,
  263,  264,  265,   -1,  267,  268,  269,  256,  257,  272,
  273,  274,  275,  276,  277,   -1,  279,  280,  267,  268,
  269,  256,  257,  272,  273,  125,  275,  276,  277,   -1,
  279,  280,  267,  268,  269,   -1,    0,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,   12,   -1,
   14,   -1,   -1,   -1,   -1,   19,   20,  267,  268,  269,
   -1,   41,  272,  273,   44,  275,  276,  277,   -1,  279,
  280,  256,  257,   -1,  123,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   41,   -1,  272,  273,   45,
  275,  276,  277,  125,  279,  280,  256,  257,   -1,   41,
   -1,   -1,   44,   -1,  125,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,   -1,   -1,   -1,   41,   -1,   -1,   44,  256,  257,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  106,  123,  272,  273,   -1,  275,  276,  277,
   41,  279,  280,   44,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  123,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,
   -1,   -1,  166,   -1,   -1,   -1,  123,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,  267,  268,
  269,  270,  271,  272,  273,  257,  275,  276,  277,   -1,
  279,  280,  123,   -1,  198,  267,  257,   -1,   -1,   -1,
   -1,   -1,   44,  275,  276,  277,  267,   -1,   -1,   -1,
   -1,   -1,  216,  217,  275,  276,  277,   -1,   -1,   -1,
   -1,   -1,  256,  257,  123,   -1,   -1,   -1,  232,   -1,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,  248,  279,  280,  267,  268,  269,
   -1,   54,  272,  273,  274,  275,  276,  277,   -1,  279,
  280,  257,  258,  259,  260,  261,   -1,   -1,   44,   -1,
   -1,   -1,  276,   -1,  256,  257,   79,   -1,   -1,   -1,
   -1,  123,  278,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,   -1,  279,  280,  256,
  257,   -1,   -1,  106,  107,   -1,   -1,   -1,  111,   44,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,  276,
  277,   -1,  279,  280,   -1,  256,  257,   -1,   -1,   -1,
  133,   -1,   -1,   -1,   54,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,  276,  277,  123,  279,  280,
   44,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   79,
   -1,  164,   -1,   -1,  167,   -1,   -1,   -1,  267,  268,
  269,   -1,  175,  272,  273,  274,  275,  276,  277,   44,
  279,  280,   -1,   -1,   -1,   -1,  106,  107,  123,   -1,
   -1,  111,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  210,   -1,   -1,
   -1,  214,   -1,  133,  256,  257,   -1,   -1,   -1,   -1,
   -1,   44,   -1,   -1,   -1,  267,  268,  269,   -1,  123,
  272,  273,  274,  275,  276,  277,   -1,  279,  280,   -1,
   -1,  244,   -1,   -1,  164,  248,  249,  167,   -1,   44,
   -1,   -1,   -1,   -1,   -1,  175,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,   -1,
  273,  274,  123,   -1,   44,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  288,   -1,   -1,  291,   -1,
  210,  267,  268,  269,  214,  271,  272,  273,   -1,  275,
  276,  277,  125,  279,  280,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,
   -1,  256,  257,   -1,  244,   -1,   -1,   -1,  248,  249,
  125,   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,
  275,  276,  277,   -1,  279,  280,   44,   -1,   -1,   -1,
  270,  271,   -1,  273,  274,  125,   -1,   -1,   -1,   -1,
   44,   -1,  256,  257,   -1,   -1,   -1,   -1,  288,   -1,
   -1,  291,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,   44,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   44,  279,  280,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,  125,  279,  280,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,   -1,   -1,
   42,  256,  257,   45,   -1,   47,   42,   -1,  125,   45,
   -1,   47,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,  267,   -1,  269,
   -1,   -1,  272,  273,  257,  275,  276,  277,   -1,  279,
  280,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  125,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,  267,  268,  269,  125,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  280,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  125,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,   -1,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  125,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,  125,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  257,  258,  259,  260,  261,
   -1,  257,  258,  259,  260,  261,   -1,  256,  257,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,  267,  268,
  269,   -1,  278,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,   -1,   -1,  125,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,  125,
  279,  280,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,  125,  279,  280,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,   -1,   -1,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,  125,  279,  280,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,  125,  279,  280,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,  125,  279,  280,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,  125,  279,  280,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,  125,  279,  280,
  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,  125,  279,  280,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,  125,  279,  280,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
  125,  279,  280,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   36,   37,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,  280,  267,   -1,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   89,  279,  280,  256,  257,   94,
   95,   96,   97,   -1,   -1,  100,  101,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  267,   -1,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,
   -1,   -1,   -1,  138,  139,   -1,   -1,  267,  268,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,  268,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
};
#define YYFINAL 15
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 280
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS","CHECK",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : check tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"check : CHECK",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"clase_heredada : IDENTIFICADOR",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos clase_heredada ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_atributos_y_metodos : clase_heredada ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : IDENTIFICADOR '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 348 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
void checkTypesParams(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos "+ type2 + " y " + type1 + " entre los parametros");
        }
}
/**
 * Carga el símbolo en la tabla
 * Dado el acceso a un elemento de la tabla de simbolos lo elimina
 * Actualiza el símbolocon los datos pasados, 
 * si no se quiere modificar los datos dejar ""
 * 
 * @param key nombre del acceso
 * @param type tipo del acceso
 * @param scope scope actual
 * @param uso uso del acceso
 * @param ts tabla de símbolo a la que agregarle el acceso
 */
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope2(key, "clase", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        symbolFinded->classOfSymbol = key;
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                newIdentificador->classOfSymbol = key;
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
void finishClass(){
        tableSymbol->deleteScope();
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
/**
 * Cuando detectamos un atributo de clase se ejecuta esta función
 * Obtiene el símbolo viejo lo elimina 
 * y lo carga a la tabla de la clase
 *
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addAtribute(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);         // eliminamos el simbolo dela tabla general

        // operamos sobre la tabla de símbolos de la clase
        TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

        // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
        int diff = tsClass->getDiffOffScope2(key, "atributo", scope); 
                
        if(diff == 0){
                yyerror("Redeclaracion de atributo en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAttribute = new symbol(key+scope, "", type, "atributo");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
                */

                // Marcamos a la clase que pertenece el atributo
                newAttribute->classOfSymbol = classOfAttribute;

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newAttribute);
        }        
};
/**
 * Esta función verifica si un método con la clave, alcance y uso dados existe en la tabla de símbolos de la clase actual o en cualquiera de sus clases heredadas.
 * Si el método se encuentra en la tabla de símbolos de la clase actual, devuelve 0.
 * Si el método se encuentra en una tabla de símbolos de clase heredada, devuelve 1.
 * Si el método no se encuentra en ninguna de las tablas de símbolos, devuelve -1.
 *
 * @param key La clave del método a buscar.
 * @param scope El alcance del método a buscar.
 * @param uso El uso del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return Un entero que indica si el método se encontró en la tabla de símbolos de la clase actual (0), en una tabla de símbolos de clase heredada (1), o no se encontró (-1).
 */
int existMethodInInheritance(string key, string scope, string uso, symbol* classSymbol){
    // verificamos si el método está en la tabla de símbolos de la clase actual, si es asi devolvemos 0
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si es asi devolvemos 1 y si no esta devolvemos 2
    // revisar cuantas herencias hay, en base a esto hacer un for que se encargue de reccorer cada una de las tablas de las clases y en cada llamado usar la funcion getdiffscope y si lo que devuelve es 0 significa que esta
    
    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = classSymbol->attributesAndMethodsVector->getDiffOffScope2(key, "metodo", scope);        
    if(diff == 0){
        //si el método está en la propia tabla de símbolos de la clase se devuelve 0
        return 0;
    }else{
        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=2; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // verificar que en esa tabla no exista el simbolo
                bool existMethodInTable = classSymbol->inheritance[i]->existMethodInTable(key,uso);

                if(existMethodInTable){
                    return 1;
                }
            }
        }
        return -1;
   }           
}
/**
 * Cuando detectamos un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param classOfAttribute nombre de la clase a la que pertenece
 */
void initMethod(string key, string scope, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);   // eliminamos el simbolo (usa el contador) de la tabla general
        symbol * classSymbol = stackClasses->top();
        TableSymbol* tsClass = classSymbol->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        int methodAlredyExist = existMethodInInheritance(key, scope, "metodo", classSymbol);    // verificamos si el método ya existe en la clase o en alguna de sus clases heredadas

        if(methodAlredyExist == 0){
                yyerror("Redeclaracion de metodo en la misma clase");
        }else{
                if(methodAlredyExist == 1){
                        yyerror("Sobreescritura de metodos prohibida");
                }      
                // aunque tire error igual lo agregamos para que no falle la genreacion de codigo   
                  
                // creamos el nuevo símbolo
                symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE METODOS CARGADOS
                */

                newMetodo->classOfSymbol = classOfAttribute;

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newMetodo);
                
                // seteamos que si se debe agregar un parametro se le haga a este método
                lastMethod = newMetodo;

                // agregamos un scope
                tableSymbol->addScope(key);

                // creamos una stack para la función y la agregamos al stack con el nombre
                functionStack* fs = new functionStack(key+scope);
                fs->ter = new Tercets();
                stackFunction->push(fs);
                
                cantOfRecursions++;
        }
};                        
/**
 * Cuando detectamos un parámtro en un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * Se carga como una variable y se le agrega a su scope el nombre del método
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addParamMetodo(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // verificar que no esté previamente en ese scope en esa tabla de símobolo
        // lo agregamos y setear el tipo del parametro


        tableSymbol->deleteSymbol(key);    // eliminamos el simbolo (usa el contador) de la tabla general
        
        TableSymbol* tsClass = stackClasses->top()->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        /* SE SUPONE QUE ESTO NUNCA DEBERÍA SUCEDER PORQUE ES UN SOLO PARÁEMETRO Y LA PRIMER VARIABLE DEL ÁMBITO */

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable dentro de la tala de símbolos de la clase
        int diff = tsClass->getDiffOffScope2(key, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el misma ambito del metodo");
        }else{
                // creamos el nuevo símbolo
                symbol* newparam = new symbol(key+scope, "", type, "var");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE PARAMETROS DE METODO CARGADOS
                */

                // Marcamos a la clase que pertenece la variable
                newparam->classOfSymbol = classOfAttribute;

                // obtenemos el scopeInsideClass, que al ser un parámetro de un método siempre es el mismo método
                newparam->scopeInsideClass = ":"+lastMethod->lexema.substr(0, lastMethod->lexema.find(":"));

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newparam);

                lastMethod->cantParam++;
                lastMethod->typeParam = type;
                lastMethod->nameParam = key;
        }
};
/**
 * Cuando detectamos un parámtro en una declaración de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase terminamos
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del parámetro
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
*/
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
        // verificamos si está dentro de la declaración de una clase o no

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;

        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general y le cargamos el parametro como variable
                ts = tableSymbol;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
        }else{
                // obtenemos la tabla de la clase y le cargamos el parametro como variable
                ts = stackClasses->top()->attributesAndMethodsVector;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
                
                // marcamos a que clase pertenece el simbolo
                string classOfAttribute = stackClasses->top()->classOfSymbol;
                newIdentificador->classOfSymbol = classOfAttribute;

                string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                newIdentificador->scopeInsideClass = scopeInsideClass;
        }

        // seteamos el parámetro al símbolo de la función
        lastMethod->cantParam++;
        lastMethod->typeParam = type;
        lastMethod->nameParam = key;
        
        reglaptr = newIdentificador->lexema; 
        reglatype = type;
};

string checkNewNameBeforeInsert(symbol* newSm){
        // funcion que se encarga de borrar las apariciones de nombres de clases dentro un lexema 
        // y de verificar que no exista un nombre igual en el mismo ámbito
        // la logica funciona en iterar sobre la tabla de symbolor preguntando por cada uno de los lexemas si es que son de tipo clase
        // si es asi se crea una variable auxiliar donde se concatena de forma correcta el nuevo lexema para buscar si este se encuentra como substring dentro de 
        // de nuevo lexema a insertar dentro de la tabla de simbolos 
        
        for (const auto& par : tableSymbol->getSymbolTable()){
                symbol* sm = par.second;
                if(sm->uso == "clase"){
                        // creo una variable aux para guardar el lexema                 ejemplo= b:main:func3
                        string lexemaAux = sm->lexema;
                        //busco la primera aparicion de :                               ejemplo= 2
                        size_t firstColonPos = lexemaAux.find(':');
                        //obtengo el nombre de la clase para su uso a posteriori        ejemplo= b
                        string nameOfClass = lexemaAux.substr(0, firstColonPos); 
                        //busco el tamaño de la palabra                                 ejemplo= 12
                        size_t secondColonPos = lexemaAux.size();
                        //creo el nuevo lexema                                         ejemplo= primer substr = main:func3 segundo substr = b, lo concateno y queda main:func3:b
                        lexemaAux =  lexemaAux.substr(firstColonPos + 1, secondColonPos)+":"+lexemaAux.substr(0,firstColonPos);
                        //busco si el nuevo lexema se encuentra dentro del lexema a insertar
                        size_t pos = newSm->lexema.find(lexemaAux);
                        // si encuentra una posicion con el find significa que esta
                        if(pos != string::npos){
                                //si se encuentra dentro del lexema a insertar, se borra la aparicion de el nombre de la clase unicamente 
                                size_t pos = newSm->lexema.find(nameOfClass);
                                newSm->lexema.erase(pos-1, pos);      //siguiendo con el ejemplo y suponiendo que tenemos x:main:func3:b, se borra la aparicion de b y queda x:main:func3
                                newSm->lexema =  newSm->lexema +":"+nameOfClass; //se concatena el nombre de la clase al final del lexema
                        }
                }
        }
        return newSm->lexema;
}
/**
 * Esta función se llama cuando se quiere crear un método o función de un objeto a instanciar
 * Para esto se require de buscar el bloque de tercetos en el vecto de bloques de tercetos de declaración
 * copiarlo y agregarle a cada argumento que sea propio del objeto ":"+objeto+scope 
 * al nuevo bloque también le agregamos eso al nombre e insertamos la copia en el vecotr de bloques de tercetos de ejecución
 * 
 * 
 * @param objectName El nombre del objeto.
 * @param scope El scope actual.
 * @param simboloDeFuncion El símbolo de la función o método.
 * @param tableSymbolOfTheClass La tabla de símbolos de la clase.
 */
void createFunctionTerecets(string objectName, string scope, symbol* simboloDeFuncion, TableSymbol* tableSymbolOfTheClass){
     /*
        la función debe buscar en el vector de declaración de bloques de tercetos de funciones la declaraciónde este método o función, 
            copiarlo al vector de ejecución
            recorrer cada terceto y por cada operador de este terceto verificar si alguno es igual a algún atributo o método de la clase ode sus herencias, 
            en ese caso se le agrega el objeto y el scope actual
    */
    functionStack* copyOfTheStack = vectorOfFunctionDeclaredInClasses->getCopyOfFunction(simboloDeFuncion->lexema);

    // recorremos el stack de tercetos de la función o método
    for (const auto& tercet : copyOfTheStack->ter->getTercets()){
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg1())){
            tercet->setArg1(tercet->getArg1()+":"+objectName+scope);
        }
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg2())){
            tercet->setArg2(tercet->getArg1()+":"+objectName+scope);
        }
    }

    copyOfTheStack->name += ":"+objectName+scope; // le agregamos el nombre del objeto + el scope actual
    // agregamos el nuevo stack de funciones a la tabla de funciones en ejecución
    vectorOfFunction->add(copyOfTheStack);

};
/**
 * Cuando se detecta una declaración de objeto se llama esta función
 * Verificamos que no exista un objeto en el mismo ámbito con el mismo nombre   
 * agregamos el objeto a la tabla general, obtenemos la clase del objeto
 * agregamos cada atributo y método de la clase y de sus herencias. 
 * 
 * @param key El nombre del objeto a agregar.
 * @param scope El scope del objeto a agregar.
 * @param classType La clase del objeto a agregar.
 */
void addObject(string key, string scope, string classType){
        
        // si la clase no existe no hacemos nada ya que en la función initObjectDeclaration() se levanta el error de clase no declarada
        if (classType == "_error"){
                return;
        }
        
        // verificamos que no existea un objeto con el mismo nombre en el mismo ámbito
        int diff = tableSymbol->getDiffOffScope2(key, "objeto", scope); 
        if(diff == 0){
                // existe un objeto ocn el mismo nombre en el mismo ámbito
                yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
        }else{
                // eliminamos el símbolo viejo y lo agregamos en la tabla de simbolo general
                symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
                /*
                    ACA SE AGREGAN LOS ATRIBUTOS AL OBJETO INSTANCIADO
                */
                newObject->classOfSymbol = classType; // seteamos el tipo de clase del objeto

                // obtenemos el símbolo de la clase del objeto
                symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(classType, "clase", ":main"); // obtenemos el símbolo de la clase del objeto
                
                // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
                for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
                        symbol* simbolo = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*simbolo);                
                        
                        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                        //      la tabla de tercetos principal o de ejecución
                        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                            createFunctionTerecets(key, scope, newSm, matchingClass->attributesAndMethodsVector);
                        }
                                

                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }

                // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general

                // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
                for (int i=2; i >= 0; i--){
                    TableSymbol* tableSymbolMatchingClass = matchingClass->inheritance[i];
                    // si hereda de alguna clase recorremos sus simbolos y los agregamos
                    if(tableSymbolMatchingClass != nullptr){
                        
                        // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                        for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                                symbol* simbolo = par.second;
                                // creamos el nuevo símbolo
                                symbol* newSm = new symbol(*simbolo);                
                                
                                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                                //      la tabla de tercetos principal o de ejecución
                                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                                    createFunctionTerecets(key, scope, newSm, tableSymbolMatchingClass);
                                }

                                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                                
                                // agregamos el nuevo símbolo a la tabla de simbolos        
                                tableSymbol->insert(newSm);
                        }
                    }
                }
        } 
};
/**
 * cuando detectamos una declaracion de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase lo agregamos a la tabla general
 * si está dentro de una clase lo agregamos a la tabla de la clase y le seteamos la clase a la que pertenece y el scope inside class
 * 
 * @param key nombre del acceso
 * @param scope scope actual
*/
void initFunction(string key, string scope){
        TableSymbol* ts;
        
        string scopeOriginal = scope;

        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        // buscamos si existe una función con el mismo nombre en el mismo ámbito
        int diff = ts->getDiffOffScope2(key, "funcion", scope); 
        if( diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newFunction = setNewScope(key, "void", scope, "funcion", ts); 
                
                // cargamos cual fue el último método o función por si tiene un parámetro
                lastMethod = newFunction;
                // si esta dentro de una clase le seteamos los atributos de clase y scopeInsideClass
                if(stackClasses->size() > 0){
                        string classOfAttribute = stackClasses->top()->classOfSymbol;
                        newFunction->classOfSymbol = classOfAttribute;
                        newFunction->scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                }
        } 
        // agregamos al scope el nombre de la función
        tableSymbol->addScope(key);
        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        //verificamos las recursiones y le sumamos uno
        cantOfRecursions++;
};
/**
 * Cuando detectamos el fin de una declaracion de función
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión

        if(stackClasses->size() <= 0){
                // si no está dentro de una clase lo agregamos a la tabla general
                vectorOfFunction->add(fs);
        }else{
            // si está dentro de una clase es una función declarada de ntro de un metodo y se guarda en el vector de funciones declaradas en clases
            vectorOfFunctionDeclaredInClasses->add(fs);
        }
            
}
/**
 * cuando detectamos el fin de una declaracion de metodo
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        // los vectores siempre se guardan en el vector de funciones declaradas en clases
        vectorOfFunctionDeclaredInClasses->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
/**
 * Cuando detectas una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable y si existe seteea el $$->ptr con el lexema
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void checkVarInScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching2(key, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;

                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                    ESTO LO DEJO PARA ZUCCHI, DESPUES BORRAR ESTE COMENTARIO
                */
                
                // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta usando la variable "+ key +" como una expresion en un ambito diferente al de su declaracion");
                }
        }
};

/**
 * función cuando se detecta una variable++ 
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void newFactorMasMas (string key, string scope, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key);

        // busca variable en scope que coincide con el uso
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching2(key, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                int number = addTercet("+", symbolFinded->lexema, symbolFinded->lexema);          
                
                reglaptr = charTercetoId + to_string(number);
                reglatype = symbolFinded->type;

                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                    ESTO LO DEJO PARA ZUCCHI, DESPUES BORRAR ESTE COMENTARIO
                */
                
                // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta modificando la variable "+ key +" en un ambito diferente al de su declaracion");
                }
        }
}
/**
 * función cuando se detecta una asginación sobre una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable
 * verifica que los tipos sean iguales
 * verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key el acceso al identificador al que se le asigna.
 * @param scope el scope actual
 * @param op2Lexeme el acceso de lo que se asigna
 * @param op2Type el tipo de lo que se asigna
 * @throws yyerror si no hay variable alcanzable
 */
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        TableSymbol* ts;
        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        
        //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
        symbol* symbolFinded = ts->getFirstSymbolMatching2(key, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                // checkeamos que los tipos sean iguales 
                checkTypesAsignation(symbolFinded->type, op2Type); 
                // agregamos el terceto de asignación en la respectiva tabla de tercetos
                int number = addTercet("=", symbolFinded->lexema, op2Lexeme); 

                /* en este punto sabes que es una variable declarada, 
                    pero ahora quiero saber si es de este ámbito o de otro, 
                    si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
                    ESTO LO DEJO PARA ZUCCHI, DESPUES BORRAR ESTE COMENTARIO
                */

                // si al variable tiene asignado que se checke y si los lexemas no coincidencia entonces es una variable de otro ámbito
                if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
                    yywarning("Se esta usando la variable "+ key +" a la izquierda de una asignacion en un ambito diferente al de su declaracion");
                }
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(checkTypesOperation(op1type, op2type)){
                reglatype = op1type;
        }else{
                reglatype = "error";
        } 
        
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number); 
}
void newTof(string key, string& reglaptr, string& reglatype){
        int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        reglatype = "float";
}
void condition(string& reglaptr){
        int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void addElse(string& reglaptr){
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void finIf(){
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );
        }
}

void initWhile(){
        addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), "");
}

void finWhile(string & reglaptr) {
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );
        } 
        Tercet *t2 = popTercet(); 
        int number; 
        if(t2!=nullptr){
                int number = addTercet("BI", t2->getArg1(), "");
        } 
        reglaptr = charTercetoId + to_string(number);
}

void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
        checkTypesCompare(op1type, op2type); 
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number);
}

/**
 * Cuando se detecta una sentencia que declara una variable se llama esta función.
 * Agrega una nueva variable a la tabla de símbolos específica de clase o la general.
 * Agrega los atributos correspondientes al símbolo
 * Verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key La clave de la variable.
 * @param scope El ámbito de la variable.
 * @param type El tipo de la variable.
 */
void newVariable(string key, string scope, string type){
        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;
        
        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general
                ts = tableSymbol;
        }else{
                // obtenemos la tabla de la clase
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        //buscamos si esta definida ya una variable con ese mismo nombre dentro de la tabla de simbolos que corresponda
        int diff = ts->getDiffOffScope2(key, "var", scope); 
        
        if(diff == 0){
                // existe una variable previa en el mismo ambito con el mismo nombre
                yyerror("Redeclaracion de variable en el mismo ambito");
        }else{
            // eliminamos el simbolo de la tabla general y lo agregamos a la tabla específica, si es de clase le seteamos los atributos
            if(stackClasses->size() <= 0){
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */
                    if (isVariableToCheck){
                        // si es una variable a chequear le seteamos que se debe checkear en el simbolo
                        newIdentificador->isVariableToCheck = true;
                    }
            }else{
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */

                    // marcamos a que clase pertenece el simbolo
                    string classOfAttribute = stackClasses->top()->classOfSymbol;
                    newIdentificador->classOfSymbol = classOfAttribute;
                    // marcamos cual seria el scope dentro de la clase de donde proviene la variable
                    string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                    newIdentificador->scopeInsideClass = scopeInsideClass;

                    if (isVariableToCheck){
                        // si es una variable a chequear le seteamos que se debe checkear en el simbolo
                        newIdentificador->isVariableToCheck = true;
                    }
            }
        }
};
/**
 * Cuando se detecta la clase de un objeto a instanciar se llama esta función.
 * Borra el símbolo de la tabla de símbolos general.
 * Verifica que la clase haya sido declarada y exista.
 * 
 * @param key nombre de la clase
 * @param scope El alcance del objeto.
 * @param reglaptr El puntero a la regla.
 */
void initObjectDeclaration(string key, string scope, string& reglaptr){
    // verificar que la clase haya sido declarada y exista
    // borramos el símbolo de la tabla de símbolos general
    tableSymbol->deleteSymbol(key);
    // usamos ":main" porque todas las clases se usan en el ámbito ":main"
    symbol* classFinded = tableSymbol->getFirstSymbolMatching2(key, "clase", ":main");
    if(classFinded == nullptr){
        yyerror("No se encontro declaracion previa de la clase "+ key);
        actualClass = "_error"; 
    }else{
        reglaptr = key; 
        actualClass = key; 
    }
}
/**
 * Borra el simbolo de la tabla general
 * verifica si existe la clase a heredar, sino existe lanza un error de que no existe la clase
 * si encontras la clase copias su arreglo de herencia a esta clase que hereda y le agregas en el primer nullptr la clase a heredar (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))
 *
 *
 * @param classToInherit The name of the class to inherit from.
 * @param scope The scope of the inheriting class.
 * @param classWhoInherit The name of the class that inherits.
 * @return void
 */
void  detectInheritance(string classToInherit , string scope, string classWhoInherit){
        
        // borrar el simbolo de la tabla general
        // buscar si existe la clase a heredar, sino existe lanzar un error de que no existe la clase
        // si encontras la clase copias su arrehlo de herencia a el arreglo de este símbolo y luego le agregas la clase a 
        // heredar en el primer nullptr de ese arreglo (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))

        tableSymbol->deleteSymbol(classToInherit); // borramos el símbolo de la tabla general

        symbol* symbolofClassWhoInherit = stackClasses->top();  //guardas el simbolo de la ultima clase creada y agregada al stack de clases

        // verificamos que no herede esta clase de otro,solo puede heredar de una
        if (symbolofClassWhoInherit->isAlreadyInhenriting){
                        yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de otra clase");
        }else{
                // buscamos la clase a heredar, la buscamos con scope ":main" porque es en el único lugar donde se pueden declarar clases
                symbol* classFinded = tableSymbol->getFirstSymbolMatching2(classToInherit, "clase", ":main");
                if(classFinded == nullptr){
                        yyerror("No se encontro declaracion previa de la clase a heredar "+ classToInherit);
                }else{
                        // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                        // intentamos agregar la clase a heredar en el primer nullptr del arreglo de herencia, si tiene más de 3 elementos lanzamos un error

                        // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                        for(int i = 0; i < 3; i++) {
                                symbolofClassWhoInherit->inheritance[i] = classFinded->inheritance[i];
                        }
                        bool isNullptr = false;
                        int posOfNullInInheritance = -1;
                        // recorres el arreglo verificando que exista alguna posicion con nullptr, si es asi seteas el booleano con true y guardas la posicion del nullptr.
                        for (int i=0; i < 3; i++){
                                if(symbolofClassWhoInherit->inheritance[i]==nullptr){
                                        isNullptr = true;
                                        posOfNullInInheritance = i;
                                        break;
                                }
                        }
                        // si el boleano es true, agregas la clase a heredar en el lugar que se encuentra nullptr del arreglo de herencia, si no es true lanzas un error diciendo que ya existe una herencia de 3 clases
                        if(isNullptr){
                                symbolofClassWhoInherit->inheritance[posOfNullInInheritance] = classFinded->attributesAndMethodsVector;  
                        }else{
                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de 3 clases");
                        }
                        
                }
        }
}
/**
 * Cuando finaliza la declaración de variables se llama esta función.
 * Establece la variable para checkeo de variables en falso.
 */
void finishVariableDeclaration(){
    isVariableToCheck = false;
}
/**
 * Cuando se detecta la palabra reservada CHECK se llama esta función.
 * Establece la variable para checkeo de variables en true.
 */
void setVariableToCheck(){
    isVariableToCheck = true;
}
/**
 * Esta función busca el símbolo de un atributo que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra elsímbololo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfAttribute(string attributeName, symbol* classSymbol){
    
    // verificamos si el elemento está en la tabla de símbolos de la clase actual, si está devolvemos el símbolo
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si está devilvemos el símbolo
    // sino lo encontramos devolvemos nullptr
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=2; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
/**
 * Esta función se llama cuando se detecta el uso de un atributo en una expresión aritmética (a la derecha de una asignación).
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * asigna a reglaptr el lexema del símbolo y a reglatype el tipo del símbolo.
 *
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param reglaptr Puntero a la regla.
 * @param reglatype Tipo de la regla.
 */
void newUseObjectAttribute(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    reglaptr =  attributeSymbol->lexema;
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta la asignación de una expresión a un atributo de un objeto.
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * Verifica que los tipos sean iguales.
 * Genera la asignación de la expresión al atributo del objeto.
 * 
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param op2Lexeme Lexema de la expresión a asignar.
 * @param op2Type Tipo de la expresión a asignar.
 * @param reglaptr Puntero al terceto generado.
 * @param reglatype Tipo del atributo.
 */
void newAsignacionObjectAttribute(string objectName, string attributeName, string scope, string op2Lexeme, string op2Type, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    // checkeamos que los tipos sean iguales 
                    checkTypesAsignation(attributeSymbol->type, op2Type); 

                    // agregamos el terceto de asignación en la respectiva tabla de tercetos
                    int number = addTercet("=", attributeSymbol->lexema, op2Lexeme);
                    
                    reglaptr = charTercetoId + to_string(number);
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};

void newUseObjectAttributeFactorMasMas(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype){

    // Verifica que el objeto este declarado y obtiene su clase
    symbol* objectSymbol = tableSymbol->getFirstSymbolMatching2(objectName, "objeto", scope);
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto"+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        string classOfObject = objectSymbol->classOfSymbol;
        symbol* classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                
                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + objectName, "atributo", scope);
                if (attributeSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + objectName);
                }else{
                    // agregamos el terceto de suma y seteamos el ptr de la regla con este terceto
                    int number = addTercet("+", attributeSymbol->lexema, attributeSymbol->lexema);          
                
                    reglaptr = charTercetoId + to_string(number);
                    reglatype = attributeSymbol->type;
                }
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta una invocación a función sin parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función no tenga parámetros, sino tiramos un error de que falta pasar un parámetro.
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacion(string nombreFuncion, string scope, string& reglaptr){
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 

    TableSymbol* ts;
    // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
    if(stackClasses->size() <= 0){
        ts = tableSymbol;
    }else{
        ts = stackClasses->top()->attributesAndMethodsVector;
    }
        
    //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
    symbol* functionFinded = ts->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam != 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " sin pasarle un parametro, el parametro debe ser de tipo " + functionFinded->typeParam);
        }

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        int number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
/**
 * Esta función se llama cuando se detecta una invocación a función con parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función no tenga parámetros, sino tiramos un error de que estamos llamando a una función que no requiere de parametros.
 * verificamos que los tipos de los parametros coincidan
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacionWithParam(string nombreFuncion, string scope, string ptrParam, string typeParam, string& reglaptr){
    /*
        Esta función se llama cuando se detecta una invocación a función con parámetro
        Borramos el simbolo dela tabla general
        verificamos si estamos dentro de una declaraciónd e claseso en el main
        En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de funcion
        verificamos que esa función tenga parámteros sino tiramos un error de que estamos llamando a una función que no requiere de parametros
        verificamos que los tipos de los parametros coincidan
        generamos el terceto de call a esa función
    */ 
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 

    TableSymbol* ts;
    // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
    if(stackClasses->size() <= 0){
        ts = tableSymbol;
    }else{
        ts = stackClasses->top()->attributesAndMethodsVector;
    }
        
    //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
    symbol* functionFinded = ts->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam == 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " con parametro y la funcion no recibe parametro");
        }else{
            // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
            // verificamos que los tipos de los parametros sean ifuales
            checkTypesParams(functionFinded->typeParam, typeParam); 
        }

        /*
            NO SE PORQUE PERO PRESIENTO QUE VA A SERVIR
        */

        // creamos un terceto de pasaje de parametro con su ptr y su tipo
        int number = addTercet("param", ptrParam, typeParam);

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
#line 2145 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 76 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 77 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 78 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 79 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 80 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 82 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 84 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 85 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 86 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 88 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 90 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 91 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 92 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 101 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 102 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 103 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 110 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); yyPrintInLine("Se detecto declaracion de variable");}
break;
case 28:
#line 111 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); yyPrintInLine("Se detecto declaracion de variable con CHECK");}
break;
case 30:
#line 113 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 31:
#line 114 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 32:
#line 116 "./gramaticaForGenCod.y"
{ setVariableToCheck(); }
break;
case 33:
#line 118 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 34:
#line 119 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 35:
#line 120 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 36:
#line 122 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 37:
#line 123 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 38:
#line 124 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 39:
#line 127 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 40:
#line 130 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 41:
#line 131 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 42:
#line 132 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 43:
#line 133 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 44:
#line 134 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 45:
#line 136 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 46:
#line 138 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 47:
#line 140 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 50:
#line 143 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 53:
#line 147 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 54:
#line 148 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 55:
#line 150 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 56:
#line 151 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 57:
#line 152 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 58:
#line 155 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 59:
#line 156 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 60:
#line 159 "./gramaticaForGenCod.y"
{}
break;
case 61:
#line 161 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 62:
#line 164 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 63:
#line 165 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 64:
#line 168 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 65:
#line 169 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 66:
#line 170 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 67:
#line 173 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 68:
#line 174 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 69:
#line 176 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, actualClass); yyval->type = yyvsp[-1]->type;}
break;
case 70:
#line 177 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 71:
#line 178 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 73:
#line 180 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 74:
#line 183 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 75:
#line 184 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 76:
#line 185 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 78:
#line 187 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 79:
#line 190 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 82:
#line 194 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 83:
#line 195 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 84:
#line 196 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 85:
#line 197 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 86:
#line 198 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 88:
#line 200 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 89:
#line 201 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 90:
#line 202 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 91:
#line 203 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 92:
#line 204 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 98:
#line 212 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 99:
#line 213 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 100:
#line 214 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 101:
#line 215 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 103:
#line 219 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 104:
#line 220 "./gramaticaForGenCod.y"
{ newAsignacionObjectAttribute(yyvsp[-4]->ptr, yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr, yyvsp[0]->type, yyvsp[0]->ptr,yyvsp[0]->type); }
break;
case 105:
#line 221 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 106:
#line 222 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 107:
#line 225 "./gramaticaForGenCod.y"
{ newInvocacionWithParam(yyvsp[-3]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, yyvsp[-1]->type, yyval->ptr); }
break;
case 108:
#line 226 "./gramaticaForGenCod.y"
{ newInvocacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 111:
#line 232 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 112:
#line 233 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 113:
#line 234 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 114:
#line 235 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 115:
#line 236 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 116:
#line 237 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 117:
#line 238 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 118:
#line 241 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 119:
#line 242 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 120:
#line 243 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 121:
#line 246 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 122:
#line 249 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 123:
#line 250 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 124:
#line 251 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 125:
#line 252 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 126:
#line 253 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 128:
#line 257 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 129:
#line 258 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 131:
#line 260 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 134:
#line 267 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 135:
#line 269 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 136:
#line 270 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 137:
#line 273 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 139:
#line 279 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 140:
#line 280 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 141:
#line 281 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 142:
#line 282 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 143:
#line 283 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 144:
#line 284 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 147:
#line 289 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 148:
#line 290 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 149:
#line 291 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 151:
#line 293 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 153:
#line 295 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 156:
#line 299 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 159:
#line 304 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 160:
#line 305 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 161:
#line 306 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 163:
#line 308 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 165:
#line 310 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 167:
#line 312 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 169:
#line 316 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 171:
#line 318 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 172:
#line 319 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 173:
#line 320 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 174:
#line 321 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 175:
#line 322 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 176:
#line 323 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 177:
#line 324 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 178:
#line 327 "./gramaticaForGenCod.y"
{ checkVarInScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 179:
#line 328 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 180:
#line 329 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 181:
#line 330 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 182:
#line 331 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr,yyval->ptr,yyval->type); }
break;
case 183:
#line 332 "./gramaticaForGenCod.y"
{ newUseObjectAttribute(yyvsp[-2]->ptr, yyvsp[0]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 184:
#line 333 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 185:
#line 334 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 186:
#line 337 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 187:
#line 340 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 188:
#line 341 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 189:
#line 342 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 190:
#line 343 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 191:
#line 344 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 2881 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
