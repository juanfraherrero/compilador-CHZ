#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction(); /* este vector se guarda las listas de tercetos instanciadas y a usar, como funciones en main o métodos de un objeto instanciado*/
VectorOfFunction * vectorOfFunctionDeclaredInClasses = new VectorOfFunction(); /* este vector se usa para cuando declaramos un método o una función dentro de una clase (esto es una declaración y se debe instanciar por cada objeto)*/
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;
int cantOfRecursionsInMethod = 0;

int cantLabels = 0;
int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';
bool isVariableToCheck = false;      /* booleano que sirve para indicar si se esta declarando una variable con check*/
string accesosEfectuados;             /* string que sirve para guardar los accesos efectuados en una invocacion múltiple*/

string typeAux = "";
string actualClass = "";
symbol* lastMethod;
stack<symbol*>*  stackClasses = new stack<symbol*>();
void yyerrorFin(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Error: " << s <<"\033[0m"<< endl;
};
void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 60 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define CHECK 280
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
    4,    8,   11,   11,   11,   11,   11,   11,   11,   12,
    9,    9,    9,    9,    9,   17,   15,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   18,   18,   19,   19,   19,   19,   20,   20,   10,
   22,   23,   23,    6,    6,    6,    7,    7,   21,   21,
   21,   21,   21,   21,   13,   13,   13,   13,   13,   13,
   14,   14,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   24,   24,    5,    5,    5,    5,
    5,    5,    5,    5,    5,   27,   27,   27,   27,   28,
   28,   28,   28,   32,   32,   34,   34,   34,   34,   34,
   34,   34,   35,   35,   35,   29,   37,   37,   37,   37,
   37,   38,   38,   38,   38,   38,   40,   42,   41,   33,
   33,   44,   45,   39,   39,   39,   39,   39,   39,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   26,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   36,   36,   36,   36,   36,   36,   36,
   36,   31,   30,   30,   30,   30,   30,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    3,    1,    1,
    1,    1,    7,    7,    6,    4,    8,    8,    7,    2,
    4,    3,    2,    4,    3,    1,    2,    4,    3,    3,
    4,    3,    2,    2,    3,    3,    2,    3,    2,    1,
    2,    3,    1,    7,    6,    4,    8,    2,    1,    2,
    1,    3,    1,    1,    1,    1,    3,    1,    2,    1,
    1,    0,    4,    4,    2,    1,    1,    0,    4,    4,
    1,    1,    3,    2,    4,    3,    4,    3,    2,    1,
    3,    2,    3,    2,    2,    1,    1,    1,    1,    2,
    2,    2,    2,    4,    1,    3,    5,    2,    4,    4,
    3,    6,    5,    3,    1,    3,    3,    4,    4,    4,
    4,    1,    3,    3,    1,    3,    3,    2,    2,    1,
    2,    4,    3,    3,    2,    3,    1,    1,    1,    4,
    3,    1,    1,    3,    3,    3,    3,    3,    3,    3,
    5,    6,    5,    4,    2,    2,    4,    3,    2,    6,
    7,    4,    6,    7,    6,    5,    3,    3,    5,    4,
    3,    2,    1,    3,    2,    2,    1,    3,    2,    2,
    1,    3,    2,    1,    2,    1,    1,    4,    3,    4,
    1,    1,    1,    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  152,   74,   75,   76,    0,
   32,    0,    6,    0,    0,    0,    0,   19,    0,    0,
    0,    0,   29,   30,   31,    0,    0,    0,  107,  108,
  109,    0,  115,    0,   24,  118,    0,    0,   40,    0,
    0,  202,  203,  205,  201,    0,    0,    0,  197,  196,
    0,    0,    0,  135,    0,    0,    0,  110,  112,  113,
    0,    0,    0,    0,    0,    0,   25,   11,   18,   14,
    0,   20,   21,   78,    0,    0,    0,    0,   73,    0,
    0,    0,  121,    0,    0,   87,    0,    0,  195,    0,
  141,    0,  204,  206,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  183,    0,    0,    0,
    0,    0,  136,    0,  147,  139,    0,    0,    0,   45,
    0,    0,    0,    0,    0,    8,    0,    3,    0,   16,
    0,    0,    0,   42,    0,    0,    0,    0,  153,  151,
  120,   85,    0,    0,    0,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  133,  134,  182,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  166,  165,  169,  149,  145,    0,    0,  148,
    0,    0,   68,   63,    0,    0,   44,    0,    0,    0,
   54,   53,    0,    7,    2,   77,    0,   41,   72,  119,
    0,    0,  150,    0,    0,    0,  198,  200,    0,    0,
    0,    0,  193,    0,    0,  190,  186,  168,    0,    0,
  160,    0,    0,    0,  178,  177,  181,  146,    0,  144,
   55,   52,    0,    0,    0,   50,   49,   81,    0,    0,
    0,  123,    0,    0,    0,  106,    0,    0,   92,    0,
   89,   90,  180,    0,  172,    0,  167,  192,  188,  184,
  164,    0,    0,  142,   62,   51,   48,   79,    0,    0,
    0,   35,    0,    0,  122,    0,   34,  105,    0,    0,
    0,  104,  179,  176,    0,    0,  161,    0,    0,  163,
    0,    0,    0,   39,    0,   33,   38,    0,    0,   98,
    0,  103,  173,    0,  175,  170,    0,  162,   65,    0,
    0,   83,   84,   37,    0,   97,  174,  171,    0,   64,
   67,
};
short yydgoto[] = {                                      15,
   16,  109,  246,   19,   20,   21,   75,   22,   23,   24,
   25,   26,   88,  247,   27,  122,  123,  185,  124,  125,
  240,   28,   80,  248,  249,  250,   29,   30,   31,   49,
   50,   32,   33,   52,   53,   54,   55,  113,   56,  114,
  178,  179,  139,   34,  140,  169,
};
short yysindex[] = {                                   1370,
  -38,  -32,  -37,  -30,  167,    0,    0,    0,    0, -104,
    0, 1421,    0,   40,    0, 1342, 1806,    0,   40,   40,
 -169, -207,    0,    0,    0,    6,  -23, -166,    0,    0,
    0,   46,    0,  -30,    0,    0,   53,  287,    0, -234,
 -165,    0,    0,    0,    0,   72,  210, -221,    0,    0,
   67,  116,  -10,    0, 1328,   92,    0,    0,    0,    0,
   98,    0,  -76, -101, 1831, 1845,    0,    0,    0,    0,
 1874,    0,    0,    0,  103, -169, -234,  630,    0,  107,
 -100, 1203,    0,   83,   75,    0,  -82,   70,    0,  287,
    0,  142,    0,    0,  -69,  287,  287,  287,  287,  616,
  868,  287,  287,  287,  287,  150,    0, 1446, 2022,  152,
  158,  159,    0, 1177,    0,    0,  -53,  -52,  -50,    0,
  -48,  672,  166,  171,  182,    0,  -33,    0, 1888,    0,
  -25,  103,  101,    0,  679,  -21,  -28, 1328,    0,    0,
    0,    0,  114, -207, -207,  109,    0,  -27,   75,   75,
   75,   75,  287,  287,  -10,  287,  287,  -10,   75,   75,
    0,    0,    0,  196, 1618,  197,   40,  -40, 1604,  200,
  201,  202,    0,    0,    0,    0,    0, 1232,  -24,    0,
    0,  209,    0,    0,   -8,   -3,    0,  -48,  212,  215,
    0,    0, -160,    0,    0,    0,  137,    0,    0,    0,
  262,  287,    0, 1471,    5,    8,    0,    0,  -10,  -10,
  -10,  -10,    0,  -39, 1670,    0,    0,    0,  136,  219,
    0,   40,   40, 1485,    0,    0,    0,    0,   -2,    0,
    0,    0,   13,  227,    4,    0,    0,    0,   15,  105,
 1356,    0,  122,   75, 1632,    0,  156, 1632,    0, 1511,
    0,    0,    0,  164,    0, 1536,    0,    0,    0,    0,
    0, 1562, 1902,    0,    0,    0,    0,    0,  169, -207,
 -207,    0, 1711,  170,    0,  172,    0,    0, 1576, 1632,
 1632,    0,    0,    0, 1916, 1930,    0, 1944, 1969,    0,
 1396,   20,   37,    0,  174,    0,    0, 1632, 1632,    0,
 1632,    0,    0, 1994,    0,    0, 2008,    0,    0, 1632,
  176,    0,    0,    0, 1632,    0,    0,    0,  179,    0,
    0,
};
short yyrindex[] = {                                      0,
    0,  -46,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  226,    0,  784,    0,  305,  306,    0,  813,  827,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  133,
   11,    0,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,  127,    0,    0, 1263,  377,    0,    0,    0,
    0,  349,    0,  308,  309,  315,    0,    0,    0,    0,
  319,    0,    0,    0,  566,    0,  133,    0,    0,  592,
    0,    0,    0,    0,  623,    0,  138,    0,    0,    0,
    0, 1297,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  276,  281,    0,
    0,    0,    0,  737,    0,    0,  322,    0,  327,    0,
    0,  655,    0,    0,    0,    0,  293,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   61, 1014, 1094,
 1108, 1122,    0,    0,  173,    0,    0,  413, 1136, 1150,
    0,    0,    0,    0,    0, 1725, 1739,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  539,  844,    0,    0,  894,  276,    0,    0,    0,  908,
    0,    0,  149,    0,    0,    0,  705,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  439,  464,
  489,  514,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1767, 1781,    0,    0,    0,    0,    0,  730,    0,
    0,    0,    0,  973,  987,    0,    0,    0,  154,    0,
    0,    0,    0,  759,    0,    0,    0,  217,    0,  218,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  141,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  220,  221,
  222,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  223,  225,    0,
  229,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  230,    0,    0,    0,    0,    0,
    0,
};
short yygindex[] = {                                      0,
   23,    2,    1, 1036, 1050,  -13,  268,    0,    0,    0,
    0,    0,  274, -211,    0,  278, -115,  178,  -91,    0,
    0,    0,    0, -205, -203,  909,    0,    0,    0,  352,
  357, 1820,    0,  395,  -75,  -45,  333,    0,  335,    0,
    0,  207,  -31,    0,  236, -137,
};
#define YYTABLESIZE 2302
short yytable[] = {                                     125,
   18,   17,   40,  219,  254,   35,  189,   37,   76,   47,
  194,  201,   18,   66,   48,   67,   69,   18,   63,  189,
   72,   73,   86,  115,  155,  158,   87,  215,   38,  274,
  190,  104,  202,  276,   65,  232,  105,   93,   94,   71,
    7,    8,    9,  190,  281,   77,  282,  267,  120,  121,
  233,  194,  194,  194,  194,  194,  125,  194,  161,  162,
  199,  295,  233,   87,  121,   69,   18,    7,    8,    9,
  194,   69,  194,  299,  301,  300,  302,  209,  210,  311,
  211,  212,  180,   14,  218,  253,  263,   74,  129,  145,
   79,   81,  315,   83,  316,  207,  238,   48,  319,   78,
   89,  199,  199,  199,  199,  199,  124,  199,  188,  165,
  143,   90,   95,   14,    7,    8,    9,  100,  286,  101,
  199,  188,  199,  141,  289,  100,  132,  101,  144,   69,
  205,  206,  116,  194,  145,  194,  207,  207,  207,  207,
  207,  197,  207,  117,   14,  269,  180,  304,   14,  207,
  307,  100,   62,  101,  126,  207,  137,  207,  100,  144,
  101,  131,  275,  270,  100,  136,  101,  132,  217,  132,
  132,  132,  126,   88,  142,  103,   88,  102,   86,  239,
  118,   86,  147,  199,   66,  199,  132,  148,  132,   82,
  119,   88,   82,  163,   80,  173,   86,   80,    7,    8,
    9,  174,  175,  181,  182,  245,  183,   82,  184,  191,
   71,   48,   80,  126,  192,  126,  126,  126,  207,   39,
  207,  193,  194,  259,  260,    5,   41,   42,   43,   44,
   45,  196,  126,   36,  126,  199,  204,  200,  208,  213,
  216,  271,  273,  225,  226,  227,  230,   46,  278,  132,
   91,  132,  231,  234,   48,  236,  292,  293,  237,  241,
  257,  251,  258,  288,  252,   66,  194,  194,  264,  265,
  266,  268,  194,  194,  194,  194,  312,  194,  194,  194,
  277,  278,  194,  194,  194,  194,  194,  194,  283,  194,
  194,  291,  310,  313,  296,  126,  297,  126,  314,  278,
  320,  278,  242,  321,    9,   12,   48,    4,   10,   41,
   42,   43,   44,   45,   13,  278,  199,  199,   17,   46,
   69,    1,  199,  199,  199,  199,   15,  199,  199,  199,
   46,   48,  199,  199,  199,  199,  199,  199,  124,  199,
  199,   91,  100,  132,   94,   99,  102,   93,   43,   96,
  133,  207,  207,  101,   95,  135,   59,  207,  207,  207,
  207,   60,  207,  207,  207,  235,   82,  207,  207,  207,
  207,  207,  207,  203,  207,  207,  111,   96,   97,   98,
   99,   92,  132,  132,  229,    0,    0,    0,  132,  132,
  132,  132,   43,  132,  132,  132,    0,   66,  132,  132,
  132,  132,  132,  132,    0,  132,  132,   66,    0,    0,
    0,    0,  127,    0,    0,   66,   66,   66,    0,    0,
  111,    0,  125,   57,   42,   43,   44,   58,  126,  126,
    0,   84,   85,    0,  126,  126,  126,  126,  129,  126,
  126,  126,    0,    0,  126,  126,  126,  126,  126,  126,
    0,  126,  126,  127,    0,  127,  127,  127,    0,    0,
    0,    0,    0,  131,    0,    0,   41,   42,   43,   44,
   45,   47,  127,   43,  127,    0,    0,    0,    0,  129,
    0,  129,  129,  129,  146,    0,    0,   46,  128,    0,
  149,  150,  151,  152,    0,    0,  159,  160,  129,    0,
  129,  111,    0,    0,  131,    0,  131,  131,  131,    0,
    0,    0,    0,  130,    0,    0,    0,    0,   41,   42,
   43,   44,   45,  131,    0,  131,    0,    0,    0,  128,
    0,  128,  128,  128,    0,  127,    0,  127,  114,   46,
    0,    0,    0,   41,   42,   43,   44,   45,  128,    0,
  128,    0,    0,    0,  130,    0,  130,  130,  130,    0,
    0,  129,    0,  129,   46,   27,    0,    0,    0,    0,
    0,    0,    0,  130,    0,  130,    0,    0,    0,    0,
    0,    0,  114,    0,  124,    0,  131,    0,  131,    0,
    0,   70,    0,    0,    0,  243,  244,    0,    0,    0,
    0,    0,    0,    0,   43,   43,    0,    0,    0,   27,
    0,  128,    0,  128,    0,   43,   43,   43,    0,    0,
   43,   43,  116,   43,   43,   43,    0,   43,   43,    0,
    0,    0,  111,  111,    0,   70,  130,    0,  130,    0,
    0,    0,    0,  111,  111,  111,    0,    0,  111,  111,
    0,  111,  111,  111,   28,  111,  111,  153,    0,    0,
   48,    0,  154,  114,    0,    0,  116,    0,  127,  127,
    0,    0,    0,    0,  127,  127,  127,  127,    0,  127,
  127,  127,    0,    0,  127,  127,  127,  127,  127,  127,
   27,  127,  127,    0,  129,  129,    0,    0,   28,    0,
  129,  129,  129,  129,   36,  129,  129,  129,    0,    0,
  129,  129,  129,  129,  129,  129,   70,  129,  129,  131,
  131,    0,    0,    0,    0,  131,  131,  131,  131,  143,
  131,  131,  131,    0,    0,  131,  131,  131,  131,  131,
  131,    0,  131,  131,  128,  128,    0,  116,   36,    0,
  128,  128,  128,  128,  134,  128,  128,  128,  117,    0,
  128,  128,  128,  128,  128,  128,    0,  128,  128,  130,
  130,    0,    0,  143,    0,  130,  130,  130,  130,   28,
  130,  130,  130,   26,    0,  130,  130,  130,  130,  130,
  130,    0,  130,  130,  114,  114,  187,    0,    0,    0,
    0,    0,  117,  198,    0,  114,  114,  114,    0,    0,
  114,  114,   22,  114,  114,  114,    0,  114,  114,    0,
    0,   27,   27,    0,    0,    0,   23,    0,    0,   36,
    0,    0,   27,   27,   27,    0,    0,   27,   27,    0,
   27,   27,   27,    0,   27,   27,    0,   70,   70,    0,
    0,    0,    0,    0,  143,    0,    0,    0,   70,   70,
   70,   60,    0,   70,   70,    0,   70,   70,   70,    0,
   70,   70,   41,   42,   43,   44,   45,    0,  116,  116,
    0,    0,    0,  117,    0,    0,  118,    0,    0,  116,
  116,  116,    0,   46,  116,  116,  119,  116,  116,  116,
    0,  116,  116,    0,    7,    8,    9,    0,   26,  156,
   28,   28,   48,    0,  157,    0,    0,    0,    0,    0,
    0,   28,   28,   28,    0,    0,   28,   28,  186,   28,
   28,   28,    0,   28,   28,  186,    0,   22,  119,    0,
    0,    0,    0,    0,    0,  119,    7,    8,    9,    0,
    0,   23,    0,    7,    8,    9,    0,    0,    0,    0,
   36,   36,    0,  112,    0,    0,    0,    0,   61,    0,
    0,   36,   36,   36,    0,    0,   36,   36,    0,   36,
   36,   36,    0,   36,   36,  143,  143,    0,    0,    0,
  112,    0,    0,   60,    0,    0,  143,  143,  143,    0,
    0,  143,  143,   60,  143,  143,  143,    0,  143,  143,
    0,   60,   60,   60,  117,  117,  168,  172,   59,    0,
    0,    0,  112,    0,    0,  117,  117,  117,    0,    0,
  117,  117,   57,  117,  117,  117,    0,  117,  117,   26,
   26,    0,    0,    0,    0,    0,  112,    0,    0,    0,
   26,   26,   26,    0,  156,   26,   26,  156,   26,   26,
   26,    0,   26,   26,    0,    0,    0,    0,   22,   22,
    0,    0,    0,  214,    0,    0,    0,  224,    0,   22,
   22,   22,   23,   23,   22,   22,  112,   22,   22,   22,
  110,   22,   22,   23,   23,   23,    0,   58,   23,   23,
   61,   23,   23,   23,  111,   23,   23,    0,    0,    0,
   61,   56,    0,    0,    0,    0,    0,  110,   61,   61,
   61,    0,    0,  256,   41,   42,   43,   44,   45,    0,
    0,  111,    0,    0,  157,    0,  156,  157,    0,    0,
    0,    0,    0,  166,  170,   46,    0,    0,  159,  110,
   59,  159,    0,    0,    0,    0,  279,  167,  171,    0,
   59,    0,  158,  111,   57,  158,    0,    0,   59,   59,
   59,    0,    0,  110,   57,    0,  154,    0,    0,  154,
    0,    0,   57,   57,   57,    0,    0,  111,    0,  279,
  155,    0,    0,  155,    0,    0,    0,    0,    0,    0,
  166,    0,    0,    0,  222,    0,    0,  279,    0,  279,
    0,    0,    0,  110,  167,    0,  157,    0,  223,    0,
   14,    0,    0,  279,    0,    0,    0,  111,    0,   58,
  159,    0,    0,    0,    0,    0,    0,    0,    0,   58,
    0,    0,    0,   56,  158,    0,   14,   58,   58,   58,
  222,    0,    0,   56,    0,    0,    0,    0,  154,  166,
    0,   56,   56,   56,  223,    0,    0,    0,    0,  156,
  156,    0,  155,  167,    0,   14,    0,    0,    0,    0,
  156,  156,  156,    0,    0,  156,  156,  156,  156,  156,
  156,  166,  156,  156,    0,    0,    0,  166,  222,  108,
    0,    0,    0,    0,    0,  167,  140,    0,    0,    0,
    0,  167,  223,    0,    0,    0,    0,    0,    0,    0,
  166,  222,    0,  166,  222,  108,    0,    0,    0,    0,
    0,    0,    0,    0,  167,  223,    0,  167,  223,  222,
  138,    0,  222,    0,    0,    0,    0,    0,    0,  157,
  157,    0,    0,  223,  108,    0,  223,    0,    0,    0,
  157,  157,  157,  159,  159,  157,  157,  157,  157,  157,
  157,   14,  157,  157,  159,  159,  159,  158,  158,  159,
  159,  159,  159,  159,  159,  140,  159,  159,  158,  158,
  158,  154,  154,  158,  158,  158,  158,  158,  158,   14,
  158,  158,  154,  154,  154,  155,  155,  154,  154,  154,
  154,  154,  154,   14,  154,  154,  155,  155,  155,  138,
    0,  155,  155,  155,  155,  155,  155,    0,  155,  155,
    0,    0,  106,    2,    0,    0,    0,    0,    0,   14,
    0,    0,    0,    3,  107,    4,  176,  177,    5,    6,
  108,    7,    8,    9,    0,   10,   11,    0,  106,    2,
    0,    0,    0,    0,   14,    0,   68,    0,    0,    3,
  107,    4,    0,    0,    5,    6,  138,    7,    8,    9,
  272,   10,   11,    0,    0,    0,    0,  106,    2,   14,
    0,    0,   12,    0,   13,    0,    0,    0,    3,  107,
    4,    0,  228,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    0,    0,   14,    0,    0,    0,  140,  140,
  309,    0,    0,    0,    0,    0,    0,    0,  262,  140,
  140,  140,    0,    0,  140,  140,  140,  140,  140,  140,
    0,  140,  140,    0,    0,   64,    0,    0,    0,    0,
    0,    0,  138,  138,  280,    0,    0,    0,    0,    0,
    0,    0,    0,  138,  138,  138,    0,    0,  138,  138,
  138,  138,  138,  138,    0,  138,  138,    0,    0,  285,
    0,    0,    0,  106,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,  107,    4,    1,    2,    5,
    6,    0,    7,    8,    9,   14,   10,   11,    3,  261,
    4,    1,    2,    5,    6,    0,    7,    8,    9,  298,
   10,   11,    3,  107,    4,    1,    2,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    3,    0,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    0,    1,    2,    0,    0,    0,    0,    0,    0,    0,
  284,    0,    3,  107,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    1,    2,    0,    0,
    0,    0,    0,    0,    0,    0,  287,    3,    0,    4,
    0,    0,    5,    6,    0,    7,    8,    9,    0,   10,
   11,  164,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,  107,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    1,    2,  221,    0,
    0,    0,    0,    0,    0,    0,    0,    3,  107,    4,
  164,    2,    5,    6,    0,    7,    8,    9,    0,   10,
   11,    3,    0,    4,    0,    0,    5,    6,    0,    7,
    8,    9,    0,   10,   11,    0,    1,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,  107,    4,
    0,    0,    5,    6,    0,    7,    8,    9,    0,   10,
   11,  164,    2,    0,  255,    0,    0,    0,    0,    0,
    0,    0,    3,    0,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    0,  164,    2,    0,
    0,    0,    0,   51,   61,    0,    0,    0,    3,    0,
    4,    1,    2,    5,    6,  294,    7,    8,    9,    0,
   10,   11,    3,  107,    4,    0,    0,    5,    6,  191,
    7,    8,    9,   51,   10,   11,   51,   51,    0,  220,
    2,    0,    0,  187,    0,    0,   51,    0,    0,    0,
    3,  107,    4,  164,    2,    5,    6,    0,    7,    8,
    9,    0,   10,   11,    3,  107,    4,    1,    2,    5,
    6,  189,    7,    8,    9,    0,   10,   11,    3,  107,
    4,    0,    0,    5,    6,  185,    7,    8,    9,   51,
   10,   11,    0,    0,    0,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,  220,    2,    0,    0,    0,
   70,    0,    0,    0,    0,    0,    3,  107,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    0,    0,    0,    0,    0,  127,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    2,    0,  128,
    0,    0,   51,   51,    0,   51,   51,    3,  107,    4,
  191,  191,    5,    6,    0,    7,    8,    9,    0,   10,
   11,  191,  191,  191,  187,  187,  191,  191,  130,  191,
  191,  191,    0,  191,  191,  187,  187,  187,    0,    0,
  187,  187,  195,  187,  187,  187,    0,  187,  187,    0,
   51,   51,  189,  189,    0,    0,  290,    0,    0,    0,
    0,    0,    0,  189,  189,  189,  185,  185,  189,  189,
  303,  189,  189,  189,    0,  189,  189,  185,  185,  185,
    0,    0,  185,  185,  305,  185,  185,  185,    0,  185,
  185,    1,    2,    0,    0,    0,    0,    0,  306,    0,
    0,    0,    3,    0,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    1,    2,    0,    0,
    0,    0,    0,  308,    0,    0,    0,    3,    0,    4,
    1,    2,    5,    6,    0,    7,    8,    9,    0,   10,
   11,    3,    0,    4,    0,    0,    5,    6,  317,    7,
    8,    9,    0,   10,   11,    0,    0,    0,    0,    1,
    2,    0,  318,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,   11,    3,    0,    4,  220,    2,    5,
    6,    0,    7,    8,    9,    0,   10,   11,    3,    0,
    4,  164,    2,    5,    6,    0,    7,    8,    9,    0,
   10,   11,    3,    0,    4,  220,    2,    5,    6,    0,
    7,    8,    9,    0,   10,   11,    3,    0,    4,  164,
    2,    5,    6,    0,    7,    8,    9,    0,   10,   11,
    3,    0,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,   11,  220,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,    0,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,   11,  220,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    4,  220,    2,    5,    6,    0,    7,    8,
    9,    0,   10,   11,    3,    0,    4,    0,    2,    5,
    6,    0,    7,    8,    9,    0,   10,   11,    3,  107,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,   11,
};
short yycheck[] = {                                      46,
    0,    0,   40,   44,   44,   44,  122,   40,   22,   40,
    0,   40,   12,   12,   45,   14,   16,   17,  123,  135,
   19,   20,  257,   55,  100,  101,   40,  165,   61,  241,
  122,   42,   61,  245,   12,   44,   47,  259,  260,   17,
  275,  276,  277,  135,  250,   40,  250,   44,  125,   63,
   59,   41,   42,   43,   44,   45,   46,   47,  104,  105,
    0,  273,   59,   77,   78,   65,   66,  275,  276,  277,
   60,   71,   62,  279,  280,  279,  280,  153,  154,  291,
  156,  157,  114,   44,  125,  125,  224,  257,   66,   88,
  257,   46,  298,   41,  298,    0,  257,   45,  310,  123,
  266,   41,   42,   43,   44,   45,   46,   47,  122,  108,
   41,   40,   46,   44,  275,  276,  277,   43,  256,   45,
   60,  135,   62,   41,  262,   43,    0,   45,   59,  129,
  144,  145,   41,  123,  133,  125,   41,   42,   43,   44,
   45,   41,   47,   46,   44,   41,  178,  285,   44,   41,
  288,   43,  257,   45,  256,   60,  257,   62,   43,   59,
   45,   59,   41,   59,   43,   59,   45,   41,  167,   43,
   44,   45,    0,   41,  257,   60,   44,   62,   41,  193,
  257,   44,   41,  123,   44,  125,   60,  257,   62,   41,
  267,   59,   44,   44,   41,   44,   59,   44,  275,  276,
  277,   44,   44,  257,  257,  204,  257,   59,  257,   44,
  257,   45,   59,   41,   44,   43,   44,   45,  123,  257,
  125,   40,  256,  222,  223,    0,  257,  258,  259,  260,
  261,  257,   60,  266,   62,  257,  123,  266,  266,   44,
   44,  240,  241,   44,   44,   44,  271,  278,  248,  123,
   41,  125,   44,  257,   45,   44,  270,  271,   44,  123,
  125,  257,   44,  262,  257,  125,  256,  257,  271,  257,
   44,  257,  262,  263,  264,  265,  257,  267,  268,  269,
  125,  281,  272,  273,  274,  275,  276,  277,  125,  279,
  280,  123,  291,  257,  125,  123,  125,  125,  125,  299,
  125,  301,   41,  125,    0,    0,   45,    0,    0,  257,
  258,  259,  260,  261,    0,  315,  256,  257,    0,   44,
   40,    0,  262,  263,  264,  265,    0,  267,  268,  269,
  278,   45,  272,  273,  274,  275,  276,  277,   46,  279,
  280,  125,  125,   76,  125,  125,  125,  125,    0,  125,
   77,  256,  257,  125,  125,   78,    5,  262,  263,  264,
  265,    5,  267,  268,  269,  188,   34,  272,  273,  274,
  275,  276,  277,  138,  279,  280,    0,  262,  263,  264,
  265,   47,  256,  257,  178,   -1,   -1,   -1,  262,  263,
  264,  265,   44,  267,  268,  269,   -1,  257,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,  267,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  275,  276,  277,   -1,   -1,
   44,   -1,   46,  257,  258,  259,  260,  261,  256,  257,
   -1,   37,   38,   -1,  262,  263,  264,  265,    0,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,  280,   41,   -1,   43,   44,   45,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,  257,  258,  259,  260,
  261,  123,   60,  125,   62,   -1,   -1,   -1,   -1,   41,
   -1,   43,   44,   45,   90,   -1,   -1,  278,    0,   -1,
   96,   97,   98,   99,   -1,   -1,  102,  103,   60,   -1,
   62,  125,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,   60,   -1,   62,   -1,   -1,   -1,   41,
   -1,   43,   44,   45,   -1,  123,   -1,  125,    0,  278,
   -1,   -1,   -1,  257,  258,  259,  260,  261,   60,   -1,
   62,   -1,   -1,   -1,   41,   -1,   43,   44,   45,   -1,
   -1,  123,   -1,  125,  278,    0,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   44,   -1,   46,   -1,  123,   -1,  125,   -1,
   -1,    0,   -1,   -1,   -1,  201,  202,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   44,
   -1,  123,   -1,  125,   -1,  267,  268,  269,   -1,   -1,
  272,  273,    0,  275,  276,  277,   -1,  279,  280,   -1,
   -1,   -1,  256,  257,   -1,   44,  123,   -1,  125,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,    0,  279,  280,   42,   -1,   -1,
   45,   -1,   47,  125,   -1,   -1,   44,   -1,  256,  257,
   -1,   -1,   -1,   -1,  262,  263,  264,  265,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
  125,  279,  280,   -1,  256,  257,   -1,   -1,   44,   -1,
  262,  263,  264,  265,    0,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,  125,  279,  280,  256,
  257,   -1,   -1,   -1,   -1,  262,  263,  264,  265,    0,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,  276,
  277,   -1,  279,  280,  256,  257,   -1,  125,   44,   -1,
  262,  263,  264,  265,  125,  267,  268,  269,    0,   -1,
  272,  273,  274,  275,  276,  277,   -1,  279,  280,  256,
  257,   -1,   -1,   44,   -1,  262,  263,  264,  265,  125,
  267,  268,  269,    0,   -1,  272,  273,  274,  275,  276,
  277,   -1,  279,  280,  256,  257,  125,   -1,   -1,   -1,
   -1,   -1,   44,  125,   -1,  267,  268,  269,   -1,   -1,
  272,  273,    0,  275,  276,  277,   -1,  279,  280,   -1,
   -1,  256,  257,   -1,   -1,   -1,    0,   -1,   -1,  125,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,   -1,  256,  257,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,  267,  268,
  269,  125,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  257,  258,  259,  260,  261,   -1,  256,  257,
   -1,   -1,   -1,  125,   -1,   -1,  257,   -1,   -1,  267,
  268,  269,   -1,  278,  272,  273,  267,  275,  276,  277,
   -1,  279,  280,   -1,  275,  276,  277,   -1,  125,   42,
  256,  257,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,  257,  275,
  276,  277,   -1,  279,  280,  257,   -1,  125,  267,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  275,  276,  277,   -1,
   -1,  125,   -1,  275,  276,  277,   -1,   -1,   -1,   -1,
  256,  257,   -1,   55,   -1,   -1,   -1,   -1,  125,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,   -1,
   82,   -1,   -1,  257,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  267,  275,  276,  277,   -1,  279,  280,
   -1,  275,  276,  277,  256,  257,  108,  109,  125,   -1,
   -1,   -1,  114,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  125,  275,  276,  277,   -1,  279,  280,  256,
  257,   -1,   -1,   -1,   -1,   -1,  138,   -1,   -1,   -1,
  267,  268,  269,   -1,   41,  272,  273,   44,  275,  276,
  277,   -1,  279,  280,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  165,   -1,   -1,   -1,  169,   -1,  267,
  268,  269,  256,  257,  272,  273,  178,  275,  276,  277,
   55,  279,  280,  267,  268,  269,   -1,  125,  272,  273,
  257,  275,  276,  277,   55,  279,  280,   -1,   -1,   -1,
  267,  125,   -1,   -1,   -1,   -1,   -1,   82,  275,  276,
  277,   -1,   -1,  215,  257,  258,  259,  260,  261,   -1,
   -1,   82,   -1,   -1,   41,   -1,  123,   44,   -1,   -1,
   -1,   -1,   -1,  108,  109,  278,   -1,   -1,   41,  114,
  257,   44,   -1,   -1,   -1,   -1,  248,  108,  109,   -1,
  267,   -1,   41,  114,  257,   44,   -1,   -1,  275,  276,
  277,   -1,   -1,  138,  267,   -1,   41,   -1,   -1,   44,
   -1,   -1,  275,  276,  277,   -1,   -1,  138,   -1,  281,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
  165,   -1,   -1,   -1,  169,   -1,   -1,  299,   -1,  301,
   -1,   -1,   -1,  178,  165,   -1,  123,   -1,  169,   -1,
   44,   -1,   -1,  315,   -1,   -1,   -1,  178,   -1,  257,
  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,   -1,   -1,  257,  123,   -1,   44,  275,  276,  277,
  215,   -1,   -1,  267,   -1,   -1,   -1,   -1,  123,  224,
   -1,  275,  276,  277,  215,   -1,   -1,   -1,   -1,  256,
  257,   -1,  123,  224,   -1,   44,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,  276,
  277,  256,  279,  280,   -1,   -1,   -1,  262,  263,  123,
   -1,   -1,   -1,   -1,   -1,  256,   44,   -1,   -1,   -1,
   -1,  262,  263,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  285,  286,   -1,  288,  289,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  285,  286,   -1,  288,  289,  304,
   44,   -1,  307,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,  304,  123,   -1,  307,   -1,   -1,   -1,
  267,  268,  269,  256,  257,  272,  273,  274,  275,  276,
  277,   44,  279,  280,  267,  268,  269,  256,  257,  272,
  273,  274,  275,  276,  277,  123,  279,  280,  267,  268,
  269,  256,  257,  272,  273,  274,  275,  276,  277,   44,
  279,  280,  267,  268,  269,  256,  257,  272,  273,  274,
  275,  276,  277,   44,  279,  280,  267,  268,  269,  123,
   -1,  272,  273,  274,  275,  276,  277,   -1,  279,  280,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   44,
   -1,   -1,   -1,  267,  268,  269,  270,  271,  272,  273,
  123,  275,  276,  277,   -1,  279,  280,   -1,  256,  257,
   -1,   -1,   -1,   -1,   44,   -1,  125,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
  125,  279,  280,   -1,   -1,   -1,   -1,  256,  257,   44,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,  267,  268,
  269,   -1,  271,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,   -1,   -1,   44,   -1,   -1,   -1,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,  280,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  280,   -1,   -1,   44,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   44,  279,  280,  267,  125,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   44,
  279,  280,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  267,   -1,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,  267,   -1,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,  280,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  256,  257,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,   -1,  256,  257,   -1,
   -1,   -1,   -1,    4,    5,   -1,   -1,   -1,  267,   -1,
  269,  256,  257,  272,  273,  125,  275,  276,  277,   -1,
  279,  280,  267,  268,  269,   -1,   -1,  272,  273,  125,
  275,  276,  277,   34,  279,  280,   37,   38,   -1,  256,
  257,   -1,   -1,  125,   -1,   -1,   47,   -1,   -1,   -1,
  267,  268,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,  267,  268,  269,  256,  257,  272,
  273,  125,  275,  276,  277,   -1,  279,  280,  267,  268,
  269,   -1,   -1,  272,  273,  125,  275,  276,  277,   90,
  279,  280,   -1,   -1,   -1,   96,   97,   98,   99,  100,
  101,  102,  103,  104,  105,  256,  257,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,  125,
   -1,   -1,  153,  154,   -1,  156,  157,  267,  268,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,  268,  269,  256,  257,  272,  273,  125,  275,
  276,  277,   -1,  279,  280,  267,  268,  269,   -1,   -1,
  272,  273,  125,  275,  276,  277,   -1,  279,  280,   -1,
  201,  202,  256,  257,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
  125,  275,  276,  277,   -1,  279,  280,  267,  268,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
  280,  256,  257,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,  267,   -1,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  256,  257,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
  280,  267,   -1,  269,   -1,   -1,  272,  273,  125,  275,
  276,  277,   -1,  279,  280,   -1,   -1,   -1,   -1,  256,
  257,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,  280,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,  280,
  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  280,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,  280,  267,   -1,  269,   -1,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,  280,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  280,
};
#define YYFINAL 15
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 280
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS","CHECK",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : check tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"check : CHECK",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"clase_heredada : IDENTIFICADOR",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos clase_heredada ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos IDENTIFICADOR IDENTIFICADOR ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_atributos_y_metodos : clase_heredada ','",
"lista_atributos_y_metodos : IDENTIFICADOR IDENTIFICADOR ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo",
"lista_atributos_y_metodos : lista_atributos_y_metodos IDENTIFICADOR IDENTIFICADOR",
"lista_atributos_y_metodos : tipo lista_de_atributos",
"lista_atributos_y_metodos : metodo",
"lista_atributos_y_metodos : IDENTIFICADOR IDENTIFICADOR",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_metodo : parametro_metodo comas tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"parametro_funcion : parametro_funcion comas tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return return cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : return ','",
"cuerpo_de_la_funcion_con_return : return",
"cuerpo_de_la_funcion_con_return : return ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : return cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : return ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : return cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : PRINT accesoObjetos '.' IDENTIFICADOR",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : accesoObjetos '.' IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"asignacion : accesoObjetos '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : accesoObjetos '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : accesoObjetos '.' IDENTIFICADOR '(' ')'",
"accesoObjetos : accesoObjetos '.' IDENTIFICADOR",
"accesoObjetos : IDENTIFICADOR",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' return ',' '}'",
"bloque_ejecutables : '{' return '}'",
"bloque_ejecutables : return ','",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables return ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables return '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas return ',' '}'",
"bloque_ejecutables : '{' comas return '}'",
"bloque_ejecutables : comas return ','",
"bloque_ejecutables : error ','",
"return : RETURN",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : accesoObjetos '.' IDENTIFICADOR",
"factor : accesoObjetos '.' IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 371 "./gramaticaForGenCod.y"
symbol* findElementInOrderClassInheritanceGeneral(string _key, string _scope, TableSymbol* _tsGeneral, symbol* _smClass, string _usoInTsGeneral, string _usoInTsClass );
symbol* getFirstSymbolMatchingOfObject(string objectName, symbol* classSymbol);
symbol* getFirstSymbolMatchingOfMethod(string attributeName, symbol* classSymbol);
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        size_t pos = lexeme.find("_s");
        string value = "-"+lexeme.substr(0, pos);
        lexeme = "minus"+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error" && type1 != "pospone" && type2 != "pospone"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
void checkTypesAsignationFin(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerrorFin("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
void checkTypesParams(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos "+ type2 + " y " + type1 + " entre los parametros");
        }
}
void checkTypesParamsFin(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerrorFin("Incompatibilidad de tipos "+ type2 + " y " + type1 + " entre los parametros");
        }
}
/**
 * Carga el símbolo en la tabla
 * Dado el acceso a un elemento de la tabla de simbolos lo elimina
 * Actualiza el símbolocon los datos pasados, 
 * si no se quiere modificar los datos dejar ""
 * 
 * @param key nombre del acceso
 * @param type tipo del acceso
 * @param scope scope actual
 * @param uso uso del acceso
 * @param ts tabla de símbolo a la que agregarle el acceso
 */
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
vector<string> getAccesoFromString(string _accesos){
    vector<string> elementos;

    size_t posInicio = 0;
    size_t posDelimitador = _accesos.find(':');

    while (posDelimitador != string::npos) {
        string elemento = _accesos.substr(posInicio, posDelimitador - posInicio);
        elementos.push_back(elemento);

        posInicio = posDelimitador + 1;
        posDelimitador = _accesos.find(':', posInicio);
    }

    // El último elemento después del último delimitador
    string ultimoElemento = _accesos.substr(posInicio);
    elementos.push_back(ultimoElemento);

    return elementos;
};
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        // le marcamos al terceto si tiene un elemento pospuesto
        symbol* smArg1 = tableSymbol->getSymbol(operando1);
        symbol* smArg2 = tableSymbol->getSymbol(operando2);
        if(smArg1!= nullptr && smArg1->posponeForForwarding == true){
                t->arg1Pospone = true;
                t->type1 = smArg1->type;
        }
        if(smArg2!= nullptr && smArg2->posponeForForwarding == true){
                t->arg2Pospone = true;
                t->type2 = smArg2->type;
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercetWithType(string argumento, string operando1, string operando2, string _type1, string _type2, string _type){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        t->typeTercet = _type;
        t->type1 = _type1;
        t->type2 = _type2;
        // le marcamos al terceto si tiene un elemento pospuesto
        symbol* smArg1 = tableSymbol->getSymbol(operando1);
        symbol* smArg2 = tableSymbol->getSymbol(operando2);
        if(smArg1!= nullptr && smArg1->posponeForForwarding == true){
                t->arg1Pospone = true;
                t->type1 = smArg1->type;
        }
        if(smArg2!= nullptr && smArg2->posponeForForwarding == true){
                t->arg2Pospone = true;
                t->type2 = smArg2->type;
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos. pero setea si algun parametro esta pospuesto
// Los paramtros son argumento, operador1, y operador2
int addTercetPospone(string argumento, string operando1, string operando2, bool _arg1pospone, bool _arg2pospone, string _op1Type, string _op2Type, bool isarg1anObjectInsideClass, bool isarg2anObjectInsideClass, symbol* classOfObjectInsideClass){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        t->arg1Pospone = _arg1pospone;
        t->type1 = _op1Type;
        t->arg2Pospone = _arg2pospone;
        t->type2 = _op2Type;

        t->isarg1anObjectInsideClass = isarg1anObjectInsideClass;
        t->isarg2anObjectInsideClass = isarg2anObjectInsideClass;
        t->classOfObjectInsideClass = classOfObjectInsideClass;

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos. pero setea si algun parametro esta pospuesto
// Los paramtros son argumento, operador1, y operador2
int addTercetPospone(string argumento, string operando1, string operando2, bool _arg1pospone, bool _arg2pospone, string _op1Type, string _op2Type, string _typeTercet){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        
        t->arg1Pospone = _arg1pospone;
        t->type1 = _op1Type;
        t->arg2Pospone = _arg2pospone;
        t->type2 = _op2Type;
        t->typeTercet = _typeTercet;
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 

        // le marcamos al terceto si tiene un elemento pospuesto
        if(operando1[0] == charTercetoId){
            string type;
            if(cantOfRecursions <= 0){
                type = tableTercets->get(stoi(operando1.substr(1, operando1.size())))->typeTercet;
            }else{
                type = stackFunction->top()->ter->get(stoi(operando1.substr(1, operando1.size())))->typeTercet;
            }
            if(type == "pospone"){
                t->arg1Pospone = true;
                t->type1 = "pospone";
            }
        }

        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}
// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}
void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope2(key, "clase", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                        
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        
                        // agregamos la clase al stack de clases para que aunque este redeclarada no tire un error si intentamos acceder a una clase del stack que no existe
                        stackClasses->push(symbolFinded);
                }else{
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        symbolFinded->classOfSymbol = key;
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                newIdentificador->classOfSymbol = key;
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
/**
 * Esta función busca el símbolo de un atributo que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra elsímbololo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfAttribute(string attributeName, symbol* classSymbol){
    
    // verificamos si el elemento está en la tabla de símbolos de la clase actual, si está devolvemos el símbolo
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si está devilvemos el símbolo
    // sino lo encontramos devolvemos nullptr
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(attributeName, "atributo");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
bool isSpecificLexemeInClassOrInheritance(string _argLexeme, symbol* _smClass, int levelOfInheritance){
    // si recibo de levelOfInheritance 0 entonces solo busco en la tabla de símbolos de la clase
    if(2 <= levelOfInheritance && _smClass->attributesAndMethodsVector->isTheSpecificLexemaInTable(_argLexeme)){
        return true;
    }else{
        // si no está en la tabla de símbolos de la clase, entonces buscamos en las herencias
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = _smClass->inheritance[i];
            // si hereda de alguna clase recorremos sus simbolos y los agregamos
            if(tableSymbolMatchingClass != nullptr){
                if(i <= levelOfInheritance && tableSymbolMatchingClass->isTheSpecificLexemaInTable(_argLexeme)){
                    return true;
                }
            }
        }
    }
    return false;
}
/**
 * Esta función se llama cuando se quiere crear un método o función de un objeto a instanciar
 * Para esto se require de buscar el bloque de tercetos en el vecto de bloques de tercetos de declaración
 * copiarlo y agregarle a cada argumento que sea propio del objeto ":"+objeto+scope 
 * al nuevo bloque también le agregamos eso al nombre e insertamos la copia en el vecotr de bloques de tercetos de ejecución
 * 
 * 
 * @param objectName El nombre del objeto.
 * @param scope El scope actual.
 * @param simboloDeFuncion El símbolo de la función o método.
 * @param tableSymbolOfTheClass La tabla de símbolos de la clase.
 */
string existElementOfbject(string _objectlexeme, string _objectName, string _scopeDynamic, symbol* _classSymbol, string _operation, bool _hasMethodParams,string _typeParam, string _ptrParam, int _numberTercet, Tercets * _ts){
    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
    size_t posSeparador = _objectlexeme.find("|");
    string primeraParte = _objectlexeme.substr(0, posSeparador);
    string scope = _objectlexeme.substr(posSeparador + 1);

    size_t firstPos = primeraParte.find(":");
    size_t secondPos = primeraParte.find(":", firstPos + 1);

    string attributeName = primeraParte.substr(0, firstPos);
    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

    vector<string> accesos = getAccesoFromString(objectName);

    //buscamos si existe un objeto con el mismo nombre al alcance
    //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
    symbol* objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, _classSymbol, "objeto", "objeto");
    symbol* classSymbol = nullptr;
        
    if(objectSymbol == nullptr){
            // yyerror("No se encontro declaracion previa del objeto "+ accesos[0]);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            // yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    // yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return "";
                }else{
                    tableSymbol->deleteSymbol(accesos[i]);
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        // yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return "";
                    }
                }
            }

            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol;
            if(_operation == "call"){
                attributeSymbol = getFirstSymbolMatchingOfMethod(attributeName, classSymbol);
            }else{
                attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);
            } 

            if(attributeSymbol == nullptr){
                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                if(_operation == "call"){
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + _objectName, "metodo", _scopeDynamic);
                }else{
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + _objectName, "atributo", _scopeDynamic);
                }
                if (attributeSymbol == nullptr){
                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                }else{
                    if(_operation == "call" ){
                        if(_hasMethodParams){ 
                            if(attributeSymbol->cantParam == 0){
                                yyerrorFin("Se esta llamando al metodo "+ attributeSymbol->lexema.substr(0, attributeSymbol->lexema.find(':')) + " con parametro y el metodo no recibe parametro");
                            }else{
                                // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
                                // verificamos que los tipos de los parametros sean iguales
                                checkTypesParamsFin(attributeSymbol->typeParam, _typeParam); 
                            }

                            // // reemplazamos los tercetos existentes de los parametros por los correctos 
                            Tercet *t2 = new Tercet("paramFormal", attributeSymbol->nameParam, attributeSymbol->typeParam); 
                            _ts->replace(_numberTercet-1, t2);

                        }else{
                            // el método no tiene parametros
                            if(attributeSymbol->cantParam != 0){
                                yyerrorFin("Se esta llamando al metodo "+ attributeSymbol->lexema.substr(0, attributeSymbol->lexema.find(':')) + " sin parametro y el metodo recibe parametro");
                            }
                        }
                        Tercet *tcall = new Tercet("call", attributeSymbol->lexema, "");
                        _ts->replace(_numberTercet, tcall);
                    }
                    return attributeSymbol->lexema;
                }
            }
        }
    }
    return "";
}
void createFunctionTerecets(string objectName, string scope, symbol* simboloDeFuncion, symbol* _classSymbol, int levelOfInheritance){
    // el nivel de inheritance me sirve para indicarle a la función isSpecificLexeme desde que nivel de herencia debe verificar si existe o no el elemento
    // esto porque alno poder recibir el símbolo de la clase de herencia le marcamos desde donde arranca a buscar
    /*
    la función debe buscar en el vector de declaración de bloques de tercetos de funciones la declaraciónde este método o función, 
        copiarlo al vector de ejecución
        recorrer cada terceto y por cada operador de este terceto verificar si alguno es igual a algún atributo o método de la clase ode sus herencias, 
        en ese caso se le agrega el objeto y el scope actual
    */
    functionStack* copyOfTheStack = vectorOfFunctionDeclaredInClasses->getCopyOfFunction(simboloDeFuncion->lexema);
    // recorremos el stack de tercetos de la función o método
    copyOfTheStack->ter->objectName = objectName;
    int numberTercet = -1;
    for (const auto& tercet : copyOfTheStack->ter->getTercets()){
        numberTercet++;
        if(tercet->getOp() == "call"){
            // verificamos si contiene el argumento un "|", en ese caso sabemos que es un objeto y tratamos diferente
            if(tercet->getArg1().find("|") != string::npos){
                // si estamos ante un objeto verificamos que no esté pospuesto, ya que esto se checkeará luego
                if(!tercet->arg1Pospone){
                    // si el arguemento no está pospuestoentonces debemos acceder hasta el atributo o método verificando que exista 
                    // y de existir agregarle el scope dinámico con el nombre del objeto

                    bool hasMethodParam = false;
                    string typeParam;
                    string ptrParam;
                    if(tercet->getArg2() != ""){
                        // el método tiene parametros
                        hasMethodParam = true;
                        typeParam = tercet->getArg2().substr(0, tercet->getArg2().find(":"));
                        ptrParam = tercet->getArg2().substr(tercet->getArg2().find(":")+1, tercet->getArg2().size());
                    };
                    string newLexem = existElementOfbject(tercet->getArg1(), objectName, scope, _classSymbol, "call", hasMethodParam, typeParam, ptrParam, numberTercet, copyOfTheStack->ter);
                    if( newLexem != ""){
                        tercet->setArg1(newLexem);
                    }
                }
            }else{
                // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
                if(isSpecificLexemeInClassOrInheritance(tercet->getArg1(), _classSymbol, levelOfInheritance)){
                    tercet->setArg1(tercet->getArg1()+":"+objectName+scope);
                }
            }
        }else{
            // verificamos si contiene el argumento un "|", en ese caso sabemos que es un objeto y tratamos diferente
            if(tercet->getArg1().find("|") != string::npos){
                // si estamos ante un objeto verificamos que no esté pospuesto, ya que esto se checkeará luego
                if(!tercet->arg1Pospone){
                    // si el arguemento no está pospuestoentonces debemos acceder hasta el atributo o método verificando que exista 
                    // y de existir agregarle el scope dinámico con el nombre del objeto
                    string newLexem = existElementOfbject(tercet->getArg1(), objectName, scope, _classSymbol, "atributo", false, "","", numberTercet, copyOfTheStack->ter);
                    if( newLexem != ""){
                        tercet->setArg1(newLexem);
                    }
                }
            }else{
                // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
                if(isSpecificLexemeInClassOrInheritance(tercet->getArg1(), _classSymbol, levelOfInheritance)){
                    tercet->setArg1(tercet->getArg1()+":"+objectName+scope);
                }
            }
                
            // verificamos si contiene el argumento un "|", en ese caso sabemos que es un objeto y tratamos diferente
            if(tercet->getArg2().find("|") != string::npos){
                // si estamos ante un objeto verificamos que no esté pospuesto, ya que esto se checkeará luego
                if(!tercet->arg2Pospone){
                    // si el arguemento no está pospuestoentonces debemos acceder hasta el atributo o método verificando que exista 
                    // y de existir agregarle el scope dinámico con el nombre del objeto
                    string newLexem = existElementOfbject(tercet->getArg2(), objectName, scope, _classSymbol, "atributo", false, "","", numberTercet, copyOfTheStack->ter);
                    if( newLexem != ""){
                        tercet->setArg2(newLexem);
                    }
                }
            }else{
                // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
                if(isSpecificLexemeInClassOrInheritance(tercet->getArg2(), _classSymbol, levelOfInheritance)){
                    tercet->setArg2(tercet->getArg2()+":"+objectName+scope);
                }
            }   
        }
            
    }
    copyOfTheStack->name += ":"+objectName+scope; // le agregamos el nombre del objeto + el scope actual
    // agregamos el nuevo stack de funciones a la tabla de funciones en ejecución
    vectorOfFunction->add(copyOfTheStack);

};
// ob1 ob2:main:clase1 :main clase1
bool instanciateObject(string objectName, string objectWithScopeStatic, string scopeDynamic, string classNameOfNewObject){

    // obtenemos el símbolo de la clase del objeto
    symbol* classOfNewObject = tableSymbol->getFirstSymbolMatching2(classNameOfNewObject, "clase", ":main"); // obtenemos el símbolo de la clase del nuevo objeto
    
    // verificamos si la clase es una forward declaration 
    // de ser forward el objeto también se convierte en forwarded para luego isntanciarlo cuando la clase se declare
    // ya que si es asi no podemos agregar sus atributos y métodos
    if(classOfNewObject->forwarded){
        return true;
    }
    
    // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
    for (const auto& par : classOfNewObject->attributesAndMethodsVector->getSymbolTable()){
        symbol* simbolo = par.second;
        // creamos el nuevo símbolo
        symbol* newSm = new symbol(*simbolo);                
        
        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
        //      la tabla de tercetos principal o de ejecución
        if(!(newSm->uso=="metodo") && !(newSm->uso=="funcion")){
            if(newSm->uso=="objeto"){
                // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                // ob1 ob2:main:clase1 :main clase1
                newSm->posponeForForwarding = instanciateObject(objectName, newSm->lexema, scopeDynamic, newSm->classOfSymbol);
            }

            newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
            
            // agregamos el nuevo símbolo a la tabla de simbolos        
            tableSymbol->insert(newSm);
        }
                
    }
    // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
    for (const auto& par : classOfNewObject->attributesAndMethodsVector->getSymbolTable()){
        symbol* simbolo = par.second;
        // creamos el nuevo símbolo
        symbol* newSm = new symbol(*simbolo);                
        
        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
        //      la tabla de tercetos principal o de ejecución
        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
            createFunctionTerecets(objectName, scopeDynamic, newSm, classOfNewObject, 2);
            newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
            
            // agregamos el nuevo símbolo a la tabla de simbolos        
            tableSymbol->insert(newSm);
        }
    }

    // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general
    
    // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
    for (int i=1; i >= 0; i--){
        TableSymbol* tableSymbolMatchingClass = classOfNewObject->inheritance[i];
        // si hereda de alguna clase recorremos sus simbolos y los agregamos
        if(tableSymbolMatchingClass != nullptr){
            
            // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
            for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                symbol* simbolo = par.second;
                // creamos el nuevo símbolo
                symbol* newSm = new symbol(*simbolo);                
                
                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                //      la tabla de tercetos principal o de ejecución
                if(newSm->uso!="metodo" && newSm->uso!="funcion"){
                    if(newSm->uso=="objeto"){
                        // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                        // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                        // ob1 ob2:main:clase1 :main clase1
                        newSm->posponeForForwarding = instanciateObject(objectName, newSm->lexema, scopeDynamic, newSm->classOfSymbol);
                    }

                    newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
                    
                    // agregamos el nuevo símbolo a la tabla de simbolos        
                    tableSymbol->insert(newSm);
                }
            }
            for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                symbol* simbolo = par.second;
                // creamos el nuevo símbolo
                symbol* newSm = new symbol(*simbolo);                
                
                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                //      la tabla de tercetos principal o de ejecución
                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                    newSm->lexema = newSm->lexema+":"+objectName+scopeDynamic; // le agregamos el nombre del objeto + el scope actual
                    
                    // agregamos el nuevo símbolo a la tabla de simbolos        
                    tableSymbol->insert(newSm);
                }
            }
        }
    }
    
};
/**
 * Cuando se detecta una clase que fue forwardeada y un objeto fue declarado de esa clase se llma a esta función
 * instranciamos el obejo cargando los elementos de la tabla de simbolos de la clase y de sus herencias a la tabla general
 * 
 * @param symbolObject Puntero al símbolo del objeto.
 * @param classSymbol Puntero al símbolo de la clase del objeto.
 */
void addObjectForwarded(symbol* symbolObject, symbol* classSymbol){
        // Encontrar la posición del segundo "main"
        size_t lastPosMain = symbolObject->lexema.rfind("main");
        
        // Encontrar la posición del último ":" antes del segundo "main"
        size_t posUltimo = symbolObject->lexema.rfind(":", lastPosMain - 2);
        
        string correctLexeme;
        if (posUltimo != string::npos){
            correctLexeme = symbolObject->lexema.substr(posUltimo + 1);
        }else{
            correctLexeme = symbolObject->lexema;
        };
        // Extraer la subcadena deseada
        
        string key = correctLexeme.substr(0, correctLexeme.find(":"));
        string scope = correctLexeme.substr( correctLexeme.find(":"), correctLexeme.size());
        string classType = symbolObject->classOfSymbol;
              
        // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
        for (const auto& par : classSymbol->attributesAndMethodsVector->getSymbolTable()){
                symbol* simbolo = par.second;
                // creamos el nuevo símbolo
                symbol* newSm = new symbol(*simbolo);                
                
                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                //      la tabla de tercetos principal o de ejecución
                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                    createFunctionTerecets(key, scope, newSm, classSymbol, 2);
                }

                if(newSm->uso=="objeto"){
                    // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                    // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                    // ob1 ob2:main:clase1 :main clase1

                    newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
                }

                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                
                // agregamos el nuevo símbolo a la tabla de simbolos        
                tableSymbol->insert(newSm);
        }

        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = classSymbol->inheritance[i];
            // si hereda de alguna clase recorremos sus simbolos y los agregamos
            if(tableSymbolMatchingClass != nullptr){
                
                // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                        symbol* simbolo = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*simbolo);                
                        
                        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                        //      la tabla de tercetos principal o de ejecución
                        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                            createFunctionTerecets(key, scope, newSm, classSymbol, i);
                        }

                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
            }
        }
};
/**
 * Cuando se detecta una finalización de declaración de clase se llama a esta función
 * Recorre la tabla de símbolos en busca de símbolos de uso objeto y de la clase actual y que hayan sido declarados luego del forwarded y previo a la declaración de la clase. 
 * Por cada uno de esos objetos, los instancia y les agrega los atributos y métodos de la clase y de sus herencias.
 * 
 * @return void
 */
void finishClass(){
        tableSymbol->deleteScope();
        
        symbol* symbolClass = stackClasses->top();

        vector<symbol*> symbolsMatched = tableSymbol->getSymbolsByUseAndNameClassAndForwarded("objeto", symbolClass->classOfSymbol);

        for (symbol* sm : symbolsMatched){
                // recorremos los simbolos de los objetos e instanciamos
                sm->forwarded = false;
                sm->posponeForForwarding = false;

                addObjectForwarded(sm, symbolClass);
        }
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
/**
 * Cuando detectamos un atributo de clase se ejecuta esta función
 * Obtiene el símbolo viejo lo elimina 
 * y lo carga a la tabla de la clase
 *
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addAtribute(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);         // eliminamos el simbolo dela tabla general

        // operamos sobre la tabla de símbolos de la clase
        TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

        // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
        int diff = tsClass->getDiffOffScope2(key, "atributo", scope); 
                
        if(diff == 0){
                yyerror("Redeclaracion de atributo en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAttribute = new symbol(key+scope, "", type, "atributo");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
                */

                // Marcamos a la clase que pertenece el atributo
                newAttribute->classOfSymbol = classOfAttribute;

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newAttribute);
        }        
};
/**
 * Esta función verifica si un método con la clave, alcance y uso dados existe en la tabla de símbolos de la clase actual o en cualquiera de sus clases heredadas.
 * Si el método se encuentra en la tabla de símbolos de la clase actual, devuelve 0.
 * Si el método se encuentra en una tabla de símbolos de clase heredada, devuelve 1.
 * Si el método no se encuentra en ninguna de las tablas de símbolos, devuelve -1.
 *
 * @param key La clave del método a buscar.
 * @param scope El alcance del método a buscar.
 * @param uso El uso del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return Un entero que indica si el método se encontró en la tabla de símbolos de la clase actual (0), en una tabla de símbolos de clase heredada (1), o no se encontró (-1).
 */
int existMethodInInheritance(string key, string scope, string uso, symbol* classSymbol){
    // verificamos si el método está en la tabla de símbolos de la clase actual, si es asi devolvemos 0
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si es asi devolvemos 1 y si no esta devolvemos 2
    // revisar cuantas herencias hay, en base a esto hacer un for que se encargue de reccorer cada una de las tablas de las clases y en cada llamado usar la funcion getdiffscope y si lo que devuelve es 0 significa que esta
    
    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = classSymbol->attributesAndMethodsVector->getDiffOffScope2(key, "metodo", scope);        
    if(diff == 0){
        //si el método está en la propia tabla de símbolos de la clase se devuelve 0
        return 0;
    }else{
        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // verificar que en esa tabla no exista el simbolo
                bool existMethodInTable = classSymbol->inheritance[i]->existMethodInTable(key,uso);

                if(existMethodInTable){
                    return 1;
                }
            }
        }
        return -1;
   }           
}
/**
 * Cuando detectamos un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param classOfAttribute nombre de la clase a la que pertenece
 */
void initMethod(string key, string scope, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);   // eliminamos el simbolo (usa el contador) de la tabla general
        symbol * classSymbol = stackClasses->top();
        TableSymbol* tsClass = classSymbol->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo
        cantOfRecursionsInMethod = 0;

        int methodAlredyExist = existMethodInInheritance(key, scope, "metodo", classSymbol);    // verificamos si el método ya existe en la clase o en alguna de sus clases heredadas

        if(methodAlredyExist == 0){
                yyerror("Redeclaracion de metodo en la misma clase");
        }
        if(methodAlredyExist == 1){
                yyerror("Sobreescritura de metodos prohibida");
        }      
        // aunque tire error igual lo agregamos para que no falle la genreacion de codigo   
                
        // creamos el nuevo símbolo
        symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");
        /*
                ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE METODOS CARGADOS
        */

        newMetodo->classOfSymbol = classOfAttribute;

        // agregamos el nuevo símbolo al vector de simbolos de la clase        
        tsClass->insert(newMetodo);
        
        // seteamos que si se debe agregar un parametro se le haga a este método
        lastMethod = newMetodo;

        // agregamos un scope
        tableSymbol->addScope(key);

        // creamos una stack para la función y la agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        
        cantOfRecursions++;        
};                        
/**
 * Cuando detectamos un parámtro en un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * Se carga como una variable y se le agrega a su scope el nombre del método
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addParamMetodo(string key, string scope, string type, string classOfAttribute){

    // obtener el símbolo viejo y eliminarlo
    // verificar que no esté previamente en ese scope en esa tabla de símobolo
    // lo agregamos y setear el tipo del parametro


    tableSymbol->deleteSymbol(key);    // eliminamos el simbolo (usa el contador) de la tabla general
    

    /* SE SUPONE QUE ESTO NUNCA DEBERÍA SUCEDER PORQUE ES UN SOLO PARÁEMETRO Y LA PRIMER VARIABLE DEL ÁMBITO */
    // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable dentro de la tala de símbolos de la clase
    int diff = tableSymbol->getDiffOffScope2(key, "var", scope); 
    if(diff == 0){
        yyerror("Redeclaracion de variable en el mismo ambito del metodo");
    }else{
        // creamos el nuevo símbolo
        symbol* newparam = new symbol(key+scope, "", type, "var");

        // agregamos el nuevo símbolo al vector de simbolos de la clase        
        tableSymbol->insert(newparam);

        lastMethod->cantParam++;
        lastMethod->typeParam = type;
        lastMethod->nameParam = key+scope;
    }
};
/**
 * Cuando detectamos un parámtro en una declaración de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase terminamos
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del parámetro
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
*/
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
    //  verificamos si está dentro de la declaración de una clase o no

    // obtener el símbolo viejo y eliminarlo
    // setear el tipo del parametro

    // obtenemos la tabla general y le cargamos el parametro como variable
    symbol* newIdentificador = setNewScope(key, type, scope, "var", tableSymbol); 

    // seteamos el parámetro al símbolo de la función
    lastMethod->cantParam++;
    lastMethod->typeParam = type;
    lastMethod->nameParam = key+scope;
    
    reglaptr = newIdentificador->lexema; 
    reglatype = type;
};
string checkNewNameBeforeInsert(symbol* newSm){
    // funcion que se encarga de borrar las apariciones de nombres de clases dentro un lexema 
    // y de verificar que no exista un nombre igual en el mismo ámbito
    // la logica funciona en iterar sobre la tabla de symbolor preguntando por cada uno de los lexemas si es que son de tipo clase
    // si es asi se crea una variable auxiliar donde se concatena de forma correcta el nuevo lexema para buscar si este se encuentra como substring dentro de 
    // de nuevo lexema a insertar dentro de la tabla de simbolos 
    
    for (const auto& par : tableSymbol->getSymbolTable()){
        symbol* sm = par.second;
        if(sm->uso == "clase"){
            // creo una variable aux para guardar el lexema                 ejemplo= b:main:func3
            string lexemaAux = sm->lexema;
            //busco la primera aparicion de :                               ejemplo= 2
            size_t firstColonPos = lexemaAux.find(':');
            //obtengo el nombre de la clase para su uso a posteriori        ejemplo= b
            string nameOfClass = lexemaAux.substr(0, firstColonPos); 
            //busco el tamaño de la palabra                                 ejemplo= 12
            size_t secondColonPos = lexemaAux.size();
            //creo el nuevo lexema                                         ejemplo= primer substr = main:func3 segundo substr = b, lo concateno y queda main:func3:b
            lexemaAux =  lexemaAux.substr(firstColonPos + 1, secondColonPos)+":"+lexemaAux.substr(0,firstColonPos);
            //busco si el nuevo lexema se encuentra dentro del lexema a insertar
            size_t pos = newSm->lexema.find(lexemaAux);
            // si encuentra una posicion con el find significa que esta
            if(pos != string::npos){
                    //si se encuentra dentro del lexema a insertar, se borra la aparicion de el nombre de la clase unicamente 
                    size_t pos = newSm->lexema.find(nameOfClass);
                    newSm->lexema.erase(pos-1, pos);      //siguiendo con el ejemplo y suponiendo que tenemos x:main:func3:b, se borra la aparicion de b y queda x:main:func3
                    newSm->lexema =  newSm->lexema +":"+nameOfClass; //se concatena el nombre de la clase al final del lexema
            }
        }
    }
    return newSm->lexema;
}
/**
 * Cuando se detecta una declaración de objeto se llama esta función
 * Verificamos que no exista un objeto en el mismo ámbito con el mismo nombre   
 * agregamos el objeto a la tabla general, obtenemos la clase del objeto
 * agregamos cada atributo y método de la clase y de sus herencias. 
 * 
 * @param key El nombre del objeto a agregar.
 * @param scope El scope del objeto a agregar.
 * @param classType La clase del objeto a agregar.
 */
void addObject(string key, string scope, string classType){
    // si la clase no existe no hacemos nada ya que en la función initObjectDeclaration() se levanta el error de clase no declarada
    if (classType == "_error"){
        return;
    }
        
    // verificamos que no existea un objeto con el mismo nombre en el mismo ámbito
    int diff = tableSymbol->getDiffOffScope2(key, "objeto", scope); 
    if(diff == 0){
        // existe un objeto ocn el mismo nombre en el mismo ámbito
        yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
    }else{
        // eliminamos el símbolo viejo y lo agregamos en la tabla de simbolo general
        symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
        /*
            ACA SE AGREGAN LOS ATRIBUTOS AL OBJETO INSTANCIADO
        */
        newObject->classOfSymbol = classType; // seteamos el tipo de clase del objeto

        // obtenemos el símbolo de la clase del objeto
        symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(classType, "clase", ":main"); // obtenemos el símbolo de la clase del objeto
        
        // verificamos si la clase es una forward declaration 
        // de ser forward el objeto también se convierte en forwarded para luego isntanciarlo cuando la clase se declare
        // ya que si es asi no podemos agregar sus atributos y métodos
        if(matchingClass->forwarded){
            newObject->posponeForForwarding = true;    
            return;
        }
        
        // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los objetos
        for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
            symbol* simbolo = par.second;
            // creamos el nuevo símbolo
            symbol* newSm = new symbol(*simbolo);                
            // las funciones no las tratamos
            if(!(newSm->uso=="metodo") && !(newSm->uso=="funcion")){
                if(newSm->uso=="objeto"){
                    // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                    // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                    // ob1 ob2:main:clase1 :main clase1
                    newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
                
                }
                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                
                // agregamos el nuevo símbolo a la tabla de simbolos        
                tableSymbol->insert(newSm);
            }
        }
        // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
        for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
            symbol* simbolo = par.second;
            // creamos el nuevo símbolo
            symbol* newSm = new symbol(*simbolo);                
            // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
            //      la tabla de tercetos principal o de ejecución
            if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                createFunctionTerecets(key, scope, newSm, matchingClass, 2);
                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                
                // agregamos el nuevo símbolo a la tabla de simbolos        
                tableSymbol->insert(newSm);
            }
        }

        // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general

        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = matchingClass->inheritance[i];
            // si hereda de alguna clase recorremos sus simbolos y los agregamos
            if(tableSymbolMatchingClass != nullptr){
                for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                    symbol* simbolo = par.second;
                    // creamos el nuevo símbolo
                    symbol* newSm = new symbol(*simbolo);                
                    
                    // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                    //      la tabla de tercetos principal o de ejecución
                    if(newSm->uso!="metodo" && newSm->uso!="funcion"){
                        if(newSm->uso=="objeto"){
                            // como el elemento de la clase es un objeto, debemos copiar cada atributo de la clase del objeto e intanciarlo
                            // string objectName = newSm->lexema.substr(0, newSm->lexema.find(":"));
                            // ob1 ob2:main:clase1 :main clase1
                            newSm->posponeForForwarding = instanciateObject(key, newSm->lexema, scope, newSm->classOfSymbol);
                        }
                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                    }   
                }
                // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                    symbol* simbolo = par.second;
                    // creamos el nuevo símbolo
                    symbol* newSm = new symbol(*simbolo);                
                    
                    // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                    //      la tabla de tercetos principal o de ejecución
                    if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                        createFunctionTerecets(key, scope, newSm, matchingClass, i);
                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                    }
                }
            }
        }
    } 
};
/**
 * cuando detectamos una declaracion de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase lo agregamos a la tabla general
 * si está dentro de una clase lo agregamos a la tabla de la clase y le seteamos la clase a la que pertenece y el scope inside class
 * 
 * @param key nombre del acceso
 * @param scope scope actual
*/
void initFunction(string key, string scope){        

        tableSymbol->deleteSymbol(key);    // eliminamos el simbolo (usa el contador) de la tabla general

        string scopeOriginal = scope;

        // verificamos si es dentro de una clase 
        if(stackClasses->size() > 0){
            // si estamos dentro de una clase sumamos 1 a la recursión interna de metodo
            cantOfRecursionsInMethod++;
            if(cantOfRecursionsInMethod > 1){
                    yyerror("No se permite anidamiento de funciones locales dentro de metodos");
            }
        }
    
        // buscamos si existe una función con el mismo nombre en el mismo ámbito
        int diff = tableSymbol->getDiffOffScope2(key, "funcion", scope); 
        if( diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newFunction = new symbol(key+scope, "", "void", "funcion");
                
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE METODOS CARGADOS
                */
                
                // si esta dentro de una clase le seteamos los atributos de clase y scopeInsideClass
                if(stackClasses->size() > 0){
                    stackClasses->top()->attributesAndMethodsVector->insert(newFunction); 
                    string classOfAttribute = stackClasses->top()->classOfSymbol;
                    newFunction->classOfSymbol = classOfAttribute;
                    newFunction->scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                
                }else{
                    tableSymbol ->insert(newFunction);
                }
                // cargamos cual fue el último método o función por si tiene un parámetro
                lastMethod = newFunction;
        } 
        // agregamos al scope el nombre de la función
        tableSymbol->addScope(key);
        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        //verificamos las recursiones y le sumamos uno
        cantOfRecursions++;
};
/**
 * Cuando detectamos el fin de una declaracion de función
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishFunction(){
    // obtenemos el stack con los tercetos de la función
    functionStack* fs = stackFunction->top();
    stackFunction->pop();
    tableSymbol->deleteScope(); // sacamos el scope de la función
    cantOfRecursions--;     // sacamos una recursión

    if(stackClasses->size() > 0){
        // si no está dentro de una clase lo agregamos a la tabla general
        cantOfRecursionsInMethod--;
        vectorOfFunctionDeclaredInClasses->add(fs);
    }else{
        vectorOfFunction->add(fs);
    }
            
}
/**
 * cuando detectamos el fin de una declaracion de metodo
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        // los vectores siempre se guardan en el vector de funciones declaradas en clases
        vectorOfFunctionDeclaredInClasses->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
symbol* findInvocationInOrderClassInheritanceGeneral(string _key, string _scope, TableSymbol* _tsGeneral, symbol* _smClass){
    // recibis el key de la función o método a buscar
    symbol* symbolFinded;
    symbolFinded = _smClass->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(_key, "funcion");
    if (symbolFinded != nullptr){
        return symbolFinded;
    }else{
        symbolFinded = _smClass->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(_key, "metodo");
        if (symbolFinded != nullptr){
            return symbolFinded;
        }else{
            // recorres el arreglo de herencia de la clase buscando el elemento coincidente
            for (int i=1; i >= 0; i--){
                TableSymbol* tableSymbolMatchingClass = _smClass->inheritance[i];
                if (tableSymbolMatchingClass != nullptr){
                    // si hereda de alguna clase recorremos sus simbolos y los agregamos
                    symbolFinded = tableSymbolMatchingClass->getElementInTableByFisrtPartAndUse(_key, "metodo");
                    if(symbolFinded != nullptr){
                        return symbolFinded;
                    }
                }
            }

            // si en la herencia no se encuentra nada retornamos el primer simbolo que coincida con el key y el uso "atributo" en la tabla general
            return tableSymbol->getFirstSymbolMatching2(_key, "funcion", _scope); 
        }
    }
}
symbol* findElementInOrderClassInheritanceGeneral(string _key, string _scope, TableSymbol* _tsGeneral, symbol* _smClass, string _usoInTsGeneral, string _usoInTsClass ){
    // recibis el key del a tributos a buscar, el scope actual, la tabla general y el simbolo de la clase (para obtener la ts de la clase y de las herencias)
    // primero buscas en la tabla de la tabla general un "atributo" con el nombre del key
    // si lo encontras devolves el simbolo
    // si no lo encontras buscas en las herencias hasta encontrarlo y lo devolves
    // si no lo encontras buscas enla trabla de simbolos con getFirstSymbolMantching2 y lo devolves
    // si no lo encontras devolves nullptr
    symbol* symbolFinded;
    if ( _smClass == nullptr){
        return tableSymbol->getFirstSymbolMatching2(_key, _usoInTsGeneral, _scope); 
    }
    symbolFinded = _smClass->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(_key, _usoInTsClass);
    if (symbolFinded != nullptr){
        return symbolFinded;
    }else{
        // recorres el arreglo de herencia de la clase buscando el elemento coincidente
        for (int i=1; i >= 0; i--){
            TableSymbol* tableSymbolMatchingClass = _smClass->inheritance[i];
            if (tableSymbolMatchingClass != nullptr){
                // si hereda de alguna clase recorremos sus simbolos y los agregamos
                symbolFinded = tableSymbolMatchingClass->getElementInTableByFisrtPartAndUse(_key, _usoInTsClass);
                if(symbolFinded != nullptr){
                    return symbolFinded;
                }
            }
        }

        // si en la herencia no se encuentra nada retornamos el primer simbolo que coincida con el key y el uso "atributo" en la tabla general
        return tableSymbol->getFirstSymbolMatching2(_key, _usoInTsGeneral, _scope); 
    }
}
/**
 * Cuando detectas una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable y si existe seteea el $$->ptr con el lexema
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void checkVarInScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(key); 
    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* symbolFinded;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        symbolFinded = findElementInOrderClassInheritanceGeneral(key, scope, tableSymbol, stackClasses->top(),"var", "atributo");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        symbolFinded = tableSymbol->getFirstSymbolMatching2(key, "var", scope); 
    };
    if(symbolFinded == nullptr){
        yyerror("No se encontro declaracion previa de la variable "+ key);
    }else{
        reglaptr = symbolFinded->lexema;
        reglatype = symbolFinded->type;

        /* en este punto sabes que es una variable declarada, 
            pero ahora quiero saber si es de este ámbito o de otro, 
            si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
        */
        
        // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
        if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
            yywarning("Se esta usando la variable "+ key +" como una expresion en un ambito diferente al de su declaracion");
        }
    }
};
/**
 * función cuando se detecta una variable++ 
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void newFactorMasMas (string key, string scope, string& reglaptr, string& reglatype){
    tableSymbol->deleteSymbol(key);
    
    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* symbolFinded;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        symbolFinded = findElementInOrderClassInheritanceGeneral(key, scope, tableSymbol, stackClasses->top(),"var", "atributo");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        symbolFinded = tableSymbol->getFirstSymbolMatching2(key, "var", scope); 
    };
    if(symbolFinded == nullptr){
        yyerror("No se encontro declaracion previa de la variable "+ key);
    }else{
        string value = "";
        if(symbolFinded->type == "unsigned int"){
            value = "1_ui";
        }else if(symbolFinded->type == "short"){
            value = "1_s";
        }else if(symbolFinded->type == "float"){
            value = "1.0";
        }
        int number = addTercet("+", symbolFinded->lexema, value);   
        number = addTercet("=", symbolFinded->lexema, charTercetoId + to_string(number));       
        
        reglaptr = symbolFinded->lexema;
        reglatype = symbolFinded->type;

        /* en este punto sabes que es una variable declarada, 
            pero ahora quiero saber si es de este ámbito o de otro, 
            si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
            ESTO LO DEJO PARA ZUCCHI, DESPUES BORRAR ESTE COMENTARIO
        */
        
        // si el símbolo tiene que checkearse y si los lexemas no coincidencia entonces es una variable de otro ámbito
        if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
            yywarning("Se esta modificando la variable "+ key +" en un ambito diferente al de su declaracion");
        }
    }
}
/**
 * función cuando se detecta una asginación sobre una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable
 * verifica que los tipos sean iguales
 * verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key el acceso al identificador al que se le asigna.
 * @param scope el scope actual
 * @param op2Lexeme el acceso de lo que se asigna
 * @param op2Type el tipo de lo que se asigna
 * @throws yyerror si no hay variable alcanzable
 */
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(key); 
    
    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* symbolFinded;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        symbolFinded = findElementInOrderClassInheritanceGeneral(key, scope, tableSymbol, stackClasses->top(),"var", "atributo");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        symbolFinded = tableSymbol->getFirstSymbolMatching2(key, "var", scope); 
    };
    if(symbolFinded == nullptr){
        yyerror("No se encontro declaracion previa de la variable "+ key);
    }else{
        // checkeamos que los tipos sean iguales 
        checkTypesAsignation(symbolFinded->type, op2Type); 
        bool isOp1Posponed = symbolFinded->type == "pospone";
        bool isOp2Posponed = op2Type == "pospone";
        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        int number = addTercetPospone("=", symbolFinded->lexema, op2Lexeme, isOp1Posponed, isOp2Posponed, symbolFinded->type, op2Type, symbolFinded->type);
        /* en este punto sabes que es una variable declarada, 
            pero ahora quiero saber si es de este ámbito o de otro, 
            si es de otro y esa variable tiene el check debo informar que se está usando a la izquierda de una asignación
        
        */

        // si al variable tiene asignado que se checke y si los lexemas no coincidencia entonces es una variable de otro ámbito
        if(symbolFinded->isVariableToCheck && key+scope != symbolFinded->lexema){
            yywarning("Se esta usando la variable "+ key +" a la izquierda de una asignacion en un ambito diferente al de su declaracion");
        }
    } 
};
void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(op1type != "pospone" && op2type != "pospone"){
            if(checkTypesOperation(op1type, op2type)){
                    reglatype = op1type;
            }else{
                    reglatype = "error";
            } 

            int number = addTercetWithType(operador, op1ptr, op2ptr, op1type, op2type, reglatype); 
            reglaptr = charTercetoId + to_string(number); 

        }else{
            reglatype = "pospone";
            bool isOp1Posponed = op1type == "pospone";
            bool isOp2Posponed = op2type == "pospone";
            int number = addTercetPospone(operador, op1ptr, op2ptr, isOp1Posponed, isOp2Posponed, op1type, op2type, reglatype); 
            reglaptr = charTercetoId + to_string(number); 
        }
        
}
void newTof(string key, string opType, string& reglaptr, string& reglatype){
        /* int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        */
        if(opType != "pospone" ){
            int number = addTercetWithType("tof", "", key, "float", opType, "float"); 
            reglaptr = charTercetoId + to_string(number); 
        }else{
            reglatype = "pospone";
            int number = addTercetPospone("tof", "", key, false, true, "float", opType, reglatype); 
            reglaptr = charTercetoId + to_string(number); 
        }
        reglatype = "float"; 
}
void condition(string& reglaptr){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet());
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet());
        }
        int number = addTercetAndStack("BF", charTercetoId + lastTercet, ""); 
        reglaptr = charTercetoId + to_string(number); 
}
void addElse(string& reglaptr){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet()+ 2);
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 2);
        }
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + lastTercet);
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        number = addTercet("label","label"+to_string(cantLabels),"");
        cantLabels++;
        reglaptr = charTercetoId + to_string(number); 
}
void finIf(){
        string lastTercet;
        if(cantOfRecursions <= 0){
            lastTercet = to_string(tableTercets->numberOfLastTercet() + 1);
        }else{
            lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 1);
        }
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + lastTercet);
        }
        int number = addTercet("label","label"+to_string(cantLabels),"");
        cantLabels++;
}
void initWhile(){
    string lastTercet;
    if(cantOfRecursions <= 0){
        lastTercet = to_string(tableTercets->numberOfLastTercet() + 1);
    }else{
        lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 1);
    }
    addTercetOnlyStack("incioCondicionWhile", charTercetoId + lastTercet, "");
    int number = addTercet("label","label"+to_string(cantLabels),"");
    cantLabels++;
}
void finWhile(string & reglaptr) {
    string lastTercet;
    if(cantOfRecursions <= 0){
        lastTercet = to_string(tableTercets->numberOfLastTercet() + 2);
    }else{
        lastTercet = to_string(stackFunction->top()->ter->numberOfLastTercet() + 2);
    }
    Tercet *t = popTercet(); 
    if (t!=nullptr){
            t->setArg2( charTercetoId + lastTercet );
    } 
    Tercet *t2 = popTercet(); 
    int number; 
    if(t2!=nullptr){
            number = addTercet("BI", t2->getArg1(), "");
    } 
    number = addTercet("label","label"+to_string(cantLabels),"");
    cantLabels++;
    reglaptr = charTercetoId + to_string(number);
}
void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
    checkTypesCompare(op1type, op2type); 
    int number = addTercet(operador, op1ptr, op2ptr); 
    reglaptr = charTercetoId + to_string(number);
}
/**
 * Cuando se detecta una sentencia que declara una variable se llama esta función.
 * Agrega una nueva variable a la tabla de símbolos específica de clase o la general.
 * Agrega los atributos correspondientes al símbolo
 * Verifica que si se usa una variable de otro ámbito que tiene el checkeo activo se informa 
 *
 * @param key La clave de la variable.
 * @param scope El ámbito de la variable.
 * @param type El tipo de la variable.
 */
void newVariable(string key, string scope, string type){
    symbol* newIdentificador = nullptr;
    
    //buscamos si esta definida ya una variable con ese mismo nombre dentro de la tabla de simbolos que corresponda
    int diff = tableSymbol->getDiffOffScope2(key, "var", scope); 
    if(diff == 0){
        // existe una variable previa en el mismo ambito con el mismo nombre
        yyerror("Redeclaracion de variable en el mismo ambito");
    }else{
        
        newIdentificador = setNewScope(key, type, scope, "var", tableSymbol); 
        /*
            ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
        */
        if (isVariableToCheck){
            // si es una variable a chequear le seteamos que se debe checkear en el simbolo
            newIdentificador->isVariableToCheck = true;
        }
    }
};
/**
 * Cuando se detecta la clase de un objeto a instanciar se llama esta función.
 * Borra el símbolo de la tabla de símbolos general.
 * Verifica que la clase haya sido declarada y exista.
 * 
 * @param key nombre de la clase
 * @param scope El alcance del objeto.
 * @param reglaptr El puntero a la regla.
 */
void initObjectDeclaration(string key, string scope, string& reglaptr){
    // verificar que la clase haya sido declarada y exista
    // borramos el símbolo de la tabla de símbolos general
    tableSymbol->deleteSymbol(key);
    // usamos ":main" porque todas las clases se usan en el ámbito ":main"
    symbol* classFinded = tableSymbol->getFirstSymbolMatching2(key, "clase", ":main");
    //debo revisar si es estoy dentro de una clase o no, ya que pudiera pasar que uno quiera declarar un objeto de una dentro de la misma clase
    if(classFinded == nullptr){
        yyerror("No se encontro declaracion previa de la clase "+ key);
        actualClass = "_error"; 
    }else{ 
        if(stackClasses->size() > 0){
            //si estoy dentro de una clase, debo verificar que la clase que quiero instanciar no sea la misma clase en la que estoy
            if(stackClasses->top()->classOfSymbol == key){
                yyerror("No se puede instanciar un objeto de la misma clase en la que se encuentra");
                actualClass = "_error"; 
            }
        }
        reglaptr = key; 
        actualClass = key; 
    }
}
/**
 * Borra el simbolo de la tabla general
 * verifica si existe la clase a heredar, sino existe lanza un error de que no existe la clase
 * si encontras la clase copias su arreglo de herencia a esta clase que hereda y le agregas en el primer nullptr la clase a heredar (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))
 *
 *
 * @param classToInherit The name of the class to inherit from.
 * @param scope The scope of the inheriting class.
 * @param classWhoInherit The name of the class that inherits.
 * @return void
 */
void  detectInheritance(string classToInherit , string scope, string classWhoInherit){
        
        // borrar el simbolo de la tabla general
        // buscar si existe la clase a heredar, sino existe lanzar un error de que no existe la clase
        // si encontras la clase copias su arrehlo de herencia a el arreglo de este símbolo y luego le agregas la clase a 
        // heredar en el primer nullptr de ese arreglo (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))

        tableSymbol->deleteSymbol(classToInherit); // borramos el símbolo de la tabla general

        symbol* symbolofClassWhoInherit = stackClasses->top();  //guardas el simbolo de la ultima clase creada y agregada al stack de clases

        // verificamos que no herede esta clase de otro,solo puede heredar de una
        if (symbolofClassWhoInherit->isAlreadyInhenriting){
                        yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de otra clase");
        }else{
                // buscamos la clase a heredar, la buscamos con scope ":main" porque es en el único lugar donde se pueden declarar clases
                symbol* classFinded = tableSymbol->getFirstSymbolMatching2(classToInherit, "clase", ":main");
                if(classFinded == nullptr){
                        yyerror("No se encontro declaracion previa de la clase a heredar "+ classToInherit);
                }else if (symbolofClassWhoInherit->classOfSymbol == classToInherit)
                        {
                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de si misma");
                        }else{
                            // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                            // intentamos agregar la clase a heredar en el primer nullptr del arreglo de herencia, si tiene más de 3 elementos lanzamos un error

                            // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                            for(int i = 0; i < 2; i++) {
                                    symbolofClassWhoInherit->inheritance[i] = classFinded->inheritance[i];
                            }
                            bool isNullptr = false;
                            int posOfNullInInheritance = -1;
                            // recorres el arreglo verificando que exista alguna posicion con nullptr, si es asi seteas el booleano con true y guardas la posicion del nullptr.
                            for (int i=0; i < 2; i++){
                                    if(symbolofClassWhoInherit->inheritance[i]==nullptr){
                                            isNullptr = true;
                                            posOfNullInInheritance = i;
                                            break;
                                    }
                            }
                            // si el boleano es true, agregas la clase a heredar en el lugar que se encuentra nullptr del arreglo de herencia, si no es true lanzas un error diciendo que ya existe una herencia de 3 clases
                            if(isNullptr){
                                    symbolofClassWhoInherit->inheritance[posOfNullInInheritance] = classFinded->attributesAndMethodsVector; 
                                    symbolofClassWhoInherit->isAlreadyInhenriting = true; 
                                    //se debe realizar un chequeo de metodos para evitar la sobreescritura de metodos
                                    //si se encuentra un metodo con el mismo nombre en la clase que hereda y en la clase que es heredada se lanza un error
                                    for (const auto& par : symbolofClassWhoInherit->attributesAndMethodsVector->getSymbolTable()){
                                        symbol* sm = par.second;
                                        if(sm->uso == "metodo"){
                                            string lexemaAux = sm->lexema.substr(0, sm->lexema.find(":"));
                                            symbol* sm2 = classFinded->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(lexemaAux, "metodo");
                                            //accedo si es que classfinded hereda de otra clase para verificar si esta tambien hereda un metodo con el mismo nombre
                                            symbol* sm3;
                                            if(classFinded->inheritance[0] != nullptr){
                                                symbol* sm3 = classFinded->inheritance[0]->getElementInTableByFisrtPartAndUse(lexemaAux, "metodo");
                                            }
                                            if(sm2 != nullptr || sm3 != nullptr){
                                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de " + classToInherit + " pero ya hereda un metodo con el mismo nombre");
                                                }
                                        }
                                    }
                                    
                            }else{
                                    yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" intenta heredar de " + classToInherit + " superando la profundidad la maxima profundidad de herencias");
                            }
                        }
        }
}
/**
 * Cuando finaliza la declaración de variables se llama esta función.
 * Establece la variable para checkeo de variables en falso.
 */
void finishVariableDeclaration(){
    isVariableToCheck = false;
}
/**
 * Cuando se detecta la palabra reservada CHECK se llama esta función.
 * Establece la variable para checkeo de variables en true.
 */
void setVariableToCheck(){
    isVariableToCheck = true;
}
/**
 * Esta función busca el símbolo de un objeto que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra el símbolo lo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfObject(string objectName, symbol* classSymbol){
    
    // verificamos si el elemento está en la tabla de símbolos de la clase actual, si está devolvemos el símbolo
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si está devilvemos el símbolo
    // sino lo encontramos devolvemos nullptr
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(objectName, "objeto");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(objectName, "objeto");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
/**
 * Esta función se llama cuando se detecta el uso de un atributo en una expresión aritmética (a la derecha de una asignación).
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * asigna a reglaptr el lexema del símbolo y a reglatype el tipo del símbolo.
 *
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param reglaptr Puntero a la regla.
 * @param reglatype Tipo de la regla.
 */
void newUseObjectAttribute(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype, bool & reglaIsInsideClass){

    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(attributeName);

    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };
    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                reglaptr =  attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                reglatype = "pospone";
                if (stackClasses->size() > 0){
                    reglaIsInsideClass = true;  
                }else{
                    reglaIsInsideClass = false;  
                }
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            reglaptr =  attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                            reglatype = "pospone";
                            return;
                        }
                    }
                }
            }

            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    reglaptr =  attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                    reglatype = "pospone";
                    return;
                }else{
                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                    if (attributeSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{
                        reglaptr =  attributeSymbol->lexema;
                        reglatype = attributeSymbol->type;
                    }
                }
                
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta la asignación de una expresión a un atributo de un objeto.
 * Verifica que el objeto esté declarado y obtiene su clase.
 * Verifica que la clase exista.
 * Verifica que la clase contenga el atributo.
 * Obtiene sumando el scope estático del atributo + nombre objeto + scope actual el lexema del símbolo propio del objeto.
 * Verifica que los tipos sean iguales.
 * Genera la asignación de la expresión al atributo del objeto.
 * 
 * @param objectName Nombre del objeto.
 * @param attributeName Nombre del atributo.
 * @param scope Alcance.
 * @param op2Lexeme Lexema de la expresión a asignar.
 * @param op2Type Tipo de la expresión a asignar.
 * @param reglaptr Puntero al terceto generado.
 * @param reglatype Tipo del atributo.
 */
void newAsignacionObjectAttribute(string objectName, string attributeName, string scope, string op2Lexeme, string op2Type, string& reglaptr, string& reglatype, bool isOp2InsideClass){
    // la idea es que sabemos los accesos que hay que usar, entonces es buscar el primer símbolo del objeto, tomar suclase yverificar que tenga el segundo objeto y así
    // luego debemos quedarnos con el último símbolo de objeto y guardarlo en objectSymbol
    // si alguno de los objetos está pospuesto debemos crear el terceto correspondiente marcando los pospuestos y marcando todos los accesos para en el forwarding poder acceder
    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(attributeName);

    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };
    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                bool isOp2Posponed = op2Type == "pospone";
                int number;
                // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                if(stackClasses->size() > 0){
                    //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                    // OJO QUE NO SE QUE SE LE PONE EN EL ISARG2 UN OBJETO DENTO DE LA CLASE
                    number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, op2Lexeme, true, isOp2Posponed, "pospone", op2Type, true, isOp2InsideClass, stackClasses->top());                    
                }else{
                    // agregamos el terceto de asignación marcandolo como pospuesto y dejando todo false de que está dentro de una clase
                    number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, op2Lexeme, true, isOp2Posponed, "pospone", op2Type, false, false, nullptr);
                }

                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            bool isOp2Posponed = op2Type == "pospone";
                            int number;
                            // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                            if(stackClasses->size() > 0){
                                //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                                // OJO QUE NO SE QUE SE LE PONE EN EL ISARG2 UN OBJETO DENTO DE LA CLASE
                                number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, op2Lexeme, true, isOp2InsideClass, "pospone", op2Type, true, isOp2Posponed, stackClasses->top());                    
                            }else{
                                // agregamos el terceto de asignación marcandolo como pospuesto y dejando todo false de que está dentro de una clase
                                number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, op2Lexeme, true, isOp2Posponed, "pospone", op2Type, false, false, nullptr);
                            }

                            reglaptr = charTercetoId + to_string(number);
                            return;
                        }
                    }
                }
            }

            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    // si estoy dentro de una clase pospongo el checkeo del uso del objeto
                    int number = addTercetWithType("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, op2Lexeme, attributeSymbol->type, op2Type, ""); 
                    reglaptr = charTercetoId + to_string(number);
                    return;
                }else{
                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                    
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                    if (attributeSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{
                        // checkeamos que los tipos sean iguales 
                        checkTypesAsignation(attributeSymbol->type, op2Type); 

                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        int number = addTercet("=", attributeSymbol->lexema, op2Lexeme);
                        
                        reglaptr = charTercetoId + to_string(number);
                        reglatype = attributeSymbol->type;
                    }
                }
            }
        }
    }
};
void newUseObjectAttributeFactorMasMas(string objectName, string attributeName, string scope, string& reglaptr, string& reglatype){
    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(attributeName);

    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };

    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ accesos[0]);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                if(stackClasses->size() > 0){
                    //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                    int number = addTercetPospone("++", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", true, false, stackClasses->top()); 
                    number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, charTercetoId + to_string(number), true, false,"pospone","", true, false, stackClasses->top()); 
                    
                }else{
                    int number = addTercetPospone("++", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", false, false, nullptr); 
                    number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, charTercetoId + to_string(number), true, false,"pospone","", false, false, nullptr); 
                }
                reglaptr = attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                reglatype = "pospone";
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                            if(stackClasses->size() > 0){
                                //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                                int number = addTercetPospone("++", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", true, false, stackClasses->top()); 
                                number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, charTercetoId + to_string(number), true, false,"pospone","", true, false, stackClasses->top()); 
                                
                            }else{
                                int number = addTercetPospone("++", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", false, false, nullptr); 
                                number = addTercetPospone("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, charTercetoId + to_string(number), true, false,"pospone","", false, false, nullptr); 
                            }
                            reglaptr = attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                            reglatype = "pospone";
                            return;
                        }
                    }
                }
            }

            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                string value = "";
                if(attributeSymbol->type == "unsigned int"){
                    value = "1_ui";
                }else if(attributeSymbol->type == "short"){
                    value = "1_s";
                }else if(attributeSymbol->type == "float"){
                    value = "1.0";
                }
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    // si estoy dentro de una clase pospongo el checkeo del uso del objeto
                    int number = addTercetWithType("+", attributeName+":"+classOfObject+":"+objectName+"|"+scope, value, attributeSymbol->type, attributeSymbol->type, attributeSymbol->type); 
                    number = addTercetWithType("=", attributeName+":"+classOfObject+":"+objectName+"|"+scope, charTercetoId + to_string(number), attributeSymbol->type, attributeSymbol->type, attributeSymbol->type); 
                    reglaptr = attributeName+":"+classOfObject+":"+objectName+"|"+scope;
                    reglatype = attributeSymbol->type;
                    return;
                }else{
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                    if (attributeSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{
                        int number = addTercet("+", attributeSymbol->lexema, value);   
                        number = addTercet("=", attributeSymbol->lexema, charTercetoId + to_string(number));           
                    
                        reglaptr = attributeSymbol->lexema;
                        reglatype = attributeSymbol->type;
                    }
                }
            }
        }
    }
};
/**
 * Esta función se llama cuando se detecta una invocación a función sin parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función no tenga parámetros, sino tiramos un error de que falta pasar un parámetro.
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacion(string nombreFuncion, string scope, string& reglaptr){
    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 
    
    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* functionFinded;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        functionFinded = findInvocationInOrderClassInheritanceGeneral(nombreFuncion, scope, tableSymbol, stackClasses->top());
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        functionFinded = tableSymbol->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    };
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam != 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " sin pasarle un parametro, el parametro debe ser de tipo " + functionFinded->typeParam);
        }

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        int number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
/**
 * Esta función se llama cuando se detecta una invocación a función con parámetro.
 * Borramos el símbolo de la tabla general, verificamos si estamos dentro de una declaración de clase o en el main.
 * En base a eso usamos la respectiva tabla de símbolos para buscar el primer símbolo de función.
 * Verificamos que esa función tenga parámetros, sino tiramos un error de que estamos llamando a una función que no requiere de parametros.
 * verificamos que los tipos de los parametros coincidan
 * generamos el terceto de pasaje de parameros
 * Generamos el terceto de call a esa función.
 * 
 * @param nombreFuncion El nombre de la función a invocar.
 * @param scope El alcance de la función.
 * @param reglaptr Puntero a la regla generada.
 */
void newInvocacionWithParam(string nombreFuncion, string scope, string ptrParam, string typeParam, string& reglaptr){

    // borramos el simbolo de la tabla general
    tableSymbol->deleteSymbol(nombreFuncion); 
        
    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* functionFinded;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        functionFinded = findInvocationInOrderClassInheritanceGeneral(nombreFuncion, scope, tableSymbol, stackClasses->top());
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        functionFinded = tableSymbol->getFirstSymbolMatching2(nombreFuncion, "funcion", scope); 
    };
    if(functionFinded == nullptr){
        yyerror("No se encontro declaracion previa de la funcion "+ nombreFuncion);
    }else{
        // verificamos que la función no tenga parametros
        if(functionFinded->cantParam == 0){
            yyerror(" Se esta llamando a la funcion "+ nombreFuncion + " con parametro y la funcion no recibe parametro");
        }else{
            // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
            // verificamos que los tipos de los parametros sean ifuales
            checkTypesParams(functionFinded->typeParam, typeParam); 
        }
            
        /*
            NO SE PORQUE PERO PRESIENTO QUE VA A SERVIR
        */

        // creamos un terceto de pasaje de parametro con su ptr y su tipo
        int number = addTercet("paramReal", ptrParam, typeParam);
        number = addTercet("paramFormal", functionFinded->nameParam, functionFinded->typeParam);

        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        number = addTercet("call", functionFinded->lexema, "");

        reglaptr = charTercetoId + to_string(number);
        } 
};
/**
 * Esta función busca el símbolo de un metoddo que tenga el mismo nombre que el parámetro en el símbolo del a clase, si no está busca en sus herencias.
 * si encuentra el símbololo lo devuelve y sino devuelve nullptr
 *
 * @param key La clave del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return puntero al simbolo del atributo encontrado o nullptr sino lo encuentra
 */
symbol* getFirstSymbolMatchingOfMethod(string attributeName, symbol* classSymbol){
    
    // obtenemos el simbolo que tenga el mismo nombre (solo mira la primer parte del nombre) y el mismo uso
    symbol* symbolAttribute = classSymbol->attributesAndMethodsVector->getElementInTableByFisrtPartAndUse(attributeName, "metodo");
    if(symbolAttribute != nullptr){
        // si encontramos el atributo en la tabla de símbolos de la clase actual devolvemos el símbolo
        return symbolAttribute;
    }else{
        // si no encontramos símbolo en la tabla principal dela clase buscamos en sus herencias de derecha a izquierda ya que si hay sobre escritura buscamos la más reciente
        for (int i=1; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // obtener el símbolo de la clase que hereda
                symbolAttribute = classSymbol->inheritance[i]->getElementInTableByFisrtPartAndUse(attributeName, "metodo");
                if(symbolAttribute != nullptr){
                    return symbolAttribute;
                }
            }
        }
        return nullptr;
    }           
}
void newInvocacionMethod(string objectName, string methodName, string scope, string& reglaptr){
    /*
        Esta funciónse llama cuando se detecta quese quiere invocar un método sin parametro de un objeto
        Verifica que el objeto esté declarado y obtiene su clase.
        Verificar que la clase exista
        Verificar que la clase contenga el método
        Obtener sumando el scope estático del método + nombre objeto + scope actual el lexema del símbolo propio del objeto.
        verificar que el metodo no reciba atributos, sino informarlo
        generar el terceto de call a ese método

    */

    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(methodName);
    
    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };
    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                int number;
                // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                if(stackClasses->size() > 0){
                    //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                    // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                    number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false,"pospone","", true, false, stackClasses->top());                    
                }else{
                    // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                    number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false,"pospone","", false, false, nullptr);
                }

                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            int number;
                            // el objeto se marca como pospuesto por forwarding pero se verifica si está dentro de una clase siendo usado
                            if(stackClasses->size() > 0){
                                //si estoy dentro de una clase, marco que el respectivo objeto está dentro de una clase y le seteo el símbolo de su clase
                                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                                number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false,"pospone","", true, false, stackClasses->top());                    
                            }else{
                                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                                number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false,"pospone","", false, false, nullptr);
                            }

                            reglaptr = charTercetoId + to_string(number);
                            return;
                        }
                    }
                }
            }


            // si encontramos la clase verificamos que contenga el metodo    
            symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);

            if(methodSymbol == nullptr){
                yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    /// agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                    int number = addTercet("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, "");
                    reglaptr = charTercetoId + to_string(number);
                    return;
                }else{
                    // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                    // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                    
                    methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + accesos[0], "metodo", scope);
                    if (methodSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{
                        // verificamos que el metodo no tenga parametros
                        if(methodSymbol->cantParam != 0){
                            yyerror("Se esta llamando al metodo "+ methodName + " del objeto " + accesos[0] + " sin pasarle un parametro, el parametro debe ser de tipo " + methodSymbol->typeParam);
                        }
                        // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos
                        int number = addTercet("call", methodSymbol->lexema, "");

                        reglaptr = charTercetoId + to_string(number);
                    }
                }
            }
        }
    }

};
void printAtribute(string objectName, string attributeName, string scope){
    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(attributeName);
    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };

    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ accesos[0]);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // si se debe posponer un objeto verificamos si está dentro de una clase
                // porque luego la búsqueda se debe hacer desde la clase donde se encuentra hacia sus herecnias y finalmente al scope general
                if(stackClasses->size() > 0){
                    int number = addTercetPospone("printIdentificador", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", true, false, stackClasses->top()); 
                }else{
                    int number = addTercetPospone("printIdentificador", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", false, false, nullptr); 
                }    
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            // si se debe posponer un objeto verificamos si está dentro de una clase
                            // porque luego la búsqueda se debe hacer desde la clase donde se encuentra hacia sus herecnias y finalmente al scope general
                            if(stackClasses->size() > 0){
                                int number = addTercetPospone("printIdentificador", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", true, false, stackClasses->top()); 
                            }else{
                                int number = addTercetPospone("printIdentificador", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "", true, false, "pospone", "", false, false, nullptr); 
                            }    
                            return;
                        }
                    }
                }
            }

            // si encontramos la clase verificamos que contenga el atributo     
            symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

            if(attributeSymbol == nullptr){
                yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    // si estoy dentro de una clase pospongo el checkeo del uso del objeto
                    int number = addTercet("printIdentificador", attributeName+":"+classOfObject+":"+objectName+"|"+scope, "");
                    return;
                }else{
                    attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                    if (attributeSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{
                        addTercet("printIdentificador", attributeSymbol->lexema, "");
                    }
                }
            }
        }
    }
}
void newInvocacionMethodWithParam(string objectName, string methodName, string scope, string ptrParam, string typeParam, string& reglaptr){
    /*
        Esta funciónse llama cuando se detecta quese quiere invocar un método con parametro de un objeto 
        Verifica que el objeto esté declarado y obtiene su clase.
        Verificar que la clase exista
        Verificar que la clase contenga el método
        Obtener sumando el scope estático del método + nombre objeto + scope actual el lexema del símbolo propio del objeto.
        verificar que el metodo no reciba atributos, sino informarlo
        generar el terceto de call a ese método

    */

    vector<string> accesos = getAccesoFromString(objectName);
    
    tableSymbol->deleteSymbol(accesos[0]);
    tableSymbol->deleteSymbol(methodName);
   
    //buscamos si existe un objeto con el mismo nombre al alcance
    symbol* objectSymbol;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, stackClasses->top(), "objeto", "objeto");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
    };
    symbol* classSymbol = nullptr;
    string classOfObject;
    if(objectSymbol == nullptr){
            yyerror("No se encontro declaracion previa del objeto "+ objectName);
    }else{
        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
        classOfObject = objectSymbol->classOfSymbol;
        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
        if(classSymbol == nullptr){
            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
            yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
        }else{
            // si el objeto fue pospuesto por forwarding entonces el checkeo del uso se pospone también
            if(objectSymbol->posponeForForwarding){
                // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                // como tiene un parametro se lo ponemoscomo segundo argumetno para suposterior uso
                // creamos un terceto de pasaje de parametro con su ptr y su tipo
                int number = addTercet("paramReal", ptrParam, typeParam);
                number = addTercet("paramFormal", "", "");
                if (stackClasses->size() > 0){
                    number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, typeParam+":"+ptrParam, true, false,"pospone","", true, false, stackClasses->top());
                }else{
                    number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, typeParam+":"+ptrParam, true, false,"pospone","", false, false, nullptr);
                }
                reglaptr = charTercetoId + to_string(number);
                return;
            }
            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
            for(int i = 1; i < accesos.size(); i++){
                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                if(objectSymbol == nullptr){
                    yyerror("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                    return;
                }else{
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerror("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                        return;
                    }else{
                        tableSymbol->deleteSymbol(accesos[i]);
                        if(objectSymbol->posponeForForwarding){
                            // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                            // como tiene un parametro se lo ponemoscomo segundo argumetno para suposterior uso
                            // creamos un terceto de pasaje de parametro con su ptr y su tipo
                            int number = addTercet("paramReal", ptrParam, typeParam);
                            number = addTercet("paramFormal", "", "");
                            if (stackClasses->size() > 0){
                                number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, typeParam+":"+ptrParam, true, false,"pospone","", true, false, stackClasses->top());
                            }else{
                                number = addTercetPospone("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, typeParam+":"+ptrParam, true, false,"pospone","", false, false, nullptr);
                            }
                            reglaptr = charTercetoId + to_string(number);
                            return;
                        }
                    }
                }
            }
            

            // si encontramos la clase verificamos que contenga el metodo    
            symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);
            /*
                Esta función debe buscar en la tabla de la clase si existe elmétodo y sino buscarlo en las clases heredadas
                devuelve el puntero a ese metodo
            */

            if(methodSymbol == nullptr){
                yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
            }else{
                // verificamos que el metodo tenga parametros
                if(methodSymbol->cantParam == 0){
                    yyerror("Se esta llamando al metodo "+ methodName + " con parametro y la funcion no recibe parametro");
                }else{
                    // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
                    // verificamos que los tipos de los parametros sean iguales
                    checkTypesParams(methodSymbol->typeParam, typeParam); 
                }
                // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                // si no está dentro de una declaración de clase buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                // si está dentro de una clase dejamos el atributo estático para que al instanciar las funciones o métodos se agregue el objeto
                if(stackClasses->size() > 0){
                    // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos pero indicando que el símbolo está pospuesto
                    // como tiene un parametro se lo ponemoscomo segundo argumetno para suposterior uso
                    // creamos un terceto de pasaje de parametro con su ptr y su tipo
                    int number = addTercet("paramReal", ptrParam, typeParam);
                    number = addTercet("paramFormal", "", methodSymbol->typeParam);
                    number = addTercet("call", methodName+":"+classOfObject+":"+objectName+"|"+scope, typeParam+":"+ptrParam);

                    reglaptr = charTercetoId + to_string(number);
                    return;
                }else{
                    // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                    // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                    methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + accesos[0], "metodo", scope);
                    if (methodSymbol == nullptr){
                        yyerror("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                    }else{

                        // creamos un terceto de pasaje de parametro con su ptr y su tipo
                        int number = addTercet("paramReal", ptrParam, typeParam);
                        number = addTercet("paramFormal", methodSymbol->nameParam, methodSymbol->typeParam);

                        // agregamos el terceto la llamada al metodo en la respectiva tabla de tercetos
                        number = addTercet("call", methodSymbol->lexema, "");

                        reglaptr = charTercetoId + to_string(number);
                    }
                }                
            }
        }
    }
};
void printIdentificador(string _lexema, string _scope){
    // queres imprimir una variable, 
    // la borramos de la tabla general
    // la buscamos en la tabla de símbolos de la clase actual

    tableSymbol->deleteSymbol(_lexema);         // eliminamos el simbolo de la tabla general

    //buscamos si existe una variable con el mismo nombre al alcance
    symbol* identificador;
    if(stackClasses->size() > 0){
        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
        identificador = findElementInOrderClassInheritanceGeneral(_lexema, _scope, tableSymbol, stackClasses->top(),"var", "atributo");
    }else{
        // sino estoy dentro de una clase busco en la tabla general
        identificador = tableSymbol->getFirstSymbolMatching2(_lexema, "var", _scope); 
    };

    if (identificador == nullptr){
        yyerror("No se encontro declaracion previa de la variable "+ _lexema);
    }else{
        // agregamos el terceto de asignación en la respectiva tabla de tercetos
        int number = addTercet("printIdentificador", identificador->lexema, "");
    }
}; 
void addTercetReturn(string& reglaptr){
        int number = addTercet("return","","");        

        reglaptr = charTercetoId + to_string(number);
};
void addObjectToClass(string objectName, string scope, string className, string classActual){
    // Obtememos el simbolo viejo de la clase y el objeto y los borramos
    // buscamos si existe la clase de este objeto, sino lanzamos ese error
    // buscamos si existe la clase en donde queremos poner el objeto sino no hacemos nada
    // agregamos el objeto a la clase

    tableSymbol->deleteSymbol(objectName);         // eliminamos el simbolo de la tabla general
    tableSymbol->deleteSymbol(className);

    // operamos sobre la tabla de símbolos de la clase
    TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = tsClass->getDiffOffScope2(objectName, "objeto", scope); 
            
    if(diff == 0){
            yyerror("Redeclaracion de objeto en la misma clase");
    }else{
            // creamos el nuevo símbolo para el atributo
            symbol* newObject = new symbol(objectName+scope, "", "", "objeto");
            /*
                    ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
            */

            // Marcamos a la clase que pertenece el atributo
            newObject->classOfSymbol = className;

            // agregamos el nuevo símbolo al vector de simbolos de la clase        
            tsClass->insert(newObject);

            // obtenemos el símbolo de la clase del objeto
            symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(className, "clase", ":main"); // obtenemos el símbolo de la clase del objeto
            
            // verificamos si la clase es una forward declaration 
            // de ser forward el objeto también se convierte en forwarded para luego isntanciarlo cuando la clase se declare
            // ya que si es asi no podemos agregar sus atributos y métodos
            if(matchingClass->forwarded){
                newObject->posponeForForwarding = true;    
                return;
            }
    }        
}
void accessObjects(string _accesosEfectuados, string _nuevoAcceso, string& _reglaptr){
    _reglaptr = _accesosEfectuados + ":" + _nuevoAcceso;
    accesosEfectuados = _accesosEfectuados + ":" + _nuevoAcceso;
};
void accessObject(string _nuevoAcceso, string& _reglaptr){
    _reglaptr = _nuevoAcceso;
    accesosEfectuados = _nuevoAcceso;
};
void verifyAllClassForwardedAreDeclared(){
        // esta función se encarga de recorrer la tabla de símbolo y por cada clase verifica que no este forwardeada

        // recorremos la tabla de símbolos
        for(const auto& pair : tableSymbol->getSymbolTable()){
                symbol* sm = pair.second;
                // verificamos que sea una clase
                if(sm->uso == "clase"){
                        // verificamos que no este forwardeada
                        if(sm->forwarded){
                                yyerror("La clase " + sm->lexema + " esta forwardeada y no se completó su declaración");
                        }
                }
        }
};
void instanciatePosponeObjectForForwarding(){
        // esta función se encarga de recorrer la tabla de símbolo y por cada objeto que tenga posponeForForwarding en true, 
        // agrega sus atributos y métodos a la tabla de símbolos general y setea posponeForForwarding en false

        // recorremos la tabla de símbolos
        for(const auto& pair : tableSymbol->getSymbolTable()){
                symbol* sm = pair.second;
                // verificamos que sea una clase
                if(sm->uso == "objeto"){
                        // verificamos que no este forwardeada
                        if(sm->posponeForForwarding){
                                // agregamos los atributos y métodos a la tabla de símbolos general
                                symbol* symbolClass = tableSymbol->getFirstSymbolMatching2(sm->classOfSymbol, "clase", ":main");
                                addObjectForwarded(sm, symbolClass);
                        }
                }
        } 
};
void checkTercetsPosponeAreCorrect(Tercets* ts){
    // recorrer los tercetos del main y buscamos que terceto tiene algún pospone activado
    // sabemos que si es un call es a un étodo del primer argumento y debemos verificar que exista y setear correctamente el argumento (por el scope)
    // si es una operación aritmétca es una tributo de clase y debemos ver cual de los argumetnos está pospuesto, buscar ese atributo y checkear tipos
    int numberTercet = -1;
    for (Tercet* tercet : ts->getTercets()){
        numberTercet++;
        // tercet->print();

        if(tercet->getOp() == "printIdentificador"){
            if(tercet->arg1Pospone ){
                // es una impresión de atributo
                
                // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                size_t posSeparador = tercet->getArg1().find("|");
                string primeraParte = tercet->getArg1().substr(0, posSeparador);
                string scope = tercet->getArg1().substr(posSeparador + 1);

                size_t firstPos = primeraParte.find(":");
                size_t secondPos = primeraParte.find(":", firstPos + 1);

                string attributeName = primeraParte.substr(0, firstPos);
                string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                string objectName = primeraParte.substr(secondPos+1, primeraParte.size());
                
                vector<string> accesos = getAccesoFromString(objectName);
                //buscamos si existe una variable con el mismo nombre al alcance
                symbol* objectSymbol;
                if(tercet->isarg1anObjectInsideClass){
                    //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                    objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                }else{
                    // Verifica que el objeto este declarado y obtiene su clase
                    objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                };
                symbol* classSymbol = nullptr;
                if(objectSymbol == nullptr){
                        yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                }else{
                    // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                    }else{
                        
                        // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                        for(int i = 1; i < accesos.size(); i++){
                            objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                            if(objectSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                return;
                            }else{
                                tableSymbol->deleteSymbol(accesos[i]);
                                classOfObject = objectSymbol->classOfSymbol;
                                classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                if(classSymbol == nullptr){
                                    // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                    yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                    return;
                                }
                            }
                        }



                        // si encontramos la clase verificamos que contenga el metodo    
                        symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);
                        if(attributeSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                        }else{
                            // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                            // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                            if(tercet->isarg1anObjectInsideClass){
                                //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + ts->objectName, "atributo", scope);
                            }else{
                                // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                            }
                            if (attributeSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                            }else{
                                // seteamos el nuevo lexema del simbolo
                                tercet->setArg1(attributeSymbol->lexema);
                            }
                        }
                    }
                }
            }
        }
        if(tercet->getOp() == "call"){
            if(tercet->arg1Pospone ){
                // es un llamado a método
                
                // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                size_t posSeparador = tercet->getArg1().find("|");
                string primeraParte = tercet->getArg1().substr(0, posSeparador);
                string scope = tercet->getArg1().substr(posSeparador + 1);

                size_t firstPos = primeraParte.find(":");
                size_t secondPos = primeraParte.find(":", firstPos + 1);

                string methodName = primeraParte.substr(0, firstPos);
                string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                string objectName = primeraParte.substr(secondPos+1, primeraParte.size());
                
                vector<string> accesos = getAccesoFromString(objectName);
   
                //buscamos si existe una variable con el mismo nombre al alcance
                symbol* objectSymbol;
                if(tercet->isarg1anObjectInsideClass){
                    //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                    objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                }else{
                    // Verifica que el objeto este declarado y obtiene su clase
                    objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                };
                symbol* classSymbol = nullptr;
                if(objectSymbol == nullptr){
                        yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                }else{
                    // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                    }else{
                        
                        // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                        for(int i = 1; i < accesos.size(); i++){
                            objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                            if(objectSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                return;
                            }else{
                                tableSymbol->deleteSymbol(accesos[i]);
                                classOfObject = objectSymbol->classOfSymbol;
                                classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                if(classSymbol == nullptr){
                                    // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                    yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                    return;
                                }
                            }
                        }



                        // si encontramos la clase verificamos que contenga el metodo    
                        symbol* methodSymbol = getFirstSymbolMatchingOfMethod(methodName, classSymbol);
                        if(methodSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                        }else{
                            // encontramos el metodo en la clase y obtenemos el scope estático del metodo, 
                            // buscamos en la tabla general el scope estático + el nombre del objeto + el scope actual y obtenemos el simbolo del primer metodo que coincida
                            if(tercet->isarg1anObjectInsideClass){
                                //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" +  ts->objectName, "metodo", scope);
                            }else{
                                // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                methodSymbol = tableSymbol->getFirstSymbolMatching2(methodSymbol->lexema + ":" + accesos[0], "metodo", scope);
                            }
                            if (methodSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del metodo "+ methodName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                            }else{
                            // verificamos que el metodo tenga parametros
                                if(tercet->getArg2() != ""){
                                    // el método tiene parametros
                                    string typeParam = tercet->getArg2().substr(0, tercet->getArg2().find(":"));
                                    string ptrParam = tercet->getArg2().substr(tercet->getArg2().find(":")+1, tercet->getArg2().size());
                                    if(methodSymbol->cantParam == 0){
                                        yyerrorFin("Se esta llamando al metodo "+ methodName + " con parametro y el metodo no recibe parametro");
                                    }else{
                                        // esto va acá dentro para que no tire dos errores si no recibe paramatro la función
                                        // verificamos que los tipos de los parametros sean iguales
                                        checkTypesParamsFin(methodSymbol->typeParam, typeParam); 
                                    }

                                    // reemplazamos los tercetos existentes de los parametros por los correctos
                                    Tercet *t1 = new Tercet("paramReal", ptrParam, typeParam); 
                                    Tercet *t2 = new Tercet("paramFormal", methodSymbol->nameParam, methodSymbol->typeParam); 
                                    ts->replace(numberTercet-2, t1);
                                    ts->replace(numberTercet-1, t2);

                                }else{
                                    // el método no tiene parametros
                                    if(methodSymbol->cantParam != 0){
                                        yyerrorFin("Se esta llamando al metodo "+ methodName + " sin parametro y el metodo recibe parametro");
                                    }
                                }
                                Tercet *tcall = new Tercet("call", methodSymbol->lexema, "");
                                ts->replace(numberTercet, tcall);
                            }
                        }
                    }
                }
            }
            
        }
        if(tercet->getOp() == "tof"){
            // estamos ante una operación de tof
            // verificamos que el atributo del segundo argumento exista y atualzamos el terceto
            symbol* attributeSymbol2;
            bool isErrorInAttribute = false;
            if (tercet->arg2Pospone){
                if(tercet->getArg2()[0] == charTercetoId){
                    // si e sun terceto guardamos su tipo en el terceto actual
                    tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    size_t posSeparador = tercet->getArg2().find("|");
                    string primeraParte = tercet->getArg2().substr(0, posSeparador);
                    string scope = tercet->getArg2().substr(posSeparador + 1);

                    size_t firstPos = primeraParte.find(":");
                    size_t secondPos = primeraParte.find(":", firstPos + 1);

                    string attributeName = primeraParte.substr(0, firstPos);
                    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                    vector<string> accesos = getAccesoFromString(objectName);
    
                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol;
                    if(tercet->isarg2anObjectInsideClass){
                        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                    }else{
                        // Verifica que el objeto este declarado y obtiene su clase
                        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                    };
                    symbol* classSymbol = nullptr;
            
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        classOfObject = objectSymbol->classOfSymbol;
                        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            
                            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                            for(int i = 1; i < accesos.size(); i++){
                                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                                if(objectSymbol == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    tableSymbol->deleteSymbol(accesos[i]);
                                    classOfObject = objectSymbol->classOfSymbol;
                                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                    if(classSymbol == nullptr){
                                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                            if(!isErrorInAttribute){
                                // si encontramos la clase verificamos que contenga el atributo     
                                attributeSymbol2 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                                if(attributeSymbol2 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                    isErrorInAttribute = true;
                                }else{
                                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                    if(tercet->isarg2anObjectInsideClass){
                                        //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + ts->objectName, "atributo", scope);
                                    }else{
                                        // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + accesos[0], "atributo", scope);
                                    }
                                    if (attributeSymbol2 == nullptr){
                                        yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!isErrorInAttribute){
                if (!tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = "float";
                    }else{
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        Tercet * tasig = ts->get(numberTercet);
                        tasig->setArg2(attributeSymbol2->lexema);
                        tasig->type2 = attributeSymbol2->type;
                        tasig->arg2Pospone = false;
                        tasig->typeTercet = "float";
                    }
                }
            }
        }
        if(tercet->getOp() == "++"){
            // estamos ante una operación de ++
            // verificamos que el atributo exista y atualzamosel terceto
            if(tercet->arg1Pospone ){
                // es un llamado a método
                
                // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                size_t posSeparador = tercet->getArg1().find("|");
                string primeraParte = tercet->getArg1().substr(0, posSeparador);
                string scope = tercet->getArg1().substr(posSeparador + 1);

                size_t firstPos = primeraParte.find(":");
                size_t secondPos = primeraParte.find(":", firstPos + 1);

                string attributeName = primeraParte.substr(0, firstPos);
                string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                
                vector<string> accesos = getAccesoFromString(objectName);
   

                //buscamos si existe un objeto con el mismo nombre al alcance
                symbol* objectSymbol;
                if(tercet->isarg1anObjectInsideClass){
                    //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                    objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass, "objeto", "objeto");
                }else{
                    // sino estoy dentro de una clase busco en la tabla general
                    objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope); 
                };
                symbol* classSymbol = nullptr;
        
                if(objectSymbol == nullptr){
                        yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                }else{
                    // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                    classOfObject = objectSymbol->classOfSymbol;
                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                    if(classSymbol == nullptr){
                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                    }else{
                        
                        // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                        for(int i = 1; i < accesos.size(); i++){
                            objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                            if(objectSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                return;
                            }else{
                                tableSymbol->deleteSymbol(accesos[i]);
                                classOfObject = objectSymbol->classOfSymbol;
                                classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                if(classSymbol == nullptr){
                                    // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                    yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                    return;
                                }
                            }
                        }

                        // si encontramos la clase verificamos que contenga el atributo     
                        symbol* attributeSymbol = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                        if(attributeSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                        }else{
                            // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                            // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                            if(tercet->isarg1anObjectInsideClass){
                                //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + ts->objectName, "atributo", scope);
                            }else{
                                // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                attributeSymbol = tableSymbol->getFirstSymbolMatching2(attributeSymbol->lexema + ":" + accesos[0], "atributo", scope);
                            }
                            if (attributeSymbol == nullptr){
                                yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                            }else{
                                string value = "";
                                if(attributeSymbol->type == "unsigned int"){
                                    value = "1_ui";
                                }else if(attributeSymbol->type == "short"){
                                    value = "1_s";
                                }else if(attributeSymbol->type == "float"){
                                    value = "1.0";
                                }
                                Tercet *tcall = new Tercet("+", attributeSymbol->lexema, value);
                                tcall->typeTercet = attributeSymbol->type; // le seteamos el tipo al terceto para luego poder operar con estos
                                tcall->type1 = attributeSymbol->type;
                                tcall->type2 = attributeSymbol->type;
                                ts->replace(numberTercet, tcall);

                            }
                        }
                    }
                }
            }
        }   
        if(tercet->getOp() == "="){
            // detectamos una asignación
            // verificamos que alguno de los dos argumentos sea pospone
            symbol* attributeSymbol1;
            symbol* attributeSymbol2;
            bool isErrorInAttribute = false;
            if ( tercet->arg1Pospone){
                if(tercet->getArg1()[0] == charTercetoId){
                    tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    size_t posSeparador = tercet->getArg1().find("|");
                    string primeraParte = tercet->getArg1().substr(0, posSeparador);
                    string scope = tercet->getArg1().substr(posSeparador + 1);

                    size_t firstPos = primeraParte.find(":");
                    size_t secondPos = primeraParte.find(":", firstPos + 1);

                    string attributeName = primeraParte.substr(0, firstPos);
                    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                    
                    vector<string> accesos = getAccesoFromString(objectName);
                    
                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol;
                    if(tercet->isarg1anObjectInsideClass){
                        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                    }else{
                        // Verifica que el objeto este declarado y obtiene su clase
                        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                    };
                    symbol* classSymbol = nullptr;
            
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        classOfObject = objectSymbol->classOfSymbol;
                        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            
                            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                            for(int i = 1; i < accesos.size(); i++){
                                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                                if(objectSymbol == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    tableSymbol->deleteSymbol(accesos[i]);
                                    classOfObject = objectSymbol->classOfSymbol;
                                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                    if(classSymbol == nullptr){
                                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                            if(!isErrorInAttribute){
                                // si encontramos la clase verificamos que contenga el atributo     
                                attributeSymbol1 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                                if(attributeSymbol1 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                    if(tercet->isarg1anObjectInsideClass){
                                        //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                        attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + ts->objectName, "atributo", scope);
                                    }else{
                                        // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                        attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + accesos[0], "atributo", scope);
                                    }
                                    if (attributeSymbol1 == nullptr){
                                        yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ( tercet->arg2Pospone){
                if(tercet->getArg2()[0] == charTercetoId){
                    tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    size_t posSeparador = tercet->getArg2().find("|");
                    string primeraParte = tercet->getArg2().substr(0, posSeparador);
                    string scope = tercet->getArg2().substr(posSeparador + 1);

                    size_t firstPos = primeraParte.find(":");
                    size_t secondPos = primeraParte.find(":", firstPos + 1);

                    string attributeName = primeraParte.substr(0, firstPos);
                    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                    vector<string> accesos = getAccesoFromString(objectName);
    
                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol;
                    if(tercet->isarg2anObjectInsideClass){
                        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                    }else{
                        // Verifica que el objeto este declarado y obtiene su clase
                        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                    };
                    symbol* classSymbol = nullptr;
            
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        classOfObject = objectSymbol->classOfSymbol;
                        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            
                            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                            for(int i = 1; i < accesos.size(); i++){
                                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                                if(objectSymbol == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    tableSymbol->deleteSymbol(accesos[i]);
                                    classOfObject = objectSymbol->classOfSymbol;
                                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                    if(classSymbol == nullptr){
                                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                            if(!isErrorInAttribute){
                                // si encontramos la clase verificamos que contenga el atributo     
                                attributeSymbol2 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                                if(attributeSymbol2 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                    if(tercet->isarg2anObjectInsideClass){
                                        //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + ts->objectName, "atributo", scope);
                                    }else{
                                        // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + accesos[0], "atributo", scope);
                                    }
                                    if (attributeSymbol2 == nullptr){
                                        yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!isErrorInAttribute){
                if (tercet->arg1Pospone && !tercet->arg2Pospone){
                    // checkeamos que los tipos sean iguales 
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                    }
                    checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                    // agregamos el terceto de asignación en la respectiva tabla de tercetos
                    tercet->setArg1(attributeSymbol1->lexema);
                    tercet->type1 = attributeSymbol1->type;
                    tercet->arg1Pospone = false;
                }
                if (!tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = tercet->type2;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 

                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol2->type;
                    }
                }
                if (tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;

                    }else{
                        // checkeamos que los tipos sean iguales 
                        checkTypesAsignationFin(attributeSymbol1->type, attributeSymbol2->type);
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                    }
                }
            }
                
        }
        if(tercet->getOp() == "+" || tercet->getOp() == "-" || tercet->getOp() == "*" || tercet->getOp() == "/"){
            // encontramos un terceto de operación
            // verificamos que alguno de los dos argumentos sea pospone
            symbol* attributeSymbol1;
            symbol* attributeSymbol2;
            bool isErrorInAttribute = false;
            if ( tercet->arg1Pospone){
                if(tercet->getArg1()[0] == charTercetoId){
                    tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    size_t posSeparador = tercet->getArg1().find("|");
                    string primeraParte = tercet->getArg1().substr(0, posSeparador);
                    string scope = tercet->getArg1().substr(posSeparador + 1);

                    size_t firstPos = primeraParte.find(":");
                    size_t secondPos = primeraParte.find(":", firstPos + 1);

                    string attributeName = primeraParte.substr(0, firstPos);
                    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                    
                    vector<string> accesos = getAccesoFromString(objectName);
    
                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol;
                    if(tercet->isarg1anObjectInsideClass){
                        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                    }else{
                        // Verifica que el objeto este declarado y obtiene su clase
                        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                    };
                    symbol* classSymbol = nullptr;
            
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        classOfObject = objectSymbol->classOfSymbol;
                        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            
                            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                            for(int i = 1; i < accesos.size(); i++){
                                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                                if(objectSymbol == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    tableSymbol->deleteSymbol(accesos[i]);
                                    classOfObject = objectSymbol->classOfSymbol;
                                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                    if(classSymbol == nullptr){
                                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                            if(!isErrorInAttribute){
                                // si encontramos la clase verificamos que contenga el atributo     
                                attributeSymbol1 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                                if(attributeSymbol1 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                    if(tercet->isarg1anObjectInsideClass){
                                        //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                        attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + ts->objectName, "atributo", scope);
                                    }else{
                                        // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                        attributeSymbol1 = tableSymbol->getFirstSymbolMatching2(attributeSymbol1->lexema + ":" + accesos[0], "atributo", scope);
                                    }
                                    if (attributeSymbol1 == nullptr){
                                        yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ( tercet->arg2Pospone){
                if(tercet->getArg2()[0] == charTercetoId){
                    tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                }else{
                    // es un llamado a método
                    // obtenemos cada uno de los elementos del argumento para verificar si es correcto el uso del objeto
                    size_t posSeparador = tercet->getArg2().find("|");
                    string primeraParte = tercet->getArg2().substr(0, posSeparador);
                    string scope = tercet->getArg2().substr(posSeparador + 1);

                    size_t firstPos = primeraParte.find(":");
                    size_t secondPos = primeraParte.find(":", firstPos + 1);

                    string attributeName = primeraParte.substr(0, firstPos);
                    string classOfObject = primeraParte.substr(firstPos+1, secondPos - firstPos - 1);
                    string objectName = primeraParte.substr(secondPos+1, primeraParte.size());

                    vector<string> accesos = getAccesoFromString(objectName);
    
                    // Verifica que el objeto este declarado y obtiene su clase
                    symbol* objectSymbol;
                    if(tercet->isarg2anObjectInsideClass){
                        //si estoy dentro de una clase, busco primero en la clase, luego de quien herede y luego en la tabla general
                        objectSymbol = findElementInOrderClassInheritanceGeneral(accesos[0], scope, tableSymbol, tercet->classOfObjectInsideClass,"objeto", "objeto");
                    }else{
                        // Verifica que el objeto este declarado y obtiene su clase
                        objectSymbol = tableSymbol->getFirstSymbolMatching2(accesos[0], "objeto", scope);
                    };
                    symbol* classSymbol = nullptr;
            
                    if(objectSymbol == nullptr){
                            yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[0]);
                            isErrorInAttribute = true;
                    }else{
                        // si encontramos el objeto declarado obtenemos su clase y verificamos que exista la clase en el scope ":main" ya que todas las clases van ahí
                        classOfObject = objectSymbol->classOfSymbol;
                        classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                        if(classSymbol == nullptr){
                            // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                            yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                            isErrorInAttribute = true;
                        }else{
                            
                            // ya encontraste el primer objeto en u ámbito alcanzable, ahora buscamos dentro de su clase cada uno de los diferentes acccesos
                            for(int i = 1; i < accesos.size(); i++){
                                objectSymbol = getFirstSymbolMatchingOfObject(accesos[i], classSymbol);
                                if(objectSymbol == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del objeto "+ accesos[i] + " en la clase " + classSymbol->classOfSymbol + " del objeto " + accesos[i-1]); 
                                    isErrorInAttribute = true;
                                }else{
                                    tableSymbol->deleteSymbol(accesos[i]);
                                    classOfObject = objectSymbol->classOfSymbol;
                                    classSymbol = tableSymbol->getFirstSymbolMatching2(classOfObject, "clase", ":main");
                                    if(classSymbol == nullptr){
                                        // nunca debería entrar acá porque si el objeto existe es porque la clase también existe
                                        yyerrorFin("No se encontro declaracion previa de la clase del objeto "+ classOfObject); 
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                            if(!isErrorInAttribute){
                                // si encontramos la clase verificamos que contenga el atributo     
                                attributeSymbol2 = getFirstSymbolMatchingOfAttribute(attributeName, classSymbol);

                                if(attributeSymbol2 == nullptr){
                                    yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                    isErrorInAttribute = true;
                                }else{
                                    // encontramos el atributo en la clase y obtenemos el scope estático del atributo, 
                                    // buscamos en la tabla general el scope estático + le nombre del objeto + el scope actual y obtenemos el simbolo del primer atributo que coincida
                                    if(tercet->isarg2anObjectInsideClass){
                                        //si estamos dentro de una lase debemos buscar el atributo como parte del objeto que insanció la función
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + ts->objectName, "atributo", scope);
                                    }else{
                                        // si no estamos dentro de una clase buscamos el atributo como parte del objeto general
                                        attributeSymbol2 = tableSymbol->getFirstSymbolMatching2(attributeSymbol2->lexema + ":" + accesos[0], "atributo", scope);
                                    }
                                    if (attributeSymbol2 == nullptr){
                                        yyerrorFin("No se encontro declaracion previa del atributo "+ attributeName + " en la clase " + classOfObject + " del objeto " + accesos[accesos.size()-1]);
                                        isErrorInAttribute = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (!isErrorInAttribute){
                if (tercet->arg1Pospone && !tercet->arg2Pospone){
                    if(tercet->getArg1()[0] == charTercetoId){
                        tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg2()[0] == charTercetoId){
                            tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg1Pospone = false;
                        tercet->typeTercet = tercet->type1;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg2()[0] == charTercetoId){
                            tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        Tercet * tasig = ts->get(numberTercet);
                        tasig->setArg1(attributeSymbol1->lexema);
                        tasig->type1 = attributeSymbol1->type;
                        tasig->arg1Pospone = false;
                        tasig->typeTercet = attributeSymbol1->type;
                    }   
                }
                if (!tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, tercet->type2);
                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = tercet->type2;
                    }else{
                        // checkeamos que los tipos sean iguales 
                        if(tercet->getArg1()[0] == charTercetoId){
                            tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        }
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 

                        // agregamos el terceto de asignación en la respectiva tabla de tercetos
                        Tercet * tasig = ts->get(numberTercet);
                        tasig->setArg2(attributeSymbol2->lexema);
                        tasig->type2 = attributeSymbol2->type;
                        tasig->arg2Pospone = false;
                        tasig->typeTercet = attributeSymbol2->type;
                    }
                }
                if (tercet->arg1Pospone && tercet->arg2Pospone){
                    if(tercet->getArg1()[0] == charTercetoId && tercet->getArg2()[0] != charTercetoId){
                        tercet->type1 = ts->get(stoi(tercet->getArg1().substr(1, tercet->getArg1().size())))->typeTercet;
                        checkTypesAsignationFin(tercet->type1, attributeSymbol2->type); 
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol2->type;
                    }
                    if(tercet->getArg1()[0] != charTercetoId && tercet->getArg2()[0] == charTercetoId){
                        tercet->type2 = ts->get(stoi(tercet->getArg2().substr(1, tercet->getArg2().size())))->typeTercet;
                        checkTypesAsignationFin(attributeSymbol1->type, tercet->type2); 
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol1->type;
                    }
                    if(tercet->getArg1()[0] != charTercetoId && tercet->getArg2()[0] != charTercetoId){
                        
                        checkTypesAsignationFin(attributeSymbol1->type, attributeSymbol2->type); 
                        tercet->setArg1(attributeSymbol1->lexema);
                        tercet->setArg2(attributeSymbol2->lexema);
                        tercet->type1 = attributeSymbol1->type;
                        tercet->type2 = attributeSymbol2->type;
                        tercet->arg1Pospone = false;
                        tercet->arg2Pospone = false;
                        tercet->typeTercet = attributeSymbol1->type;
                    }
                }
            }
        }
        
    }
};
void finPrograma(){
        int number = addTercet("FIN", "-", "-");
        verifyAllClassForwardedAreDeclared();
        instanciatePosponeObjectForForwarding();
        checkTercetsPosponeAreCorrect(tableTercets);
        for(functionStack* fs : *(vectorOfFunction->getFunctions())){
            checkTercetsPosponeAreCorrect(fs->ter);
        }
}
#line 4243 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 82 "./gramaticaForGenCod.y"
{ finPrograma();  }
break;
case 2:
#line 83 "./gramaticaForGenCod.y"
{ finPrograma(); }
break;
case 3:
#line 84 "./gramaticaForGenCod.y"
{ finPrograma(); }
break;
case 4:
#line 85 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 86 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 87 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 88 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 90 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 91 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 92 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 93 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 94 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 95 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 96 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 97 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 98 "./gramaticaForGenCod.y"
{ finPrograma(); yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 107 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 23:
#line 108 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 24:
#line 109 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 116 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); }
break;
case 28:
#line 117 "./gramaticaForGenCod.y"
{ finishVariableDeclaration(); }
break;
case 30:
#line 119 "./gramaticaForGenCod.y"
{ }
break;
case 31:
#line 120 "./gramaticaForGenCod.y"
{ }
break;
case 32:
#line 122 "./gramaticaForGenCod.y"
{ setVariableToCheck(); }
break;
case 33:
#line 124 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 34:
#line 125 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 35:
#line 126 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 36:
#line 127 "./gramaticaForGenCod.y"
{ finishFunction(); yyerror("Se detecto la falta del cuerpo de la funcion");}
break;
case 37:
#line 128 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 38:
#line 129 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 39:
#line 130 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 40:
#line 133 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 41:
#line 136 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 42:
#line 137 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 43:
#line 138 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 44:
#line 139 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 45:
#line 140 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 46:
#line 142 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 47:
#line 144 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 48:
#line 146 "./gramaticaForGenCod.y"
{ }
break;
case 51:
#line 149 "./gramaticaForGenCod.y"
{ addObjectToClass(yyvsp[-1]->ptr, tableSymbol->getScope(), yyvsp[-2]->ptr, actualClass); }
break;
case 52:
#line 150 "./gramaticaForGenCod.y"
{ }
break;
case 55:
#line 153 "./gramaticaForGenCod.y"
{ addObjectToClass(yyvsp[-1]->ptr, tableSymbol->getScope(), yyvsp[-2]->ptr, actualClass);}
break;
case 56:
#line 154 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 57:
#line 155 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 58:
#line 156 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); addObjectToClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, actualClass); }
break;
case 59:
#line 157 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 60:
#line 158 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 61:
#line 159 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); addObjectToClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, actualClass);}
break;
case 62:
#line 161 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 63:
#line 162 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 64:
#line 164 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 65:
#line 165 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo del metodo");}
break;
case 66:
#line 166 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta del cuerpo del metodo");}
break;
case 67:
#line 167 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 68:
#line 170 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 69:
#line 171 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 70:
#line 174 "./gramaticaForGenCod.y"
{}
break;
case 71:
#line 176 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 72:
#line 179 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 73:
#line 180 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 74:
#line 183 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 75:
#line 184 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 76:
#line 185 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 77:
#line 188 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 78:
#line 189 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 79:
#line 191 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, actualClass); yyval->type = yyvsp[-1]->type;}
break;
case 80:
#line 192 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 81:
#line 193 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 83:
#line 195 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 84:
#line 196 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 85:
#line 199 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 86:
#line 200 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 87:
#line 201 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 89:
#line 203 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 90:
#line 204 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 91:
#line 207 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de sentencias");}
break;
case 94:
#line 211 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 95:
#line 212 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 96:
#line 213 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 97:
#line 214 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 98:
#line 215 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 100:
#line 217 "./gramaticaForGenCod.y"
{yyerror("Se detecto una falta de coma"); }
break;
case 101:
#line 218 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 102:
#line 219 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 103:
#line 220 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 104:
#line 221 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 110:
#line 229 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 111:
#line 230 "./gramaticaForGenCod.y"
{ printIdentificador(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 112:
#line 231 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 113:
#line 232 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 114:
#line 233 "./gramaticaForGenCod.y"
{ printAtribute(yyvsp[-2]->ptr, yyvsp[0]->ptr,  tableSymbol->getScope()); }
break;
case 116:
#line 237 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 117:
#line 238 "./gramaticaForGenCod.y"
{ newAsignacionObjectAttribute(yyvsp[-4]->ptr, yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr, yyvsp[0]->type, yyvsp[0]->ptr,yyvsp[0]->type, yyvsp[0]->isInsideClass); }
break;
case 118:
#line 239 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 119:
#line 240 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 120:
#line 243 "./gramaticaForGenCod.y"
{ newInvocacionWithParam(yyvsp[-3]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, yyvsp[-1]->type, yyval->ptr); }
break;
case 121:
#line 244 "./gramaticaForGenCod.y"
{ newInvocacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 122:
#line 245 "./gramaticaForGenCod.y"
{ newInvocacionMethodWithParam(yyvsp[-5]->ptr, yyvsp[-3]->ptr, tableSymbol->getScope(), yyvsp[-1]->ptr, yyvsp[-1]->type, yyval->ptr); }
break;
case 123:
#line 246 "./gramaticaForGenCod.y"
{ newInvocacionMethod(yyvsp[-4]->ptr, yyvsp[-2]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 124:
#line 249 "./gramaticaForGenCod.y"
{ accessObjects(yyvsp[-2]->ptr, yyvsp[0]->ptr, yyval->ptr); }
break;
case 125:
#line 250 "./gramaticaForGenCod.y"
{ accessObject(yyvsp[0]->ptr, yyval->ptr); }
break;
case 126:
#line 252 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 127:
#line 253 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 128:
#line 254 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 129:
#line 255 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 130:
#line 256 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 131:
#line 257 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 132:
#line 258 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 133:
#line 261 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 134:
#line 262 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 135:
#line 263 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 136:
#line 266 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 137:
#line 269 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 138:
#line 270 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 139:
#line 271 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 140:
#line 272 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 141:
#line 273 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 143:
#line 277 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 144:
#line 278 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 146:
#line 280 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 149:
#line 287 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 150:
#line 289 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 151:
#line 290 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 152:
#line 293 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 154:
#line 299 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 155:
#line 300 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 156:
#line 301 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 157:
#line 302 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 158:
#line 303 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 159:
#line 304 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 162:
#line 309 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 163:
#line 310 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 164:
#line 311 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 166:
#line 313 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 168:
#line 315 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 171:
#line 319 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 174:
#line 324 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 175:
#line 325 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 176:
#line 326 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 178:
#line 328 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 180:
#line 330 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 182:
#line 332 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 183:
#line 335 "./gramaticaForGenCod.y"
{ addTercetReturn(yyval->ptr); }
break;
case 185:
#line 339 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 187:
#line 341 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 188:
#line 342 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 189:
#line 343 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 190:
#line 344 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 191:
#line 345 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una falta de coma"); }
break;
case 192:
#line 346 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 193:
#line 347 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 194:
#line 350 "./gramaticaForGenCod.y"
{ checkVarInScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 195:
#line 351 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 196:
#line 352 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 197:
#line 353 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 198:
#line 354 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr, yyvsp[-1]->type,yyval->ptr,yyval->type);}
break;
case 199:
#line 355 "./gramaticaForGenCod.y"
{ newUseObjectAttribute(yyvsp[-2]->ptr, yyvsp[0]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type, yyval->isInsideClass); }
break;
case 200:
#line 356 "./gramaticaForGenCod.y"
{ newUseObjectAttributeFactorMasMas(yyvsp[-3]->ptr, yyvsp[-1]->ptr,  tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 201:
#line 357 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 202:
#line 360 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 203:
#line 363 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 204:
#line 364 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 205:
#line 365 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 206:
#line 366 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 207:
#line 367 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 5051 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
