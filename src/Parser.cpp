#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction();
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";
string actualClass = "";
symbol* lastParam;
stack<symbol*>*  stackClasses = new stack<symbol*>();

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 52 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
   10,   10,   10,   10,   10,   10,   11,    8,    8,    8,
    8,    8,   14,   15,   15,   15,   15,   16,   16,   17,
   17,   17,   18,   18,    9,   20,   21,   21,    6,    6,
    6,    7,    7,   19,   19,   19,   19,   19,   12,   12,
   12,   12,   12,   13,   13,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   22,   22,    5,
    5,    5,    5,    5,    5,    5,    5,   24,   24,   25,
   25,   25,   25,   30,   30,   30,   30,   30,   30,   30,
   31,   31,   31,   26,   33,   33,   33,   33,   33,   34,
   34,   34,   34,   34,   36,   38,   37,   29,   29,   40,
   41,   35,   35,   35,   35,   35,   35,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   32,   32,   32,   32,   32,   32,   32,   28,   27,   27,
   27,   27,   27,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,
    7,    7,    6,    8,    8,    7,    2,    4,    3,    2,
    4,    3,    2,    4,    3,    3,    2,    3,    1,    7,
    6,    8,    2,    1,    2,    1,    3,    1,    1,    1,
    1,    3,    1,    2,    1,    1,    0,    4,    2,    1,
    1,    0,    4,    1,    1,    3,    2,    4,    3,    4,
    3,    2,    1,    3,    2,    3,    2,    2,    1,    1,
    1,    1,    2,    2,    2,    2,    1,    3,    5,    4,
    3,    6,    5,    3,    3,    4,    4,    4,    4,    1,
    3,    3,    1,    3,    3,    2,    2,    1,    2,    4,
    3,    3,    2,    3,    1,    1,    1,    4,    3,    1,
    1,    3,    3,    3,    3,    3,    3,    3,    5,    6,
    5,    4,    2,    2,    4,    3,    2,    6,    7,    4,
    6,    7,    6,    5,    3,    3,    5,    4,    3,    2,
    3,    2,    2,    1,    3,    2,    2,    1,    3,    2,
    1,    2,    1,    1,    4,    3,    1,    1,    1,    2,
    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  130,   59,   60,   61,    0,
    0,    6,    0,    0,    0,    0,   19,    0,    0,    0,
   28,   29,   30,    0,    0,    0,   90,   91,   92,   97,
    0,   24,    0,    0,    0,   37,    0,    0,  178,  179,
  181,  177,    0,    0,    0,  174,  173,    0,    0,  113,
    0,    0,   94,   93,   95,   96,    0,    0,    0,    0,
    0,   25,   11,   18,   14,    0,   20,   21,   63,    0,
    0,    0,   58,    0,    0,  101,    0,    0,    0,   71,
    0,    0,  172,    0,    0,  119,    0,  180,  182,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  114,    0,  125,  117,    0,
   42,    0,    0,    0,    0,    8,    0,    3,    0,   16,
    0,    0,   39,    0,    0,    0,  131,  129,  100,    0,
    0,   69,    0,    0,  176,    0,  115,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  111,
  112,  160,  147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  144,  143,  127,  123,    0,    0,  126,   53,
   49,    0,   41,    0,    0,   47,    0,    7,    2,   62,
    0,   38,   57,  128,  103,    0,    0,    0,    0,  175,
    0,    0,    0,    0,  170,  146,    0,    0,    0,  167,
  163,    0,    0,  138,    0,    0,  159,  156,  155,  124,
    0,  122,   46,    0,    0,   45,   66,    0,    0,    0,
  102,    0,    0,   89,    0,    0,   75,   73,  145,  158,
    0,    0,  150,  169,  142,    0,    0,  165,  161,  120,
   48,   44,   64,    0,    0,   33,    0,    0,    0,    0,
   87,    0,   32,    0,   88,  157,  154,    0,    0,  139,
    0,    0,  141,    0,    0,   36,    0,   31,    0,   86,
   35,    0,    0,   81,  151,    0,  153,  148,    0,  140,
   51,    0,    0,   68,   34,    0,   80,  152,  149,    0,
   50,   52,
};
short yydgoto[] = {                                      14,
   15,  103,  224,   18,   19,   20,   70,   21,   22,   23,
   24,   82,  225,   25,  113,  172,  114,  115,  219,   26,
   74,  226,  227,   27,   28,   29,   46,   47,   30,   48,
   49,   50,   51,  106,   52,  107,  167,  168,  127,   31,
  128,  159,
};
short yysindex[] = {                                    903,
   13,  -26,  -40,  -38,  273,    0,    0,    0,    0, -120,
  992,    0,   16,    0, -115, 1434,    0,   16,   16, -234,
    0,    0,    0,   -2,  -79, -194,    0,    0,    0,    0,
  -38,    0,  -16,  219, -178,    0, -159,  -41,    0,    0,
    0,    0,   45,  163,  -81,    0,    0,   -6,  -20,    0,
  928,   53,    0,    0,    0,    0,    0,  -95, -149, 1458,
 1483,    0,    0,    0,    0, 1497,    0,    0,    0,   54,
 -159,  -91,    0,   77,  801,    0,   59,  100,  -21,    0,
 -118,    9,    0, -101,  219,    0,  118,    0,    0,  219,
  219,  219,  219,  476,  678,  219,  219,  219,  219,  123,
  127, 1016, 1695,  145,  146,    0,  777,    0,    0,  -55,
    0,  -48,  -84,  151,  175,    0,  -32,    0, 1521,    0,
  -39,   46,    0,  -70,  -27,  928,    0,    0,    0,  169,
  219,    0,   93,  -64,    0,  125,    0,  100,  100,  100,
  100,  219,  219,  -20,  219,  219,  -20,  100,  100,    0,
    0,    0,    0,  190,  -36, 1654,  191,   16, 1205,  192,
  193,  195,    0,    0,    0,    0,  825,  -25,    0,    0,
    0,  -23,    0,  -48,  203,    0, -142,    0,    0,    0,
  126,    0,    0,    0,    0,  153,  100, 1040,   -5,    0,
  -20,  -20,  -20,  -20,    0,    0,  129,  -33, 1219,    0,
    0,  221, 1064,    0,   16,   16,    0,    0,    0,    0,
   -8,    0,    0,   18,   -1,    0,    0,   31,   50,  954,
    0, 1089, 1668,    0,  164, 1682,    0,    0,    0,    0,
  173, 1113,    0,    0,    0, 1127, 1535,    0,    0,    0,
    0,    0,    0,  171,  -64,    0, 1250,  174, 1668, 1682,
    0,  181,    0, 1154,    0,    0,    0, 1549, 1563,    0,
 1577, 1591,    0,  978,   65,    0,  185,    0, 1682,    0,
    0, 1668, 1682,    0,    0, 1616,    0,    0, 1640,    0,
    0, 1668,  198,    0,    0, 1682,    0,    0,    0,  207,
    0,    0,
};
short yyrindex[] = {                                      0,
    0,   76,    0,    0,    0,    0,    0,    0,    0,    0,
  336,    0,  400,    0,  337,  338,    0,  501,  526,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,    4,    0,    0,
    0,    0,    0,    0,   28,    0,    0,    0,   52,    0,
    0,  853,    0,    0,    0,    0,  130,    0,  339,  344,
  349,    0,    0,    0,    0,  358,    0,    0,    0,  238,
   69,    0,    0,  286,    0,    0,    0,  312,    0,    0,
   91,    0,    0,    0,    0,    0,  879,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  321,
    0,    0,    0,    0,    0,    0,  362,    0,  364,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  551,  587,  619,
  686,    0,    0,   78,    0,    0,  103,  711,  744,    0,
    0,    0,    0,    0,    0,    0, 1328, 1372,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  439,    0,    0,    0,
  188,  348,  373,  425,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1396, 1410,    0,    0,    0,    0,
  472,    0,    0,    0,    0,    0,    0,  128,    0,    0,
    0,  244,    0,    0,    0,  249,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  256,  258,
    0,    0,    0,  259,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  260,    0,
    0,  263,  265,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  269,    0,    0,    0,    0,
    0,    0,
};
short yygindex[] = {                                      0,
   15,  713,    1, 1312, 1357, 1376,    0,    0,    0,    0,
    0,  324, -205,    0,  329,  222, -100,    0,    0,    0,
    0, -148, -123,    0,    0,    0,  399,  407,    0,  814,
  -62,  101,  382,    0,  371,    0,    0,  252,  -42,    0,
  305, -150,
};
#define YYTABLESIZE 1974
short yytable[] = {                                      37,
   17,   44,   58,  171,   84,  199,   45,  197,  108,   63,
  231,   17,  175,   33,  248,   64,   17,  252,  130,   35,
  213,   98,   69,  175,   76,   60,   99,  183,   45,  111,
   66,  144,  147,  123,   34,  214,   94,   71,   95,  131,
  173,  267,  242,   72,  171,  171,  171,  171,  171,  133,
  171,  110,  237,   97,  182,   96,   32,  214,  283,   13,
   64,   17,   73,  171,  169,  171,   64,  134,  183,  183,
  183,  183,  183,  250,  183,  119,  290,  104,   79,  191,
  192,  259,  193,  194,   85,  262,  181,  183,  196,  183,
  244,  230,  110,  109,  110,  110,  110,   80,  251,  129,
  269,   94,  105,   95,  134,  273,  116,  276,  245,   72,
  279,  110,  121,  110,  217,    7,    8,    9,  104,   64,
  104,  104,  104,  286,  169,  270,  171,   72,  171,   40,
  274,   70,    7,    8,    9,  125,   57,  104,  132,  104,
    1,    2,   94,  105,   95,  105,  105,  105,  287,   70,
  183,    3,  183,    4,   67,  135,    5,    6,  137,    7,
    8,    9,  105,   10,  105,  190,  152,   94,   65,   95,
  153,  110,   67,   40,  110,  110,  110,   88,   89,    7,
    8,    9,  110,    7,    8,    9,   65,  107,  163,  164,
    7,    8,    9,  221,  176,   94,  110,   95,  150,  151,
  104,  170,  104,   86,    7,    8,    9,   45,  171,  185,
    7,    8,    9,   45,  177,  188,   36,  180,   38,   39,
   40,   41,   42,  178,   83,  105,  255,  105,  107,  183,
  107,  107,  107,  195,  200,  207,  208,   27,  209,   43,
   38,   39,   40,   41,   42,  212,  216,  107,  220,  107,
  255,  228,   43,  229,   40,   90,   91,   92,   93,  171,
  171,   43,  240,   45,  234,  171,  171,  171,  171,  255,
  171,  171,  171,  255,  241,  171,  171,  171,  171,  171,
  171,   27,  171,  183,  183,   55,  255,  243,  253,  183,
  183,  183,  183,  264,  183,  183,  183,  256,  268,  183,
  183,  183,  183,  183,  183,  271,  183,  110,  110,  285,
  107,   98,  107,  110,  110,  110,  110,   45,  110,  110,
  110,  284,  291,  110,  110,  110,  110,  110,  110,   55,
  110,  292,   56,  104,  104,    5,    9,   12,    4,  104,
  104,  104,  104,   10,  104,  104,  104,  109,   13,  104,
  104,  104,  104,  104,  104,   98,  104,   17,  105,  105,
   54,    1,   27,   15,  105,  105,  105,  105,   83,  105,
  105,  105,  106,   74,  105,  105,  105,  105,  105,  105,
   82,  105,   85,   77,   84,   40,   40,   76,  109,   79,
  109,  109,  109,   78,  122,  215,   40,   40,   40,   26,
  124,   40,   40,   55,   40,   40,   40,  109,   40,  109,
   55,   56,   75,  106,   87,  106,  106,  106,  211,   38,
   39,   40,   41,   42,  108,   38,   39,   40,   41,   42,
  184,    0,  106,    0,  106,    0,   98,    0,   99,    0,
   43,    0,    0,  107,  107,    0,   43,    0,    0,  107,
  107,  107,  107,    0,  107,  107,  107,    0,    0,  107,
  107,  107,  107,  107,  107,  108,  107,  108,  108,  108,
  109,  121,  109,    0,    0,   38,   39,   40,   41,   42,
    0,    0,   99,    0,  108,    0,  108,    0,    0,    0,
    0,    0,    0,   27,   27,  106,   43,  106,    0,    0,
   22,    0,    0,    0,   27,   27,   27,    0,    0,   27,
   27,    0,   27,   27,   27,  121,   27,  142,    0,    0,
   45,    0,  143,    0,   26,   23,    0,    0,    0,   53,
   39,   40,   41,   54,    0,    0,    0,    0,    0,    0,
    0,   55,   55,    0,    0,    0,    0,  108,    0,  108,
    0,    0,   55,   55,   55,    0,    0,   55,   55,    0,
   55,   55,   55,   99,   55,    0,    0,   98,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   98,   98,
   98,    0,    0,   98,   98,    0,   98,   98,   98,    0,
   98,  134,    0,    0,  134,    0,  121,    0,    0,    0,
    0,    0,    0,  109,  109,    0,    0,    0,    0,  109,
  109,  109,  109,    0,  109,  109,  109,    0,    0,  109,
  109,  109,  109,  109,  109,   22,  109,  135,  106,  106,
  135,    0,    0,    0,  106,  106,  106,  106,    0,  106,
  106,  106,    0,    0,  106,  106,  106,  106,  106,  106,
   23,  106,    0,    0,    0,   26,   26,    0,    0,  137,
    0,    0,  137,    0,    0,    0,   26,   26,   26,    0,
    0,   26,   26,  134,   26,   26,   26,    0,   26,    0,
  108,  108,    0,    0,    0,    0,  108,  108,  108,  108,
    0,  108,  108,  108,   99,   99,  108,  108,  108,  108,
  108,  108,    0,  108,    0,   99,   99,   99,    0,  135,
   99,   99,   16,   99,   99,   99,    0,   99,    0,  145,
    0,    0,   45,   61,  146,   62,  136,  121,  121,  136,
   67,   68,   38,   39,   40,   41,   42,    0,  121,  121,
  121,  137,    0,  121,  121,    0,  121,  121,  121,    0,
  121,  132,    0,   43,  132,    0,   22,   22,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   22,   22,   22,
    0,    0,   22,   22,    0,   22,   22,   22,    0,   22,
    0,   23,   23,    0,  133,    0,    0,  133,    0,    0,
    0,    0,   23,   23,   23,    0,    0,   23,   23,    0,
   23,   23,   23,    0,   23,    0,  134,  134,  136,    0,
    0,    0,    0,    0,  156,    0,    0,  134,  134,  134,
   13,    0,  134,  134,  134,  134,  134,  134,    0,  134,
    0,    0,    0,  132,    0,    0,    0,    0,    0,    0,
    0,    0,  135,  135,   13,    0,   77,   78,    0,    0,
    0,    0,    0,  135,  135,  135,    0,    0,  135,  135,
  135,  135,  135,  135,    0,  135,  133,    0,   13,    0,
  201,    0,    0,    0,  137,  137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  137,  137,  137,    0,    0,
  137,  137,  137,  137,  137,  137,  118,  137,  136,  102,
  223,    0,    0,  138,  139,  140,  141,    0,    0,  148,
  149,    0,    0,    0,    0,    0,    0,  238,  239,    0,
    0,    0,  116,  102,    0,    0,    0,    0,    0,    0,
    0,    0,  247,    0,   38,   39,   40,   41,   42,    0,
    0,  136,  136,  186,  187,    0,   13,  102,  261,    0,
    0,    0,  136,  136,  136,   43,    0,  136,  136,  136,
  136,  136,  136,    0,  136,    0,  132,  132,    0,    0,
    0,   13,    0,    0,    0,  118,  282,  132,  132,  132,
    0,    0,  132,  132,  132,  132,  132,  132,    0,  132,
    0,    0,    0,    0,    0,    0,    0,   13,    0,  133,
  133,  116,    0,    0,    0,    0,    0,    0,    0,    0,
  133,  133,  133,    0,    0,  133,  133,  133,  133,  133,
  133,   13,  133,    0,    0,   11,    0,   12,    0,    0,
    0,    0,  100,    2,    0,   13,    0,    0,    0,    0,
    0,    0,    0,    3,  101,    4,  165,  166,    5,    6,
  102,    7,    8,    9,    0,   10,  100,    2,    0,   13,
    0,    0,    0,    0,    0,    0,    0,    3,  101,    4,
    0,    0,    5,    6,  126,    7,    8,    9,  246,   10,
  100,    2,    0,   13,    0,    0,    0,    0,    0,    0,
    0,    3,  101,    4,    0,  210,    5,    6,    0,    7,
    8,    9,  281,   10,    0,    0,    0,  236,  118,  118,
    0,    0,    0,    0,    0,    0,   59,    0,    0,  118,
  118,  118,    0,    0,  118,  118,  118,  118,  118,  118,
    0,  118,  249,    0,  116,  116,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  116,  116,  116,    0,    0,
  116,  116,  116,  116,  116,  116,  258,  116,    1,    2,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,
   13,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,  100,    2,    0,    0,    0,  235,    0,
    0,    0,    0,    0,    3,  101,    4,  272,    0,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    0,    1,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,  222,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,    1,    2,    0,    0,  257,    0,    0,
    0,    0,    0,    0,    3,  222,    4,    1,    2,    5,
    6,  260,    7,    8,    9,    0,   10,    0,    3,    0,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,  154,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,  155,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    1,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,  222,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,  154,
    2,    0,    0,    0,    0,    0,    0,    0,    0,  204,
    3,    0,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,  233,    1,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,  222,    4,    0,    0,
    5,    6,  104,    7,    8,    9,    0,   10,  154,    2,
    0,    0,    0,    0,  266,    0,    0,    0,    0,    3,
    0,    4,  154,    2,    5,    6,  104,    7,    8,    9,
    0,   10,    0,    3,    0,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,    0,  105,    0,    1,
    2,    0,   81,  157,  161,    0,    0,    0,  104,    0,
    3,  222,    4,    0,    0,    5,    6,    0,    7,    8,
    9,  105,   10,  112,    0,    0,    0,  104,    0,    0,
    0,    0,    0,    0,    0,    0,   81,  112,    0,    0,
    0,    0,  168,    0,    0,    0,    0,    0,  158,  162,
  202,    2,    0,  105,    0,    0,    0,  157,    0,    0,
  205,    3,  203,    4,  202,    2,    5,    6,  104,    7,
    8,    9,  105,   10,    0,    3,  232,    4,  174,    0,
    5,    6,    0,    7,    8,    9,  164,   10,    0,  174,
    0,    0,    0,    0,    0,    1,    2,    0,    0,  189,
  205,    0,  158,    0,  157,  206,    3,  222,    4,    0,
  166,    5,    6,  105,    7,    8,    9,    0,   10,    0,
    0,    0,    0,    0,  162,    0,    0,    0,    0,    0,
    0,    0,    0,  157,    0,    0,    0,  157,  205,    0,
    0,    0,  218,    0,    0,  206,    0,    0,   65,  158,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
  205,    0,  157,  205,    0,    0,    0,    0,    0,    0,
    0,    0,  117,  168,  168,    0,    0,  205,  158,    0,
  205,    0,  158,  206,  168,  168,  168,    0,    0,  168,
  168,    0,  168,  168,  168,    0,  168,  118,    0,    0,
    0,    0,    0,    0,  158,  206,    0,  158,  206,    0,
  265,  120,    0,    0,    0,    0,    0,  164,  164,    0,
    0,    0,  206,    0,    0,  206,    0,    0,  164,  164,
  164,    0,    0,  164,  164,  179,  164,  164,  164,    0,
  164,  166,  166,    0,    0,    0,    0,    0,    0,  263,
    0,    0,  166,  166,  166,  162,  162,  166,  166,    0,
  166,  166,  166,  275,  166,    0,  162,  162,  162,    0,
    0,  162,  162,    0,  162,  162,  162,  277,  162,    1,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,  278,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,    1,    2,  280,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    1,    2,
  288,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,    1,    2,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    3,  289,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,    1,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,    0,    4,
  202,    2,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    3,    0,    4,  154,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,  202,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
    0,    4,  154,    2,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    3,    0,    4,  202,    2,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    3,    0,    4,
    0,    0,    5,    6,    0,    7,    8,    9,    0,   10,
    0,  202,    2,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    3,    0,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,  202,    2,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,  154,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,  198,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,  222,    4,    1,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,  254,
    4,    2,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    3,  160,    4,    0,    0,    5,    6,    0,    7,
    8,    9,    0,   10,
};
short yycheck[] = {                                      40,
    0,   40,  123,    0,   46,  156,   45,   44,   51,  125,
   44,   11,  113,   40,  220,   15,   16,  223,   40,   46,
   44,   42,  257,  124,   41,   11,   47,    0,   45,  125,
   16,   94,   95,  125,   61,   59,   43,   40,   45,   61,
  125,  247,   44,  123,   41,   42,   43,   44,   45,   41,
   47,    0,  203,   60,  125,   62,   44,   59,  264,   44,
   60,   61,  257,   60,  107,   62,   66,   59,   41,   42,
   43,   44,   45,  222,   47,   61,  282,    0,  257,  142,
  143,  232,  145,  146,   40,  236,   41,   60,  125,   62,
   41,  125,   41,   41,   43,   44,   45,  257,  222,   41,
  249,   43,    0,   45,   59,  254,  256,  258,   59,   41,
  261,   60,   59,   62,  257,  275,  276,  277,   41,  119,
   43,   44,   45,  272,  167,  249,  123,   59,  125,    0,
  254,   41,  275,  276,  277,   59,  257,   60,  257,   62,
  256,  257,   43,   41,   45,   43,   44,   45,  272,   59,
  123,  267,  125,  269,   41,  257,  272,  273,   41,  275,
  276,  277,   60,  279,   62,   41,   44,   43,   41,   45,
   44,  267,   59,   44,  123,  267,  125,  259,  260,  275,
  276,  277,  267,  275,  276,  277,   59,    0,   44,   44,
  275,  276,  277,   41,   44,   43,  267,   45,   98,   99,
  123,  257,  125,   41,  275,  276,  277,   45,  257,   41,
  275,  276,  277,   45,   40,  123,  257,  257,  257,  258,
  259,  260,  261,  256,  266,  123,  226,  125,   41,  257,
   43,   44,   45,   44,   44,   44,   44,    0,   44,  278,
  257,  258,  259,  260,  261,  271,   44,   60,  123,   62,
  250,  257,  123,  125,  125,  262,  263,  264,  265,  256,
  257,  278,  271,   45,   44,  262,  263,  264,  265,  269,
  267,  268,  269,  273,  257,  272,  273,  274,  275,  276,
  277,   44,  279,  256,  257,    0,  286,  257,  125,  262,
  263,  264,  265,  123,  267,  268,  269,  125,  125,  272,
  273,  274,  275,  276,  277,  125,  279,  256,  257,  125,
  123,    0,  125,  262,  263,  264,  265,   45,  267,  268,
  269,  257,  125,  272,  273,  274,  275,  276,  277,   44,
  279,  125,  257,  256,  257,    0,    0,    0,    0,  262,
  263,  264,  265,    0,  267,  268,  269,    0,    0,  272,
  273,  274,  275,  276,  277,   44,  279,    0,  256,  257,
   40,    0,  125,    0,  262,  263,  264,  265,  125,  267,
  268,  269,    0,  125,  272,  273,  274,  275,  276,  277,
  125,  279,  125,  125,  125,  256,  257,  125,   41,  125,
   43,   44,   45,  125,   71,  174,  267,  268,  269,    0,
   72,  272,  273,    5,  275,  276,  277,   60,  279,   62,
  125,    5,   31,   41,   44,   43,   44,   45,  167,  257,
  258,  259,  260,  261,    0,  257,  258,  259,  260,  261,
  126,   -1,   60,   -1,   62,   -1,  125,   -1,    0,   -1,
  278,   -1,   -1,  256,  257,   -1,  278,   -1,   -1,  262,
  263,  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   41,  279,   43,   44,   45,
  123,    0,  125,   -1,   -1,  257,  258,  259,  260,  261,
   -1,   -1,   44,   -1,   60,   -1,   62,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  123,  278,  125,   -1,   -1,
    0,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   44,  279,   42,   -1,   -1,
   45,   -1,   47,   -1,  125,    0,   -1,   -1,   -1,  257,
  258,  259,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,  125,  279,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   41,   -1,   -1,   44,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,
  263,  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,  125,  279,   41,  256,  257,
   44,   -1,   -1,   -1,  262,  263,  264,  265,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
  125,  279,   -1,   -1,   -1,  256,  257,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  123,  275,  276,  277,   -1,  279,   -1,
  256,  257,   -1,   -1,   -1,   -1,  262,  263,  264,  265,
   -1,  267,  268,  269,  256,  257,  272,  273,  274,  275,
  276,  277,   -1,  279,   -1,  267,  268,  269,   -1,  123,
  272,  273,    0,  275,  276,  277,   -1,  279,   -1,   42,
   -1,   -1,   45,   11,   47,   13,   41,  256,  257,   44,
   18,   19,  257,  258,  259,  260,  261,   -1,  267,  268,
  269,  123,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   41,   -1,  278,   44,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  256,  257,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  256,  257,  123,   -1,
   -1,   -1,   -1,   -1,  102,   -1,   -1,  267,  268,  269,
   44,   -1,  272,  273,  274,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   44,   -1,   33,   34,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  123,   -1,   44,   -1,
  158,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,   44,  279,   85,  123,
  188,   -1,   -1,   90,   91,   92,   93,   -1,   -1,   96,
   97,   -1,   -1,   -1,   -1,   -1,   -1,  205,  206,   -1,
   -1,   -1,   44,  123,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  220,   -1,  257,  258,  259,  260,  261,   -1,
   -1,  256,  257,  130,  131,   -1,   44,  123,  236,   -1,
   -1,   -1,  267,  268,  269,  278,   -1,  272,  273,  274,
  275,  276,  277,   -1,  279,   -1,  256,  257,   -1,   -1,
   -1,   44,   -1,   -1,   -1,  123,  264,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,  256,
  257,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,  274,  275,  276,
  277,   44,  279,   -1,   -1,  123,   -1,  125,   -1,   -1,
   -1,   -1,  256,  257,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  270,  271,  272,  273,
  123,  275,  276,  277,   -1,  279,  256,  257,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,  125,  279,
  256,  257,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,  271,  272,  273,   -1,  275,
  276,  277,  125,  279,   -1,   -1,   -1,   44,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
   -1,  279,   44,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  274,  275,  276,  277,   44,  279,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   44,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  256,  257,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,   44,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  256,  257,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,  125,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,
  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  125,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   51,  275,  276,  277,   -1,  279,  256,  257,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,  267,
   -1,  269,  256,  257,  272,  273,   75,  275,  276,  277,
   -1,  279,   -1,  267,   -1,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,   51,   -1,  256,
  257,   -1,   37,  102,  103,   -1,   -1,   -1,  107,   -1,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   75,  279,   58,   -1,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   71,   72,   -1,   -1,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,  102,  103,
  256,  257,   -1,  107,   -1,   -1,   -1,  156,   -1,   -1,
  159,  267,  268,  269,  256,  257,  272,  273,  167,  275,
  276,  277,  126,  279,   -1,  267,  268,  269,  113,   -1,
  272,  273,   -1,  275,  276,  277,  125,  279,   -1,  124,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,  134,
  199,   -1,  156,   -1,  203,  159,  267,  268,  269,   -1,
  125,  272,  273,  167,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  232,   -1,   -1,   -1,  236,  237,   -1,
   -1,   -1,  177,   -1,   -1,  199,   -1,   -1,  125,  203,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  258,
  259,   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,  256,  257,   -1,   -1,  276,  232,   -1,
  279,   -1,  236,  237,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  125,   -1,   -1,
   -1,   -1,   -1,   -1,  258,  259,   -1,  261,  262,   -1,
  245,  125,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  276,   -1,   -1,  279,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,
  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,  125,  279,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,  125,  279,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  125,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  256,  257,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  267,  125,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
   -1,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  267,   -1,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,  268,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,  257,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 337 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
// Esta funcion dado el acceso a un elemento de la tabla de simbolos elimina el simbolo y lo actualiza con el scope y el tipo de esa variable.
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        // cs:main :main:func3   
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
void finishClass(){
        tableSymbol->deleteScope();
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
void addAtribute(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        int diff = tableSymbol->getDiffOffScope(key + scope, "atributo", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de atributio en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAtribute = new symbol(key+scope, "", type, "atributo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newAtribute);

                /* // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newAtribute; */
        }        
};
void initMethod(string key, string scope ){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        int diff = tableSymbol->getDiffOffScope(key + scope, "metodo", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de método en la misma clase");
        }else{
                // creamos el nuevo símbolo
                symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newMetodo);
                
                // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newMetodo;

                // agregamos un scope
                tableSymbol->addScope(key);

                // creamos una stack para la función y la agregamos al stack con el nombre
                functionStack* fs = new functionStack(key+scope);
                fs->ter = new Tercets();
                stackFunction->push(fs);
                
                cantOfRecursions++;
        }
};
void addParamMetodo(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // verificar que no esté previamente en ese scope en esa tabla de símobolo
        // lo agregamos y setear el tipo del parametro


        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = stackClasses->top()->attributesAndMethodsVector->getDiffOffScope(key+scope, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el misma ambito");
        }else{
                // creamos el nuevo símbolo
                symbol* newparam = new symbol(key+scope, "", type, "var");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newparam);

                lastParam->cantParam++;
                lastParam->typeParam = type;
                lastParam->nameParam = key;
        }
};
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
        // verificamos si está dentro de la declaración de una clase o no

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        symbol* newIdentificador = setNewScope(key, type, scope, "var", ts); 
        reglaptr = newIdentificador->lexema; 
        reglatype = type; 
};
void addObject(string key, string scope, string classType){
        
        // Verificamos que no exista otro objeto con el mismo nombre en el mismo ámbito
        // buscamos la clase más cercana de classType
        // si la encontramos por cada atributo y método creamos un nuevo símbolo con el scope del objeto
        if (classType == "_error"){
                return;
        }
        int diff = tableSymbol->getDiffOffScope(key+scope, "objeto", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe un objeto
                yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
        }else{
                // eliminamos el símbolo viejo y lo agregamos
                symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
                
                symbol* matchingClass = tableSymbol->getFirstSymbolMatching(classType+":main", "clase", scope); // buscamos la primera clase que matchee
                

                for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
                        symbol* sm = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*sm);                
                        size_t firstColonPos = sm->lexema.find(':');
                        string name = sm->lexema.substr(0, firstColonPos);
                        firstColonPos = sm->lexema.find(classType);
                        string scopeInsideClass = sm->lexema.substr(firstColonPos, sm->lexema.size());

                        newSm->lexema = name+scope+":"+scopeInsideClass+":"+key;

                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
        } 
};
void initFunction(string key, string scope){
        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        int diff = tableSymbol->getDiffOffScope(key+scope, "funcion", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "void", scope, "funcion", ts); 
                lastParam = newIdentificador;
        } 
        
        tableSymbol->addScope(key);

        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        cantOfRecursions++;
}
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
}
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
// verifica si existe una variable alcanzable y seteea el $$->ptr con el nuevo scope
void setScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key); 
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;
        }
};
// función cuando se deteta un idnetificador con ++
void newFactorMasMas (string key, string scope, string uso, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key);
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                int number = addTercet("+", symbolFinded->lexema, symbolFinded->lexema);          
                
                reglaptr = charTercetoId + to_string(number);
                reglatype = symbolFinded->type;
        }
}
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        tableSymbol->deleteSymbol(key); 
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                checkTypesAsignation(symbolFinded->type, op2Type); 
                int number = addTercet("=", symbolFinded->lexema, op2Lexeme); 
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(checkTypesOperation(op1type, op2type)){
                reglatype = op1type;
        }else{
                reglatype = "error";
        } 
        
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number); 
}
void newTof(string key, string& reglaptr, string& reglatype){
        int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        reglatype = "float";
}
void condition(string& reglaptr){
        int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void addElse(string& reglaptr){
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void finIf(){
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );
        }
}

void initWhile(){
        addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), "");
}

void finWhile(string & reglaptr) {
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );
        } 
        Tercet *t2 = popTercet(); 
        int number; 
        if(t2!=nullptr){
                int number = addTercet("BI", t2->getArg1(), "");
        } 
        reglaptr = charTercetoId + to_string(number);
}

void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
        checkTypesCompare(op1type, op2type); 
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number);
}

void newVariable(string key, string scope, string type){
        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        int diff = ts->getDiffOffScope(key+scope, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, type, scope,"var", ts);
        } 
};

void initObjectDeclaration(string key, string scope, string& reglaptr){
        // verificar que la clase haya sido declarada y exista
        // borramos el símbolo de la tabla de símbolos general
        
        tableSymbol->deleteSymbol(key);
        
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+":main", "clase", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la clase "+ key);
                actualClass = "_error"; 
        }else{
                reglaptr = key; 
                actualClass = key; 
        }
}       
#line 1311 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 73 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 74 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 75 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 76 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 77 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 78 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 79 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 80 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 82 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 84 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 85 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 86 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 88 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 98 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 99 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 100 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 107 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 29:
#line 109 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 30:
#line 110 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 31:
#line 113 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 32:
#line 114 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 33:
#line 115 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 34:
#line 117 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 35:
#line 118 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 36:
#line 119 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 37:
#line 122 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 38:
#line 125 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 39:
#line 126 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 40:
#line 127 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 41:
#line 128 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 42:
#line 129 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 43:
#line 132 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 44:
#line 134 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 46:
#line 136 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 48:
#line 139 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 49:
#line 140 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 50:
#line 142 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 51:
#line 143 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 52:
#line 144 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 53:
#line 147 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 54:
#line 148 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 55:
#line 151 "./gramaticaForGenCod.y"
{}
break;
case 56:
#line 153 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 57:
#line 156 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 58:
#line 157 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 59:
#line 160 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 60:
#line 161 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 61:
#line 162 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 62:
#line 165 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 63:
#line 166 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 64:
#line 168 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type); yyval->type = yyvsp[-1]->type;}
break;
case 65:
#line 169 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 66:
#line 170 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 68:
#line 172 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 69:
#line 175 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 70:
#line 176 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 71:
#line 177 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 73:
#line 179 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 74:
#line 182 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 77:
#line 186 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 78:
#line 187 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 79:
#line 188 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 80:
#line 189 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 81:
#line 190 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 83:
#line 192 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 84:
#line 193 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 85:
#line 194 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 86:
#line 195 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 87:
#line 196 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 93:
#line 204 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 94:
#line 205 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 95:
#line 206 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 96:
#line 207 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 98:
#line 211 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 104:
#line 222 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 105:
#line 223 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 106:
#line 224 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 107:
#line 225 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 108:
#line 226 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 109:
#line 227 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 110:
#line 228 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 111:
#line 231 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 112:
#line 232 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 113:
#line 233 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 114:
#line 236 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 115:
#line 239 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 116:
#line 240 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 117:
#line 241 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 118:
#line 242 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 119:
#line 243 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 121:
#line 247 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 122:
#line 248 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 124:
#line 250 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 127:
#line 257 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 128:
#line 259 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 129:
#line 260 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 130:
#line 263 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 132:
#line 269 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 133:
#line 270 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 134:
#line 271 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 135:
#line 272 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 136:
#line 273 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 137:
#line 274 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 140:
#line 279 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 141:
#line 280 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 142:
#line 281 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 144:
#line 283 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 146:
#line 285 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 149:
#line 289 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 152:
#line 294 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 153:
#line 295 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 154:
#line 296 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 156:
#line 298 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 158:
#line 300 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 160:
#line 302 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 162:
#line 306 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 164:
#line 308 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 165:
#line 309 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 166:
#line 310 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 167:
#line 311 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 168:
#line 312 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 169:
#line 313 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 170:
#line 314 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 171:
#line 317 "./gramaticaForGenCod.y"
{ setScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 172:
#line 318 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 173:
#line 319 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 174:
#line 320 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 175:
#line 321 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr,yyval->ptr,yyval->type); }
break;
case 177:
#line 323 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 178:
#line 326 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 179:
#line 329 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 180:
#line 330 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 181:
#line 331 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 182:
#line 332 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 183:
#line 333 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 2007 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
