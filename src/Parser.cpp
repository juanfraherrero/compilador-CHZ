#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction();
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";
string actualClass = "";
symbol* lastParam;
stack<symbol*>*  stackClasses = new stack<symbol*>();

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 52 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
   10,   10,   10,   10,   10,   10,   11,    8,    8,    8,
    8,    8,    8,    8,   16,   16,   14,   15,   15,   15,
   15,   17,   17,   18,   18,   18,   19,   19,    9,   21,
   22,   22,    6,    6,    6,    7,    7,   20,   20,   20,
   20,   20,   12,   12,   12,   12,   12,   13,   13,   24,
   24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
   24,   23,   23,    5,    5,    5,    5,    5,    5,    5,
    5,   25,   25,   26,   26,   26,   26,   31,   31,   31,
   31,   31,   31,   31,   32,   32,   32,   27,   34,   34,
   34,   34,   34,   35,   35,   35,   35,   35,   37,   39,
   38,   30,   30,   41,   42,   36,   36,   36,   36,   36,
   36,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   33,   33,   33,   33,   33,   33,
   33,   29,   28,   28,   28,   28,   28,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,
    7,    7,    6,    8,    8,    7,    2,    4,    3,    5,
    4,    2,    4,    3,    2,    1,    2,    4,    3,    3,
    2,    3,    1,    7,    6,    8,    2,    1,    2,    1,
    3,    1,    1,    1,    1,    3,    1,    2,    1,    1,
    0,    4,    2,    1,    1,    0,    4,    1,    1,    3,
    2,    4,    3,    4,    3,    2,    1,    3,    2,    3,
    2,    2,    1,    1,    1,    1,    2,    2,    2,    2,
    1,    3,    5,    4,    3,    6,    5,    3,    3,    4,
    4,    4,    4,    1,    3,    3,    1,    3,    3,    2,
    2,    1,    2,    4,    3,    3,    2,    3,    1,    1,
    1,    4,    3,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    5,    6,    5,    4,    2,    2,    4,    3,
    2,    6,    7,    4,    6,    7,    6,    5,    3,    3,
    5,    4,    3,    2,    3,    2,    2,    1,    3,    2,
    2,    1,    3,    2,    1,    2,    1,    1,    4,    3,
    1,    1,    1,    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  134,   63,   64,   65,    0,
    0,    6,    0,    0,    0,    0,   19,    0,    0,    0,
   28,   29,   30,    0,    0,    0,   94,   95,   96,  101,
    0,   24,    0,    0,    0,   37,    0,    0,  182,  183,
  185,  181,    0,    0,    0,  178,  177,    0,    0,  117,
    0,    0,   98,   97,   99,  100,    0,    0,    0,    0,
    0,   25,   11,   18,   14,    0,   20,   21,   67,    0,
    0,    0,   62,    0,    0,  105,    0,    0,    0,   75,
    0,    0,  176,    0,    0,  123,    0,  184,  186,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  118,    0,  129,  121,    0,
   44,    0,    0,    0,    0,    8,    0,    3,    0,   16,
    0,    0,    0,   39,    0,    0,    0,    0,  135,  133,
  104,    0,    0,   73,    0,    0,  180,    0,  119,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  115,  116,  164,  151,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  148,  147,  131,  127,    0,    0,
  130,   57,   53,    0,   43,    0,    0,   51,    0,    7,
    2,   66,    0,   45,   38,    0,   41,   61,  132,  107,
    0,    0,    0,    0,  179,    0,    0,    0,    0,  174,
  150,    0,    0,    0,  171,  167,    0,    0,  142,    0,
    0,  163,  160,  159,  128,    0,  126,   50,    0,    0,
   49,   70,    0,    0,    0,   40,  106,    0,    0,   93,
    0,    0,   79,   77,  149,  162,    0,    0,  154,  173,
  146,    0,    0,  169,  165,  124,   52,   48,   68,    0,
    0,   33,    0,    0,    0,    0,   91,    0,   32,    0,
   92,  161,  158,    0,    0,  143,    0,    0,  145,    0,
    0,   36,    0,   31,    0,   90,   35,    0,    0,   85,
  155,    0,  157,  152,    0,  144,   55,    0,    0,   72,
   34,    0,   84,  156,  153,    0,   54,   56,
};
short yydgoto[] = {                                      14,
   15,  103,  230,   18,   19,   20,   70,   21,   22,   23,
   24,   82,  231,   25,  113,  126,  174,  114,  115,  224,
   26,   74,  232,  233,   27,   28,   29,   46,   47,   30,
   48,   49,   50,   51,  106,   52,  107,  169,  170,  129,
   31,  130,  161,
};
short yysindex[] = {                                    918,
  -25,  -31,  -20,  -40,  285,    0,    0,    0,    0, -120,
 1039,    0,  -21,    0,  603, 1407,    0,  -21,  -21, -244,
    0,    0,    0,  -13,  -90, -220,    0,    0,    0,    0,
  -40,    0,  -10,  210, -207,    0, -113,  -44,    0,    0,
    0,    0,   45,    3, -151,    0,    0,  708,   87,    0,
  970,   48,    0,    0,    0,    0,    0,  -80, -158, 1421,
 1447,    0,    0,    0,    0, 1461,    0,    0,    0,   47,
 -113, -121,    0,   71,  720,    0,   56,   28,  -22,    0,
 -125,  -19,    0, -118,  210,    0,  106,    0,    0,  210,
  210,  210,  210,  184,  659,  210,  210,  210,  210,  105,
  109,  682, 1025,  114,  117,    0,  763,    0,    0,  -89,
    0,  -86,  -65,  129,  137,    0,  -67,    0, 1475,    0,
  -63,  -12,  148,    0,  -97,   78,  -53,  970,    0,    0,
    0,  160,  210,    0,   84,  -77,    0,  140,    0,   28,
   28,   28,   28,  210,  210,   87,  210,  210,   87,   28,
   28,    0,    0,    0,    0,  165,  -38, 1379,  169,  -21,
 1154,  170,  171,  181,    0,    0,    0,    0,  819,  -55,
    0,    0,    0,   -1,    0,  -86,  183,    0,  172,    0,
    0,    0,  122,    0,    0,  103,    0,    0,    0,    0,
  145,   28,  867,   -5,    0,   87,   87,   87,   87,    0,
    0,  133,  -37, 1212,    0,    0,  215, 1053,    0,  -21,
  -21,    0,    0,    0,    0,   -6,    0,    0,   12,   66,
    0,    0,   13,   -3,  984,    0,    0,  942, 1598,    0,
  146, 1612,    0,    0,    0,    0,  163, 1077,    0,    0,
    0, 1103, 1489,    0,    0,    0,    0,    0,    0,  182,
  -77,    0, 1240,  167, 1598, 1612,    0,  179,    0, 1117,
    0,    0,    0, 1514, 1528,    0, 1542, 1556,    0, 1008,
   37,    0,  187,    0, 1612,    0,    0, 1598, 1612,    0,
    0, 1570,    0,    0, 1584,    0,    0, 1598,  189,    0,
    0, 1612,    0,    0,    0,  192,    0,    0,
};
short yyrindex[] = {                                      0,
    0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
  318,    0,  253,    0,  319,  320,    0,  533,  561,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   52,   10,    0,    0,
    0,    0,    0,    0,   34,    0,    0,    0,   59,    0,
    0,  843,    0,    0,    0,    0,  300,    0,  325,  329,
  337,    0,    0,    0,    0,  342,    0,    0,    0,  341,
   52,    0,    0,  440,    0,    0,    0,  464,    0,    0,
   54,    0,    0,    0,    0,    0,  881,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  303,
    0,    0,    0,    0,    0,    0,  349,    0,  353,    0,
    0,    0,  229,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -33,
  547,  633,  734,    0,    0,   83,    0,    0,  107,  791,
  805,    0,    0,    0,    0,    0,    0,    0, 1326, 1351,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  490,    0,    0,    0,  131,  368,  392,  416,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1365,
 1393,    0,    0,    0,    0,  504,    0,    0,    0,    0,
    0,    0,   81,    0,    0,    0,    0,  236,    0,    0,
    0,  240,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  241,  242,    0,    0,    0,  248,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  252,    0,    0,  264,  265,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  266,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
   30,  711,    1, 1296, 1306, 1346,    0,    0,    0,    0,
    0,  326, -204,    0,  330,  276,  238,  -99,    0,    0,
    0,    0, -192, -186,    0,    0,    0,  410,  417,    0,
  462,  -30,   67,  393,    0,  382,    0,    0,  258,  -27,
    0,  304, -126,
};
#define YYTABLESIZE 1891
short yytable[] = {                                      44,
   17,   84,   58,  124,   45,  202,  237,  138,   33,  175,
  138,   17,   69,  177,   35,   64,   17,  132,   32,   37,
  254,  135,   13,  108,  258,  177,   71,  185,  183,   34,
   76,  204,   72,  187,   45,  256,   73,  250,  133,  136,
   60,  257,  218,   86,  111,   66,  136,   45,  273,   79,
  175,  175,  175,  175,  175,  251,  175,  219,  114,  175,
   64,   17,  275,  146,  149,  289,   64,  279,  276,  175,
   94,  175,   95,  280,  187,  187,  187,  187,  187,  171,
  187,  243,  108,  296,   85,  292,  201,  236,  109,  138,
  119,  293,   76,  187,   74,  187,  131,  116,   94,  114,
   95,  114,  114,  114,   71,  121,  109,   88,   89,  248,
   76,  265,   74,  196,  197,  268,  198,  199,  114,   64,
  114,   69,   71,  108,  219,  108,  108,  108,   98,  127,
  111,  134,  175,   99,  175,  123,   57,  282,  137,   69,
  285,  171,  108,   80,  108,  110,  139,  109,  154,  109,
  109,  109,  155,    7,    8,    9,  187,  165,  187,  123,
  166,    7,    8,    9,  152,  153,  109,  172,  109,  110,
  173,  111,  178,  111,  111,  111,  179,    7,    8,    9,
  195,  114,   94,  114,   95,  227,  110,   94,  180,   95,
  111,  184,  111,  182,    7,    8,    9,    7,    8,    9,
  190,  110,  187,  188,   45,  108,  193,  108,  200,    7,
    8,    9,  205,  212,  213,  217,   38,   39,   40,   41,
   42,   83,  138,  138,  214,  144,  221,  226,   45,  109,
  145,  109,  261,  138,  138,  138,   36,   43,  138,  138,
  138,  138,  138,  138,  225,  138,   38,   39,   40,   41,
   42,  234,   26,  111,   45,  111,  261,  235,  240,   38,
   39,   40,   41,   42,  246,  175,  175,   43,  247,  249,
  259,  175,  175,  175,  175,  261,  175,  175,  175,  261,
   43,  175,  175,  175,  175,  175,  175,  262,  175,  187,
  187,  274,  261,  290,   60,  187,  187,  187,  187,   42,
  187,  187,  187,  277,  270,  187,  187,  187,  187,  187,
  187,  291,  187,  297,  114,  114,  298,    5,    9,   12,
  114,  114,  114,  114,    4,  114,  114,  114,   10,   45,
  114,  114,  114,  114,  114,  114,   13,  114,  108,  108,
   27,   17,   58,   42,  108,  108,  108,  108,    1,  108,
  108,  108,   15,   46,  108,  108,  108,  108,  108,  108,
   87,  108,  109,  109,   78,   86,   89,  113,  109,  109,
  109,  109,   81,  109,  109,  109,   88,   26,  109,  109,
  109,  109,  109,  109,   27,  109,  111,  111,   80,   83,
   82,  110,  111,  111,  111,  111,  122,  111,  111,  111,
  186,  125,  111,  111,  111,  111,  111,  111,  113,  111,
  113,  113,  113,  220,   55,  112,   38,   39,   40,   41,
   42,   56,   47,   75,   42,   87,  216,  113,  222,  113,
    0,  189,  110,    0,  110,  110,  110,   43,    0,   59,
   38,   39,   40,   41,   42,    0,    7,    8,    9,    0,
    0,  110,    0,  110,    0,    0,  112,    0,  112,  112,
  112,   43,    0,  102,    0,   27,   38,   39,   40,   41,
   42,    0,    0,    0,    0,  112,    0,  112,    0,    0,
    0,    0,    0,   59,    0,    0,    0,   43,    0,  103,
  113,    0,  113,    0,   77,   78,    0,    0,    0,    0,
    0,    0,    0,  125,    0,    0,    0,  102,   26,   26,
    0,    0,    0,    0,  110,    0,  110,    0,    0,   26,
   26,   26,    0,    0,   26,   26,    0,   26,   26,   26,
    0,   26,   22,  103,    0,    0,    0,    0,  112,    0,
  112,   53,   39,   40,   41,   54,  138,  125,    0,    0,
    0,  140,  141,  142,  143,   42,   42,  150,  151,    0,
   23,    0,    0,    0,   59,    0,   42,   42,   42,    0,
    0,   42,   42,    0,   42,   42,   42,    0,   42,    0,
    0,    0,    0,    0,    0,    0,    0,  139,  102,    0,
  139,    0,    0,  191,  192,    0,   27,   27,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   27,   27,   27,
    0,    0,   27,   27,  103,   27,   27,   27,    0,   27,
    0,    0,    0,  113,  113,    0,    0,    0,  125,  113,
  113,  113,  113,    0,  113,  113,  113,    0,    0,  113,
  113,  113,  113,  113,  113,    0,  113,  110,  110,    0,
    0,    0,    0,  110,  110,  110,  110,   22,  110,  110,
  110,    0,    0,  110,  110,  110,  110,  110,  110,  139,
  110,  112,  112,  141,    0,    0,  141,  112,  112,  112,
  112,    0,  112,  112,  112,   23,    0,  112,  112,  112,
  112,  112,  112,    0,  112,   59,   59,    0,    0,    0,
  147,    0,    0,   45,    0,  148,   59,   59,   59,    0,
   16,   59,   59,    0,   59,   59,   59,    0,   59,  102,
  102,   61,    0,   62,    0,   13,    0,   63,   67,   68,
  102,  102,  102,    0,    0,  102,  102,    0,  102,  102,
  102,    0,  102,    0,    0,  103,  103,    0,    0,    0,
   94,    0,   95,    0,    0,  141,  103,  103,  103,  125,
  125,  103,  103,   13,  103,  103,  103,   97,  103,   96,
  125,  125,  125,    0,  140,  125,  125,  140,  125,  125,
  125,    0,  125,    0,    0,    0,    0,    0,   22,   22,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
   22,   22,  139,  139,   22,   22,   13,   22,   22,   22,
    0,   22,  158,  139,  139,  139,   23,   23,  139,  139,
  139,  139,  139,  139,    0,  139,    0,   23,   23,   23,
    0,  136,   23,   23,  136,   23,   23,   23,    0,   23,
    0,    0,  102,    0,    0,  137,    0,    0,  137,    0,
    0,    0,    0,    0,    0,    0,  140,    0,    1,    2,
    0,    0,   13,    0,    0,    0,    0,    0,    0,    3,
  206,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    0,    0,  102,  122,    0,  141,  141,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  141,
  141,  141,    0,  229,  141,  141,  141,  141,  141,  141,
   13,  141,    0,  136,    0,   38,   39,   40,   41,   42,
  244,  245,    0,    0,  120,    0,    0,  137,    0,    0,
    0,    0,    0,    0,    0,  253,   43,  156,    2,    0,
    0,  102,    0,    0,    0,    0,    0,    0,    3,  157,
    4,    0,  267,    5,    6,    0,    7,    8,    9,    0,
   10,   13,    0,    0,    0,  122,    0,    0,    0,   90,
   91,   92,   93,    0,    0,  100,    2,    0,    0,    0,
  288,    0,    0,    0,    0,  255,    3,  101,    4,  140,
  140,    5,    6,  128,    7,    8,    9,    0,   10,    0,
  140,  140,  140,  120,    0,  140,  140,  140,  140,  140,
  140,    0,  140,   13,    0,    0,    0,    0,  100,    2,
    0,    0,    0,    0,    0,    0,    0,   13,    0,    3,
  101,    4,  167,  168,    5,    6,    0,    7,    8,    9,
   11,   10,   12,    0,    0,    0,  136,  136,    0,    0,
    0,   13,    0,    0,    0,    0,    0,  136,  136,  136,
  137,  137,  136,  136,  136,  136,  136,  136,    0,  136,
    0,  137,  137,  137,  100,    2,  137,  137,  137,  137,
  137,  137,   13,  137,    0,    3,  101,    4,    0,  215,
    5,    6,  102,    7,    8,    9,  242,   10,  122,  122,
    0,    0,    0,    0,    0,    0,    0,    0,  252,  122,
  122,  122,    0,    0,  122,  122,  122,  122,  122,  122,
  264,  122,    1,    2,    0,    0,    0,    0,    0,    0,
    0,    0,  287,    3,  228,    4,  120,  120,    5,    6,
    0,    7,    8,    9,    0,   10,   13,  120,  120,  120,
    0,    0,  120,  120,  120,  120,  120,  120,    0,  120,
  278,    0,    0,   59,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    1,    2,    0,    0,  241,    0,    0,
    0,    0,    0,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,    1,    2,    0,
    0,  263,    0,    0,    0,    0,    0,    0,    3,  228,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,    0,    0,  100,    2,  266,    0,    0,
    0,    0,    0,    0,    0,    0,    3,  101,    4,    1,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,  228,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,    1,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,  228,    4,    0,  209,    5,
    6,    2,    7,    8,    9,    0,   10,    0,    0,    0,
    0,    3,  162,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,  156,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,  156,    2,    0,    0,  239,    0,    0,    0,
    0,    0,    0,    3,    0,    4,  104,    0,    5,    6,
    0,    7,    8,    9,    0,   10,  105,    0,  156,    2,
    0,    0,    0,    0,  272,    0,    0,    0,    0,    3,
  104,    4,    1,    2,    5,    6,    0,    7,    8,    9,
  105,   10,   81,    3,  228,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,    0,  159,  163,    0,
    0,    0,  104,  112,    0,    0,    0,  160,  164,  207,
    2,    0,  105,    0,    0,    0,   81,  112,    0,    0,
    3,  208,    4,  104,    0,    5,    6,    0,    7,    8,
    9,    0,   10,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  172,    0,    0,  159,    0,    0,  210,    0,  176,    0,
    0,    0,    0,  160,  104,    0,  211,  207,    2,    0,
  176,    0,    0,    0,  105,  168,    0,    0,    3,  238,
    4,  194,    0,    5,    6,    0,    7,    8,    9,  170,
   10,    0,    0,    0,    0,    1,    2,    0,    0,  210,
    0,    0,    0,  159,    0,    0,    3,  228,    4,  211,
    0,    5,    6,  160,    7,    8,    9,  166,   10,    0,
    0,    0,    0,    0,  223,    0,    0,    0,    0,    0,
    0,   65,    0,  159,    0,    0,    0,  159,  210,    0,
    0,    0,    0,  160,    0,  117,    0,  160,  211,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  159,
  210,    0,  159,  210,    0,    0,    0,    0,    0,  160,
  211,  118,  160,  211,    0,    0,    0,  210,    0,    0,
  210,  172,  172,    0,    0,  120,    0,  211,    0,    0,
  211,    0,  172,  172,  172,    0,  271,  172,  172,  181,
  172,  172,  172,    0,  172,    0,  168,  168,    0,    0,
    0,    0,    0,  269,    0,    0,    0,  168,  168,  168,
  170,  170,  168,  168,    0,  168,  168,  168,    0,  168,
    0,  170,  170,  170,  156,    2,  170,  170,  281,  170,
  170,  170,    0,  170,    0,    3,  203,    4,  166,  166,
    5,    6,  283,    7,    8,    9,    0,   10,    0,  166,
  166,  166,    1,    2,  166,  166,  284,  166,  166,  166,
    0,  166,    0,    3,    0,    4,    1,    2,    5,    6,
  286,    7,    8,    9,    0,   10,    0,    3,    0,    4,
    0,    0,    5,    6,  294,    7,    8,    9,    0,   10,
    0,    0,    1,    2,    0,    0,    0,    0,  295,    0,
    0,    0,    0,    3,    0,    4,    1,    2,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    3,    0,    4,
    1,    2,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    3,    0,    4,  207,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    0,  156,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    4,  207,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,  156,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,  207,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,    0,    4,  207,    2,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    3,    0,    4,  207,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,    0,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,  228,    4,    1,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,  260,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,
};
short yycheck[] = {                                      40,
    0,   46,  123,  125,   45,   44,   44,   41,   40,    0,
   44,   11,  257,  113,   46,   15,   16,   40,   44,   40,
  225,   41,   44,   51,  229,  125,   40,  125,   41,   61,
   41,  158,  123,    0,   45,  228,  257,   41,   61,   59,
   11,  228,   44,   41,  125,   16,   59,   45,  253,  257,
   41,   42,   43,   44,   45,   59,   47,   59,    0,  125,
   60,   61,  255,   94,   95,  270,   66,  260,  255,   60,
   43,   62,   45,  260,   41,   42,   43,   44,   45,  107,
   47,  208,    0,  288,   40,  278,  125,  125,   41,  123,
   61,  278,   41,   60,   41,   62,   41,  256,   43,   41,
   45,   43,   44,   45,   41,   59,    0,  259,  260,   44,
   59,  238,   59,  144,  145,  242,  147,  148,   60,  119,
   62,   41,   59,   41,   59,   43,   44,   45,   42,   59,
    0,  257,  123,   47,  125,  257,  257,  264,  257,   59,
  267,  169,   60,  257,   62,  267,   41,   41,   44,   43,
   44,   45,   44,  275,  276,  277,  123,   44,  125,  257,
   44,  275,  276,  277,   98,   99,   60,  257,   62,  267,
  257,   41,   44,   43,   44,   45,   40,  275,  276,  277,
   41,  123,   43,  125,   45,   41,  267,   43,  256,   45,
   60,   44,   62,  257,  275,  276,  277,  275,  276,  277,
   41,  267,  125,  257,   45,  123,  123,  125,   44,  275,
  276,  277,   44,   44,   44,  271,  257,  258,  259,  260,
  261,  266,  256,  257,   44,   42,   44,  125,   45,  123,
   47,  125,  232,  267,  268,  269,  257,  278,  272,  273,
  274,  275,  276,  277,  123,  279,  257,  258,  259,  260,
  261,  257,    0,  123,   45,  125,  256,  125,   44,  257,
  258,  259,  260,  261,  271,  256,  257,  278,  257,  257,
  125,  262,  263,  264,  265,  275,  267,  268,  269,  279,
  278,  272,  273,  274,  275,  276,  277,  125,  279,  256,
  257,  125,  292,  257,  257,  262,  263,  264,  265,    0,
  267,  268,  269,  125,  123,  272,  273,  274,  275,  276,
  277,  125,  279,  125,  256,  257,  125,    0,    0,    0,
  262,  263,  264,  265,    0,  267,  268,  269,    0,   45,
  272,  273,  274,  275,  276,  277,    0,  279,  256,  257,
    0,    0,   40,   44,  262,  263,  264,  265,    0,  267,
  268,  269,    0,  125,  272,  273,  274,  275,  276,  277,
  125,  279,  256,  257,  125,  125,  125,    0,  262,  263,
  264,  265,  125,  267,  268,  269,  125,  125,  272,  273,
  274,  275,  276,  277,   44,  279,  256,  257,  125,  125,
  125,    0,  262,  263,  264,  265,   71,  267,  268,  269,
  125,   72,  272,  273,  274,  275,  276,  277,   41,  279,
   43,   44,   45,  176,    5,    0,  257,  258,  259,  260,
  261,    5,  123,   31,  125,   44,  169,   60,  257,   62,
   -1,  128,   41,   -1,   43,   44,   45,  278,   -1,    0,
  257,  258,  259,  260,  261,   -1,  275,  276,  277,   -1,
   -1,   60,   -1,   62,   -1,   -1,   41,   -1,   43,   44,
   45,  278,   -1,    0,   -1,  125,  257,  258,  259,  260,
  261,   -1,   -1,   -1,   -1,   60,   -1,   62,   -1,   -1,
   -1,   -1,   -1,   44,   -1,   -1,   -1,  278,   -1,    0,
  123,   -1,  125,   -1,   33,   34,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   44,  256,  257,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,    0,   44,   -1,   -1,   -1,   -1,  123,   -1,
  125,  257,  258,  259,  260,  261,   85,   44,   -1,   -1,
   -1,   90,   91,   92,   93,  256,  257,   96,   97,   -1,
    0,   -1,   -1,   -1,  125,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,  125,   -1,
   44,   -1,   -1,  132,  133,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  125,  262,
  263,  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,  256,  257,   -1,
   -1,   -1,   -1,  262,  263,  264,  265,  125,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,  123,
  279,  256,  257,   41,   -1,   -1,   44,  262,  263,  264,
  265,   -1,  267,  268,  269,  125,   -1,  272,  273,  274,
  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,   -1,
   42,   -1,   -1,   45,   -1,   47,  267,  268,  269,   -1,
    0,  272,  273,   -1,  275,  276,  277,   -1,  279,  256,
  257,   11,   -1,   13,   -1,   44,   -1,  125,   18,   19,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,   -1,  256,  257,   -1,   -1,   -1,
   43,   -1,   45,   -1,   -1,  123,  267,  268,  269,  256,
  257,  272,  273,   44,  275,  276,  277,   60,  279,   62,
  267,  268,  269,   -1,   41,  272,  273,   44,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  256,  257,  272,  273,   44,  275,  276,  277,
   -1,  279,  102,  267,  268,  269,  256,  257,  272,  273,
  274,  275,  276,  277,   -1,  279,   -1,  267,  268,  269,
   -1,   41,  272,  273,   44,  275,  276,  277,   -1,  279,
   -1,   -1,  123,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  256,  257,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  160,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,  123,   44,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,  193,  272,  273,  274,  275,  276,  277,
   44,  279,   -1,  123,   -1,  257,  258,  259,  260,  261,
  210,  211,   -1,   -1,   44,   -1,   -1,  123,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  225,  278,  256,  257,   -1,
   -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,  242,  272,  273,   -1,  275,  276,  277,   -1,
  279,   44,   -1,   -1,   -1,  123,   -1,   -1,   -1,  262,
  263,  264,  265,   -1,   -1,  256,  257,   -1,   -1,   -1,
  270,   -1,   -1,   -1,   -1,   44,  267,  268,  269,  256,
  257,  272,  273,  274,  275,  276,  277,   -1,  279,   -1,
  267,  268,  269,  123,   -1,  272,  273,  274,  275,  276,
  277,   -1,  279,   44,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   44,   -1,  267,
  268,  269,  270,  271,  272,  273,   -1,  275,  276,  277,
  123,  279,  125,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
  256,  257,  272,  273,  274,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,  256,  257,  272,  273,  274,  275,
  276,  277,   44,  279,   -1,  267,  268,  269,   -1,  271,
  272,  273,  123,  275,  276,  277,   44,  279,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
   44,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  125,  267,  268,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   44,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,  279,
   44,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,  256,  257,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,  256,  257,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,  125,  272,
  273,  257,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,  267,  268,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,   51,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   51,   -1,  256,  257,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,  267,
   75,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   75,  279,   37,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  102,  103,   -1,
   -1,   -1,  107,   58,   -1,   -1,   -1,  102,  103,  256,
  257,   -1,  107,   -1,   -1,   -1,   71,   72,   -1,   -1,
  267,  268,  269,  128,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,  128,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,  158,   -1,   -1,  161,   -1,  113,   -1,
   -1,   -1,   -1,  158,  169,   -1,  161,  256,  257,   -1,
  125,   -1,   -1,   -1,  169,  125,   -1,   -1,  267,  268,
  269,  136,   -1,  272,  273,   -1,  275,  276,  277,  125,
  279,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,  204,
   -1,   -1,   -1,  208,   -1,   -1,  267,  268,  269,  204,
   -1,  272,  273,  208,  275,  276,  277,  125,  279,   -1,
   -1,   -1,   -1,   -1,  179,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,  238,   -1,   -1,   -1,  242,  243,   -1,
   -1,   -1,   -1,  238,   -1,  125,   -1,  242,  243,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,  268,   -1,   -1,   -1,   -1,   -1,  264,
  265,  125,  267,  268,   -1,   -1,   -1,  282,   -1,   -1,
  285,  256,  257,   -1,   -1,  125,   -1,  282,   -1,   -1,
  285,   -1,  267,  268,  269,   -1,  251,  272,  273,  125,
  275,  276,  277,   -1,  279,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,  125,   -1,   -1,   -1,  267,  268,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,  256,  257,  272,  273,  125,  275,
  276,  277,   -1,  279,   -1,  267,  268,  269,  256,  257,
  272,  273,  125,  275,  276,  277,   -1,  279,   -1,  267,
  268,  269,  256,  257,  272,  273,  125,  275,  276,  277,
   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,  273,
  125,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos clase_heredada '}'",
"declaracion_clase : nombre_clase '{' clase_heredada '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"clase_heredada : IDENTIFICADOR ','",
"clase_heredada : IDENTIFICADOR",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 341 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
// Esta funcion dado el acceso a un elemento de la tabla de simbolos elimina el simbolo y lo actualiza con el scope y el tipo de esa variable.
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
void finishClass(){
        tableSymbol->deleteScope();
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
void addAtribute(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        int diff = tableSymbol->getDiffOffScope(key + scope, "atributo", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de atributio en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAtribute = new symbol(key+scope, "", type, "atributo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newAtribute);

                /* // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newAtribute; */
        }        
};
void initMethod(string key, string scope ){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        int diff = tableSymbol->getDiffOffScope(key + scope, "metodo", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de método en la misma clase");
        }else{
                // creamos el nuevo símbolo
                symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newMetodo);
                
                // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newMetodo;

                // agregamos un scope
                tableSymbol->addScope(key);

                // creamos una stack para la función y la agregamos al stack con el nombre
                functionStack* fs = new functionStack(key+scope);
                fs->ter = new Tercets();
                stackFunction->push(fs);
                
                cantOfRecursions++;
        }
};
void addParamMetodo(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // verificar que no esté previamente en ese scope en esa tabla de símobolo
        // lo agregamos y setear el tipo del parametro


        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = stackClasses->top()->attributesAndMethodsVector->getDiffOffScope(key+scope, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el misma ambito");
        }else{
                // creamos el nuevo símbolo
                symbol* newparam = new symbol(key+scope, "", type, "var");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                stackClasses->top()->attributesAndMethodsVector->insert(newparam);

                lastParam->cantParam++;
                lastParam->typeParam = type;
                lastParam->nameParam = key;
        }
};
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
        // verificamos si está dentro de la declaración de una clase o no

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        symbol* newIdentificador = setNewScope(key, type, scope, "var", ts); 
        reglaptr = newIdentificador->lexema; 
        reglatype = type; 
};
void addObject(string key, string scope, string classType){
        cout <<"\n\n adding " << key << endl;
        // Verificamos que no exista otro objeto con el mismo nombre en el mismo ámbito
        // buscamos la clase más cercana de classType
        // si la encontramos por cada atributo y método creamos un nuevo símbolo con el scope del objeto
        if (classType == "_error"){
                return;
        }
        int diff = tableSymbol->getDiffOffScope2(key, "objeto", scope); 
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe un objeto
                yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
        }else{
                // eliminamos el símbolo viejo y lo agregamos
                symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
                symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(classType, "clase", scope); // buscamos la primera clase que matchee 

                for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
                        symbol* sm = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*sm);                
                        size_t firstColonPos = sm->lexema.find(':');
                        string name = sm->lexema.substr(0, firstColonPos);
                        firstColonPos = sm->lexema.find(classType);
                        string scopeInsideClass = sm->lexema.substr(firstColonPos, sm->lexema.size());
                        cout<< "\nname: " << name << " scope: " << scope << " scopeInside " << scopeInsideClass  <<  " calssType " << classType << " sm->lexema " << sm->lexema  << endl;
                        newSm->lexema = name+scope+":"+scopeInsideClass+":"+key;

                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }
        } 
};
void initFunction(string key, string scope){
        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        int diff = tableSymbol->getDiffOffScope(key+scope, "funcion", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "void", scope, "funcion", ts); 
                lastParam = newIdentificador;
        } 
        
        tableSymbol->addScope(key);

        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        cantOfRecursions++;
}
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
}
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        vectorOfFunction->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
// verifica si existe una variable alcanzable y seteea el $$->ptr con el nuevo scope
void setScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key); 
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;
        }
};
// función cuando se deteta un idnetificador con ++
void newFactorMasMas (string key, string scope, string uso, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key);
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                int number = addTercet("+", symbolFinded->lexema, symbolFinded->lexema);          
                
                reglaptr = charTercetoId + to_string(number);
                reglatype = symbolFinded->type;
        }
}
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        tableSymbol->deleteSymbol(key); 
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                checkTypesAsignation(symbolFinded->type, op2Type); 
                int number = addTercet("=", symbolFinded->lexema, op2Lexeme); 
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(checkTypesOperation(op1type, op2type)){
                reglatype = op1type;
        }else{
                reglatype = "error";
        } 
        
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number); 
}
void newTof(string key, string& reglaptr, string& reglatype){
        int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        reglatype = "float";
}
void condition(string& reglaptr){
        int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void addElse(string& reglaptr){
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void finIf(){
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );
        }
}

void initWhile(){
        addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), "");
}

void finWhile(string & reglaptr) {
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );
        } 
        Tercet *t2 = popTercet(); 
        int number; 
        if(t2!=nullptr){
                int number = addTercet("BI", t2->getArg1(), "");
        } 
        reglaptr = charTercetoId + to_string(number);
}

void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
        checkTypesCompare(op1type, op2type); 
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number);
}

void newVariable(string key, string scope, string type){
        TableSymbol* ts;
        
        // determinas que tabla de símbolo usas
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        int diff = ts->getDiffOffScope(key+scope, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, type, scope,"var", ts);
        } 
};

void initObjectDeclaration(string key, string scope, string& reglaptr){
        // verificar que la clase haya sido declarada y exista
        // borramos el símbolo de la tabla de símbolos general
        tableSymbol->deleteSymbol(key);
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching2(key, "clase", scope);
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la clase "+ key);
                actualClass = "_error"; 
        }else{
                reglaptr = key; 
                actualClass = key; 
        }
}       
void  detectInheritance(string classToInherit , string scope, string classWhoInherit){
        
        // checkear que exista la clase
        // pasa los atributos de la clase padre a la clase hija

        tableSymbol->deleteSymbol(classToInherit);

        symbol* classFinded = tableSymbol->getFirstSymbolMatching(classToInherit+":main", "clase", scope);
        if(classFinded == nullptr){
                yyerror("No se encontro declaracion previa de la clase a heredar"+ classToInherit);
        }else{
                
                // recorrer cada uno de los atributos y metodos de la clase a hererdar
                for (const auto& par : classFinded->attributesAndMethodsVector->getSymbolTable()){
                        
                        symbol* sm = par.second;
                        
                        // creamos el nuevo símbolo
                        symbol* newClass = new symbol(*sm);   

                        size_t firstColonPos = sm->lexema.find(':');
                        string name = sm->lexema.substr(0, firstColonPos);
                        
                        firstColonPos = scope.rfind(':');
                        string scopeaux = scope.substr(0, firstColonPos);
                        
                        firstColonPos = sm->lexema.find(classToInherit);
                        string scopeInsideClass = sm->lexema.substr(firstColonPos, sm->lexema.size());
                        newClass->lexema = name+scopeaux+":"+scopeInsideClass+":"+classWhoInherit;
                        // try{
                        //     newClass->addHeredar(classToInherit);
                        // }catch(const std::exception& e){
                        //     yyerror("La clase tiene una cadena de más de 3 herencias");
                        // }
                        // if (firstColonPos >= sm->lexema.size()) {
                        //         newSm->lexema = name+scopeaux+":"+classWhoInherit;

                        // }else{          //
                        //         newSm->lexema = name+scopeaux+":"+scopeInsideClass+":"+classWhoInherit;
                        // }
                        // agregamos el nuevo símbolo a la tabla de simbolos   
                        stackClasses->top()->attributesAndMethodsVector->insert(newClass);
                }
        }
}
#line 1349 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 73 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 74 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 75 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 76 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 77 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 78 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 79 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 80 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 82 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 84 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 85 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 86 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 88 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 98 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 99 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 100 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 107 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 29:
#line 109 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 30:
#line 110 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 31:
#line 113 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 32:
#line 114 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 33:
#line 115 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 34:
#line 117 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 35:
#line 118 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 36:
#line 119 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 37:
#line 122 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 38:
#line 125 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 39:
#line 126 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 40:
#line 127 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 41:
#line 128 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 42:
#line 129 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 43:
#line 130 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 44:
#line 131 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 45:
#line 133 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[-1]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 46:
#line 134 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); yywarning("Se detecto una falta de coma"); }
break;
case 47:
#line 136 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 48:
#line 138 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 50:
#line 140 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 52:
#line 143 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 53:
#line 144 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 54:
#line 146 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 55:
#line 147 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 56:
#line 148 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 57:
#line 151 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 58:
#line 152 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 59:
#line 155 "./gramaticaForGenCod.y"
{}
break;
case 60:
#line 157 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 61:
#line 160 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 62:
#line 161 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 63:
#line 164 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 64:
#line 165 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 65:
#line 166 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 66:
#line 169 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 67:
#line 170 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 68:
#line 172 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type); yyval->type = yyvsp[-1]->type;}
break;
case 69:
#line 173 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 70:
#line 174 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 72:
#line 176 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 73:
#line 179 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 74:
#line 180 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 75:
#line 181 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 77:
#line 183 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 78:
#line 186 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 81:
#line 190 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 82:
#line 191 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 83:
#line 192 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 84:
#line 193 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 85:
#line 194 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 87:
#line 196 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 88:
#line 197 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 89:
#line 198 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 90:
#line 199 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 91:
#line 200 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 97:
#line 208 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 98:
#line 209 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 99:
#line 210 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 100:
#line 211 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 102:
#line 215 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 108:
#line 226 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 109:
#line 227 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 110:
#line 228 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 111:
#line 229 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 112:
#line 230 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 113:
#line 231 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 114:
#line 232 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 115:
#line 235 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 116:
#line 236 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 117:
#line 237 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 118:
#line 240 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 119:
#line 243 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 120:
#line 244 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 121:
#line 245 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 122:
#line 246 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 123:
#line 247 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 125:
#line 251 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 126:
#line 252 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 128:
#line 254 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 131:
#line 261 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 132:
#line 263 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 133:
#line 264 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 134:
#line 267 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 136:
#line 273 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 137:
#line 274 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 138:
#line 275 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 139:
#line 276 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 140:
#line 277 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 141:
#line 278 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 144:
#line 283 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 145:
#line 284 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 146:
#line 285 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 148:
#line 287 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 150:
#line 289 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 153:
#line 293 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 156:
#line 298 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 157:
#line 299 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 158:
#line 300 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 160:
#line 302 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 162:
#line 304 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 164:
#line 306 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 166:
#line 310 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 168:
#line 312 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 169:
#line 313 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 170:
#line 314 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 171:
#line 315 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 172:
#line 316 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 173:
#line 317 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 174:
#line 318 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 175:
#line 321 "./gramaticaForGenCod.y"
{ setScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 176:
#line 322 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 177:
#line 323 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 178:
#line 324 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 179:
#line 325 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr,yyval->ptr,yyval->type); }
break;
case 181:
#line 327 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 182:
#line 330 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 183:
#line 333 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 184:
#line 334 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 185:
#line 335 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 186:
#line 336 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 187:
#line 337 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 2061 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
lexico->lexico->if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
