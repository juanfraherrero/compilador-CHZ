#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";
string actualClass = "";
symbol* lastParam;
symbol* lastClass;

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 46 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
   10,   10,   10,   10,   10,   10,   11,    8,    8,    8,
    8,    8,   14,   15,   15,   15,   15,   16,   16,   17,
   17,   17,   18,   18,    9,   19,   19,    6,    6,    6,
    7,    7,   12,   12,   12,   12,   12,   13,   13,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   20,   20,    5,    5,    5,    5,    5,    5,    5,
    5,   22,   22,   23,   23,   23,   23,   28,   28,   28,
   28,   28,   28,   28,   29,   29,   29,   24,   31,   31,
   31,   31,   31,   32,   32,   32,   32,   32,   34,   36,
   35,   27,   27,   38,   39,   33,   33,   33,   33,   33,
   33,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   30,   30,   30,   30,   30,   30,
   30,   26,   25,   25,   25,   25,   25,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,
    7,    7,    6,    8,    8,    7,    2,    4,    3,    2,
    4,    3,    2,    4,    3,    3,    2,    3,    1,    7,
    6,    8,    2,    1,    2,    3,    1,    1,    1,    1,
    3,    1,    2,    1,    1,    0,    4,    1,    1,    3,
    2,    4,    3,    4,    3,    2,    1,    3,    2,    3,
    2,    2,    1,    1,    1,    1,    2,    2,    2,    2,
    1,    3,    5,    4,    3,    6,    5,    3,    3,    4,
    4,    4,    4,    1,    3,    3,    1,    3,    3,    2,
    2,    1,    2,    4,    3,    3,    2,    3,    1,    1,
    1,    4,    3,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    5,    6,    5,    4,    2,    2,    4,    3,
    2,    6,    7,    4,    6,    7,    6,    5,    3,    3,
    5,    4,    3,    2,    3,    2,    2,    1,    3,    2,
    2,    1,    3,    2,    1,    2,    1,    1,    4,    3,
    1,    1,    1,    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  124,   58,   59,   60,    0,
    0,    6,    0,    0,    0,    0,   19,    0,    0,    0,
   28,   29,   30,    0,    0,   84,   85,   86,   91,    0,
   24,   57,    0,    0,    0,    0,   37,    0,    0,  172,
  173,  175,  171,    0,    0,    0,  168,  167,    0,    0,
  107,    0,    0,   88,   87,   89,   90,    0,    0,    0,
    0,    0,   25,   11,   18,   14,    0,   20,   21,   62,
    0,    0,    0,    0,   95,    0,    0,    0,    0,   65,
    0,    0,  166,    0,    0,  113,    0,  174,  176,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,    0,  119,  111,    0,
   42,    0,    0,    0,    0,    8,    0,    3,    0,   16,
    0,    0,   39,    0,    0,  125,  123,   94,    0,    0,
   56,   63,    0,    0,  170,    0,  109,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
  106,  154,  141,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  138,  137,  121,  117,    0,    0,  120,   53,
   49,    0,   41,    0,    0,   47,    0,    7,    2,   61,
    0,   38,  122,   97,    0,    0,    0,    0,  169,    0,
    0,    0,    0,  164,  140,    0,    0,    0,  161,  157,
    0,    0,  132,    0,    0,  153,  150,  149,  118,    0,
  116,   46,    0,    0,   45,    0,    0,   96,    0,    0,
   83,    0,    0,   69,   67,  139,  152,    0,    0,  144,
  163,  136,    0,    0,  159,  155,  114,   48,   44,    0,
   33,    0,    0,    0,    0,   81,    0,   32,    0,   82,
  151,  148,    0,    0,  133,    0,    0,  135,    0,   36,
    0,   31,    0,   80,   35,    0,    0,   75,  145,    0,
  147,  142,    0,  134,   51,    0,    0,   34,    0,   74,
  146,  143,    0,   50,   52,
};
short yydgoto[] = {                                      14,
   15,  103,  221,   18,   19,   20,   71,   21,   22,   23,
   24,   82,  222,   25,  113,  172,  114,  115,   36,  223,
  224,   26,   27,   28,   47,   48,   29,   49,   50,   51,
   52,  106,   53,  107,  167,  168,  126,   30,  127,  159,
};
short yysindex[] = {                                    847,
   18,  -38,  -26,  -19,   -9,    0,    0,    0,    0, -118,
  932,    0,   40,    0,  563, 1321,    0,   40,   40, -245,
    0,    0,    0,   51,  -34,    0,    0,    0,    0,  -19,
    0,    0,  474,  -45, -162,   45,    0,  -84,  -39,    0,
    0,    0,    0,   59,  496, -209,    0,    0,  139,  -23,
    0,  861,   64,    0,    0,    0,    0,    0, -122, -149,
 1345, 1359,    0,    0,    0,    0, 1383,    0,    0,    0,
   54,  -84, -107,  736,    0,   67,   33,   13, -137,    0,
 -134,  -32,    0, -130,  -45,    0,   93,    0,    0,  -45,
  -45,  -45,  -45,  604,  721,  -45,  -45,  -45,  -45,   92,
   99,  946, 1435,  100,  102,    0,  692,    0,    0, -120,
    0, -108,  -88,  107,  112,    0,  -98,    0, 1408,    0,
 -101,  -25,    0,  -67,  861,    0,    0,    0,  501,  -45,
    0,    0,   44, -100,    0,  364,    0,   33,   33,   33,
   33,  -45,  -45,  -23,  -45,  -45,  -23,   33,   33,    0,
    0,    0,    0,  119,  -29, 1555,  127,   40,  257,  136,
  142,  146,    0,    0,    0,    0,  763,  -77,    0,    0,
    0,  -31,    0, -108,  151,    0,  -84,    0,    0,    0,
   74,    0,    0,    0,  369,   33,  972,  -54,    0,  -23,
  -23,  -23,  -23,    0,    0,   86,  -27,  875,    0,    0,
  173, 1002,    0,   40,   40,    0,    0,    0,    0,  -37,
    0,    0,  -22,   -3,    0,    6,  889,    0, 1026, 1584,
    0,  111, 1598,    0,    0,    0,    0,  118, 1052,    0,
    0,    0, 1066, 1422,    0,    0,    0,    0,    0,  131,
    0, 1132,  130, 1584, 1598,    0,  135,    0, 1091,    0,
    0,    0, 1449, 1474,    0, 1488, 1502,    0,  903,    0,
  147,    0, 1598,    0,    0, 1584, 1598,    0,    0, 1516,
    0,    0, 1541,    0,    0, 1584,  160,    0, 1598,    0,
    0,    0,  166,    0,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  256,    0,  232,    0,  261,  267,    0,  446,  470,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  218,    0,   16,    1,    0,
    0,    0,    0,    0,    0,   25,    0,    0,    0,   49,
    0,    0,  787,    0,    0,    0,    0,  283,    0,  271,
  295,  296,    0,    0,    0,    0,  303,    0,    0,    0,
  307,   16,    0,    0,    0,    0,  331,    0,    0,    0,
   23,    0,    0,    0,    0,    0,  811,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  269,
    0,    0,    0,    0,    0,    0,  315,    0,  319,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  525,  549,  577,
  601,    0,    0,   73,    0,    0,   97,  627,  663,    0,
    0,    0,    0,    0,    0,    0, 1163, 1192,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   16,    0,    0,    0,
    0,    0,    0,    0,    0,  355,    0,    0,    0,  121,
  161,  185,  422,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1225, 1296,    0,    0,    0,    0,  387,
    0,    0,    0,    0,    0,    0,    0,    0,  195,    0,
    0,    0,  207,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  208,  209,    0,    0,    0,  214,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  219,    0,    0,  231,  233,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  238,    0,
    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
   24,   20,  506, 1278, 1288, 1415,    0,    0,    0,    0,
    0,  -62, -188,    0,  294,  194, -102,    0,    0, -189,
 -119,    0,    0,    0,  374,  375,    0, 1753,  -14,    3,
  351,    0,  346,    0,    0,  225,  -48,    0,  286, -150,
};
#define YYTABLESIZE 1883
short yytable[] = {                                      46,
  165,   33,  111,  108,   59,  198,   84,   35,  133,  122,
  175,   70,  212,   38,  196,  181,  228,  123,   98,   16,
   45,  175,   34,   99,  177,   46,  134,  213,  243,  245,
   62,  247,   63,  134,   61,   46,  173,   68,   69,   67,
  239,  165,  165,  165,  165,  165,  240,  165,  104,   88,
   89,  234,  129,  261,  263,  213,   66,  182,  169,  267,
  165,   31,  165,   64,  134,  177,  177,  177,  177,  177,
  277,  177,   98,  130,   66,   94,  279,   95,  254,  144,
  147,   64,  257,   13,  177,  119,  177,  283,   73,  104,
   72,  104,  104,  104,   78,  195,   99,  227,   85,  246,
  150,  151,  270,   79,  109,  273,  116,  128,  104,   94,
  104,   95,  121,   98,  216,   98,   98,   98,  169,  131,
  101,  156,  132,  165,  264,  165,  135,  190,  191,  268,
  192,  193,   98,  137,   98,  152,  170,   99,   58,   99,
   99,   99,  153,  163,  110,  164,  280,  177,  171,  177,
  176,  177,    7,    8,    9,  180,   99,  178,   99,  110,
  103,  101,  194,  101,  101,  101,  187,    7,    8,    9,
  199,  104,   80,  104,    7,    8,    9,  200,  110,  206,
  101,   94,  101,   95,  100,  207,    7,    8,    9,  208,
    7,    8,    9,  211,  215,   98,  217,   98,   97,  110,
   96,  103,  225,  103,  103,  103,  220,    7,    8,    9,
  226,   39,   40,   41,   42,   43,  231,   55,   32,   99,
  103,   99,  103,  235,  236,  100,   83,  100,  100,  100,
   37,   26,   44,  237,  238,  248,  242,   39,   40,   41,
   42,   43,  251,  101,  100,  101,  100,   54,   40,   41,
   42,   55,  256,  259,  262,    5,  165,  165,   44,  265,
    9,   55,  165,  165,  165,  165,   12,  165,  165,  165,
    4,  278,  165,  165,  165,  165,  165,  165,  276,  165,
  177,  177,   40,  103,  284,  103,  177,  177,  177,  177,
  285,  177,  177,  177,   10,   13,  177,  177,  177,  177,
  177,  177,   17,  177,  104,  104,   27,  100,   54,  100,
  104,  104,  104,  104,    1,  104,  104,  104,   15,   77,
  104,  104,  104,  104,  104,  104,   40,  104,   98,   98,
   92,   68,   76,   79,   98,   98,   98,   98,   71,   98,
   98,   98,   55,   78,   98,   98,   98,   98,   98,   98,
   27,   98,   99,   99,   93,   70,   26,   73,   99,   99,
   99,   99,   72,   99,   99,   99,  124,  214,   99,   99,
   99,   99,   99,   99,   92,   99,  101,  101,   56,   57,
   74,  203,  101,  101,  101,  101,  115,  101,  101,  101,
   87,  210,  101,  101,  101,  101,  101,  101,   93,  101,
   90,   91,   92,   93,  189,   43,   94,   40,   95,  218,
  183,   94,    0,   95,    0,    0,  103,  103,    0,    0,
    0,  102,  103,  103,  103,  103,    0,  103,  103,  103,
  115,   27,  103,  103,  103,  103,  103,  103,    0,  103,
  100,  100,    0,    0,    0,   22,  100,  100,  100,  100,
    0,  100,  100,  100,    0,   92,  100,  100,  100,  100,
  100,  100,  102,  100,  102,  102,  102,    0,    0,   23,
    0,    0,    0,   55,   55,    0,    0,    0,    0,   93,
    0,  102,    0,  102,   55,   55,   55,   26,   26,   55,
   55,    0,   55,   55,   55,    0,   55,    0,   26,   26,
   26,    0,    0,   26,   26,   17,   26,   26,   26,    0,
   26,  115,  201,    2,   75,    0,   17,    0,   46,    0,
   65,   17,    0,    3,  202,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,   86,    0,   40,   40,
   46,  184,    0,    0,  102,   46,  102,    0,    0,   40,
   40,   40,    0,    0,   40,   40,    0,   40,   40,   40,
    0,   40,   27,   27,    0,  128,   65,   17,  128,    0,
   22,    0,   65,   27,   27,   27,    0,    0,   27,   27,
    0,   27,   27,   27,    0,   27,   92,   92,    0,  129,
    0,    0,  129,    0,   23,    0,    0,   92,   92,   92,
    0,    0,   92,   92,    0,   92,   92,   92,    0,   92,
   93,   93,    0,    0,    0,    0,    0,  131,    0,    0,
  131,   93,   93,   93,   65,    0,   93,   93,    0,   93,
   93,   93,    0,   93,    0,    0,    0,    0,    0,    0,
    0,  130,  115,  115,  130,  142,    0,  128,   46,    0,
  143,    0,    0,  115,  115,  115,    0,    0,  115,  115,
    0,  115,  115,  115,    0,  115,    0,  126,    0,    0,
  126,  129,    0,    0,    0,    0,    0,  102,  102,    0,
    0,    0,    0,  102,  102,  102,  102,   64,  102,  102,
  102,    0,    0,  102,  102,  102,  102,  102,  102,  131,
  102,   22,   22,  127,    0,    0,  127,    0,    0,    0,
    0,    0,   22,   22,   22,    0,    0,   22,   22,    0,
   22,   22,   22,  130,   22,   23,   23,    0,  250,    0,
   39,   40,   41,   42,   43,   13,   23,   23,   23,    0,
    0,   23,   23,    0,   23,   23,   23,    0,   23,  126,
  250,   44,   39,   40,   41,   42,   43,   39,   40,   41,
   42,   43,  145,    0,    0,   46,    0,  146,  250,    0,
    0,    0,  250,   44,    0,    0,    0,    0,   44,   13,
  128,  128,    0,    0,  250,  127,    0,    0,    0,    0,
    0,  128,  128,  128,    0,    0,  128,  128,  128,  128,
  128,  128,    0,  128,  129,  129,   13,    0,    0,    0,
    0,    0,    0,    0,  102,  129,  129,  129,    1,    2,
  129,  129,  129,  129,  129,  129,    0,  129,    0,    3,
  112,    4,  131,  131,    5,    6,    0,    7,    8,    9,
    0,   10,    0,  131,  131,  131,    0,    0,  131,  131,
  131,  131,  131,  131,  110,  131,  130,  130,  102,    0,
   39,   40,   41,   42,   43,    0,    0,  130,  130,  130,
    0,    0,  130,  130,  130,  130,  130,  130,    0,  130,
    0,   44,  126,  126,    0,  102,    0,    0,    0,    0,
   13,    0,    0,  126,  126,  126,    0,    0,  126,  126,
  126,  126,  126,  126,   13,  126,    0,    0,    0,  112,
    0,    0,    0,    0,    0,    0,    0,    0,  127,  127,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
  127,  127,   13,  110,  127,  127,  127,  127,  127,  127,
    0,  127,    0,    0,    0,    0,   13,  100,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,  101,
    4,  165,  166,    5,    6,    0,    7,    8,    9,   11,
   10,   12,    0,    0,    0,   13,    0,   39,   40,   41,
   42,   43,    0,  102,    0,    0,    0,    0,    0,   13,
    0,  100,    2,    0,    0,    0,    0,    0,   44,  230,
    0,    0,    3,  101,    4,    0,    0,    5,    6,  125,
    7,    8,    9,  241,   10,   13,    0,    0,  100,    2,
    0,    0,    0,    0,    0,    0,    0,  275,    0,    3,
  101,    4,    0,  209,    5,    6,    0,    7,    8,    9,
    0,   10,  112,  112,    0,  233,    0,    0,    0,    0,
    0,    0,    0,  112,  112,  112,   60,    0,  112,  112,
  112,  112,  112,  112,    0,  112,  110,  110,    0,  244,
    0,    0,    0,    0,    0,    0,    0,  110,  110,  110,
    0,    0,  110,  110,  110,  110,  110,  110,    0,  110,
    0,    0,    0,    0,    0,  253,    0,    0,    0,    0,
    0,    0,    1,    2,    0,    0,    0,    0,    0,   13,
    0,    0,    0,    3,    0,    4,  100,    2,    5,    6,
    0,    7,    8,    9,    0,   10,  232,    3,  101,    4,
  201,    2,    5,    6,  266,    7,    8,    9,    0,   10,
    0,    3,  229,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,  219,    4,    1,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
  219,    4,    0,    0,    5,    6,  252,    7,    8,    9,
    0,   10,    0,    0,    0,    0,    0,    1,    2,    0,
  255,    0,    0,    0,    0,    0,    0,    0,    3,    0,
    4,  154,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,  155,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    0,    1,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,  219,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,    0,    0,    0,  260,  154,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    1,    2,    0,    0,    0,    0,  162,    0,    0,
    0,    0,    3,  219,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    0,  154,    2,    0,
    0,    0,    0,    0,    0,    0,  158,    0,    3,    0,
    4,  154,    2,    5,    6,    0,    7,    8,    9,  104,
   10,    0,    3,    0,    4,    0,    0,    5,    6,  105,
    7,    8,    9,    0,   10,    0,    1,    2,    0,  160,
    0,  104,    0,    0,    0,    0,    0,    3,  219,    4,
    0,  105,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
  161,    0,    0,    0,  104,    0,    0,    1,    2,  158,
  162,    0,    0,    0,  105,    0,    0,    0,    3,  219,
    4,    0,  104,    5,    6,    0,    7,    8,    9,    0,
   10,    0,  105,    0,    0,    0,    0,    0,  162,  162,
  156,    0,    0,    0,    0,    0,    0,    0,    0,  162,
  162,  162,    0,  157,  162,  162,  204,  162,  162,  162,
    0,  162,    0,  158,  104,   66,  205,  158,  158,    0,
    0,    0,   81,    0,  105,    0,    0,    0,  158,  158,
  158,    0,    0,  158,  158,    0,  158,  158,  158,  117,
  158,    0,    0,  112,    0,  204,    0,    0,    0,  157,
  160,  160,    0,  118,    0,  205,   81,  112,    0,  158,
    0,  160,  160,  160,    0,    0,  160,  160,    0,  160,
  160,  160,    0,  160,    0,    0,  157,  120,    0,    0,
  157,  204,    0,    0,    0,    0,  158,    0,    0,    0,
  158,  205,    0,    0,    0,    0,    0,  174,    0,    0,
  157,  204,  179,  157,  204,    0,    0,    0,  174,    0,
  158,  205,    0,  158,  205,    0,  258,  204,  188,    0,
  204,  156,  156,    0,    0,    0,    0,  205,    0,    0,
  205,    0,  156,  156,  156,    0,    0,  156,  156,    0,
  156,  156,  156,  269,  156,    0,    1,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,    0,    4,
    0,   81,    5,    6,    0,    7,    8,    9,  271,   10,
    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    3,  272,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,  274,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    1,    2,
  281,    0,    0,    0,    0,    0,    0,    0,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    1,    2,  282,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    4,  201,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,    2,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    3,  160,    4,  154,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    0,  201,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    4,  154,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,  201,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,  201,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,    0,    4,   76,   77,    5,    6,    0,
    7,    8,    9,    0,   10,    0,  201,    2,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,    0,    4,
  154,    2,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    3,  197,    4,    0,    0,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    0,    0,  136,    0,    1,
    2,    0,  138,  139,  140,  141,    0,    0,  148,  149,
    3,  219,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,  249,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    0,    0,
    0,  185,  186,
};
short yycheck[] = {                                      45,
    0,   40,  125,   52,  123,  156,   46,   46,   41,   72,
  113,  257,   44,   40,   44,   41,   44,  125,   42,    0,
   40,  124,   61,   47,    0,   45,   59,   59,  217,  219,
   11,  220,   13,   59,   11,   45,  125,   18,   19,   16,
   44,   41,   42,   43,   44,   45,   41,   47,    0,  259,
  260,  202,   40,  242,  244,   59,   41,  125,  107,  249,
   60,   44,   62,   41,   59,   41,   42,   43,   44,   45,
  259,   47,    0,   61,   59,   43,  266,   45,  229,   94,
   95,   59,  233,   44,   60,   62,   62,  276,  123,   41,
   40,   43,   44,   45,  257,  125,    0,  125,   40,  219,
   98,   99,  253,   59,   41,  256,  256,   41,   60,   43,
   62,   45,   59,   41,  177,   43,   44,   45,  167,  257,
    0,  102,  257,  123,  244,  125,  257,  142,  143,  249,
  145,  146,   60,   41,   62,   44,  257,   41,  257,   43,
   44,   45,   44,   44,  267,   44,  266,  123,  257,  125,
   44,   40,  275,  276,  277,  257,   60,  256,   62,  267,
    0,   41,   44,   43,   44,   45,  123,  275,  276,  277,
   44,  123,  257,  125,  275,  276,  277,  158,  267,   44,
   60,   43,   62,   45,    0,   44,  275,  276,  277,   44,
  275,  276,  277,  271,   44,  123,  123,  125,   60,  267,
   62,   41,  257,   43,   44,   45,  187,  275,  276,  277,
  125,  257,  258,  259,  260,  261,   44,    0,  257,  123,
   60,  125,   62,  204,  205,   41,  266,   43,   44,   45,
  257,    0,  278,  271,  257,  125,  217,  257,  258,  259,
  260,  261,  125,  123,   60,  125,   62,  257,  258,  259,
  260,  261,  233,  123,  125,    0,  256,  257,  278,  125,
    0,   44,  262,  263,  264,  265,    0,  267,  268,  269,
    0,  125,  272,  273,  274,  275,  276,  277,  259,  279,
  256,  257,    0,  123,  125,  125,  262,  263,  264,  265,
  125,  267,  268,  269,    0,    0,  272,  273,  274,  275,
  276,  277,    0,  279,  256,  257,    0,  123,   40,  125,
  262,  263,  264,  265,    0,  267,  268,  269,    0,  125,
  272,  273,  274,  275,  276,  277,   44,  279,  256,  257,
    0,  125,  125,  125,  262,  263,  264,  265,  125,  267,
  268,  269,  125,  125,  272,  273,  274,  275,  276,  277,
   44,  279,  256,  257,    0,  125,  125,  125,  262,  263,
  264,  265,  125,  267,  268,  269,   73,  174,  272,  273,
  274,  275,  276,  277,   44,  279,  256,  257,    5,    5,
   30,  125,  262,  263,  264,  265,    0,  267,  268,  269,
   45,  167,  272,  273,  274,  275,  276,  277,   44,  279,
  262,  263,  264,  265,   41,  123,   43,  125,   45,   41,
  125,   43,   -1,   45,   -1,   -1,  256,  257,   -1,   -1,
   -1,    0,  262,  263,  264,  265,   -1,  267,  268,  269,
   44,  125,  272,  273,  274,  275,  276,  277,   -1,  279,
  256,  257,   -1,   -1,   -1,    0,  262,  263,  264,  265,
   -1,  267,  268,  269,   -1,  125,  272,  273,  274,  275,
  276,  277,   41,  279,   43,   44,   45,   -1,   -1,    0,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  125,
   -1,   60,   -1,   62,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,   -1,   -1,  272,  273,    0,  275,  276,  277,   -1,
  279,  125,  256,  257,   41,   -1,   11,   -1,   45,   -1,
   15,   16,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   41,   -1,  256,  257,
   45,   41,   -1,   -1,  123,   45,  125,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   41,   61,   62,   44,   -1,
  125,   -1,   67,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  256,  257,   -1,   41,
   -1,   -1,   44,   -1,  125,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  256,  257,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,  267,  268,  269,  119,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,  256,  257,   44,   42,   -1,  123,   45,   -1,
   47,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,   41,   -1,   -1,
   44,  123,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,  262,  263,  264,  265,  125,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,  123,
  279,  256,  257,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,  123,  279,  256,  257,   -1,  223,   -1,
  257,  258,  259,  260,  261,   44,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  123,
  245,  278,  257,  258,  259,  260,  261,  257,  258,  259,
  260,  261,   42,   -1,   -1,   45,   -1,   47,  263,   -1,
   -1,   -1,  267,  278,   -1,   -1,   -1,   -1,  278,   44,
  256,  257,   -1,   -1,  279,  123,   -1,   -1,   -1,   -1,
   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,  275,
  276,  277,   -1,  279,  256,  257,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  267,  268,  269,  256,  257,
  272,  273,  274,  275,  276,  277,   -1,  279,   -1,  267,
   44,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   44,  279,  256,  257,  123,   -1,
  257,  258,  259,  260,  261,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,  279,
   -1,  278,  256,  257,   -1,  123,   -1,   -1,   -1,   -1,
   44,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   44,  279,   -1,   -1,   -1,  123,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   44,  123,  272,  273,  274,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   44,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  270,  271,  272,  273,   -1,  275,  276,  277,  123,
  279,  125,   -1,   -1,   -1,   44,   -1,  257,  258,  259,
  260,  261,   -1,  123,   -1,   -1,   -1,   -1,   -1,   44,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,  278,  125,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,
  275,  276,  277,  125,  279,   44,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  267,
  268,  269,   -1,  271,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  125,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  256,  257,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   44,
   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,  125,  267,  268,  269,
  256,  257,  272,  273,   44,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,  268,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  125,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  125,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  256,  257,   -1,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   52,
  279,   -1,  267,   -1,  269,   -1,   -1,  272,  273,   52,
  275,  276,  277,   -1,  279,   -1,  256,  257,   -1,  125,
   -1,   74,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   74,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  102,
  103,   -1,   -1,   -1,  107,   -1,   -1,  256,  257,  102,
  103,   -1,   -1,   -1,  107,   -1,   -1,   -1,  267,  268,
  269,   -1,  125,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  125,   -1,   -1,   -1,   -1,   -1,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,  156,  272,  273,  159,  275,  276,  277,
   -1,  279,   -1,  156,  167,  125,  159,  256,  257,   -1,
   -1,   -1,   38,   -1,  167,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,  125,
  279,   -1,   -1,   59,   -1,  198,   -1,   -1,   -1,  202,
  256,  257,   -1,  125,   -1,  198,   72,   73,   -1,  202,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  229,  125,   -1,   -1,
  233,  234,   -1,   -1,   -1,   -1,  229,   -1,   -1,   -1,
  233,  234,   -1,   -1,   -1,   -1,   -1,  113,   -1,   -1,
  253,  254,  125,  256,  257,   -1,   -1,   -1,  124,   -1,
  253,  254,   -1,  256,  257,   -1,  125,  270,  134,   -1,
  273,  256,  257,   -1,   -1,   -1,   -1,  270,   -1,   -1,
  273,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,  125,  279,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
   -1,  177,  272,  273,   -1,  275,  276,  277,  125,  279,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,  125,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,  125,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  256,  257,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  257,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,  267,  268,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,   -1,  269,   33,   34,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   85,   -1,  256,
  257,   -1,   90,   91,   92,   93,   -1,   -1,   96,   97,
  267,  268,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,  129,  130,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro ')' '{' '}'",
"metodo : metodo_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : IDENTIFICADOR lista_de_objetos",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro : tipo IDENTIFICADOR",
"parametro : tipo",
"parametro : IDENTIFICADOR",
"parametro :",
"parametro : parametro ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 323 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
// Esta funcion dado el acceso a un elemento de la tabla de simbolos elimina el simbolo y lo actualiza con el scope y el tipo de esa variable.
symbol* setNewScope(string key, string type, string scope, string uso){
        
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        tableSymbol->insert(newIdentificador);                          // insertamos el nuevo simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number = tableTercets->add(t);
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number = tableTercets->add(t);
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void checkClass(string key, string scope){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase"); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new vector<symbol*>; // inicializamos el vector de simbolos
                        lastClass = symbolFinded;
                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase"); 
                newIdentificador->attributesAndMethodsVector = new vector<symbol*>; // inicializamos el vector de simbolos
                lastClass = newIdentificador;
        } 
        actualClass = key; 
};
void addAtribute(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        int diff = tableSymbol->getDiffOffScope(key + scope, "atributo"); 
        if(diff == 0){
                yyerror("Redeclaracion de atributio en la misma clase");
        }else{
                tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
                
                // creamos el nuevo símbolo para el atributo
                symbol* newAtribute = new symbol(key+scope, "", type, "atributo");

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                lastClass->attributesAndMethodsVector->push_back(newAtribute);

                // seteamos que si se debe agregar un parametro se le haga a este método
                lastParam = newAtribute;
        }

        

        
};
void addMetodo(string key, string scope ){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // creamos el nuevo símbolo
        symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");

        // agregamos el nuevo símbolo al vector de simbolos de la clase        
        lastClass->attributesAndMethodsVector->push_back(newMetodo);
        
        // seteamos que si se debe agregar un parametro se le haga a este método
        lastParam = newMetodo;
};
void addParam(string key, string scope, string type){

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        lastParam->cantParam++;
        lastParam->typeParam = type;
        lastParam->nameParam = key;
};
#line 998 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 67 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 68 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 69 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 70 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 71 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 72 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 73 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 74 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 75 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 76 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 77 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 78 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 79 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 80 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 82 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 92 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 93 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 94 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 101 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 29:
#line 103 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 30:
#line 104 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 31:
#line 107 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope();}
break;
case 32:
#line 108 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 33:
#line 109 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 34:
#line 111 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope();}
break;
case 35:
#line 112 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 36:
#line 113 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 37:
#line 116 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "funcion"); if(diff == 0){yyerror("Redeclaracion de funcion en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, "void", tableSymbol->getScope(), "funcion"); lastParam = newIdentificador;} tableSymbol->addScope(yyvsp[0]->ptr); }
break;
case 38:
#line 119 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); }
break;
case 39:
#line 120 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 40:
#line 121 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "clase"); if(diff == 0){yyerror("Redeclaracion de funcion en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, "", tableSymbol->getScope(), "clase"); } tableSymbol->getSymbol(yyvsp[0]->ptr+tableSymbol->getScope())->forwarded = true; }
break;
case 41:
#line 122 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 42:
#line 123 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 43:
#line 126 "./gramaticaForGenCod.y"
{ checkClass(yyvsp[0]->ptr, tableSymbol->getScope()); yyval->ptr = yyvsp[0]->ptr; tableSymbol->addScope(yyvsp[0]->ptr);}
break;
case 44:
#line 128 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 46:
#line 130 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 48:
#line 133 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 49:
#line 134 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux); }
break;
case 50:
#line 136 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); }
break;
case 51:
#line 137 "./gramaticaForGenCod.y"
{ tableSymbol->deleteScope(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 52:
#line 138 "./gramaticaForGenCod.y"
{  tableSymbol->deleteScope();}
break;
case 53:
#line 141 "./gramaticaForGenCod.y"
{ addMetodo(yyvsp[0]->ptr, tableSymbol->getScope()); tableSymbol->addScope(yyvsp[0]->ptr);}
break;
case 54:
#line 142 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 58:
#line 152 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 59:
#line 153 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 60:
#line 154 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 61:
#line 157 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "var"); if(diff == 0){yyerror("Redeclaracion de variable en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, typeAux, tableSymbol->getScope(),"var");} }
break;
case 62:
#line 158 "./gramaticaForGenCod.y"
{ int diff = tableSymbol->getDiffOffScope(yyvsp[0]->ptr+tableSymbol->getScope(), "var"); if(diff == 0){yyerror("Redeclaracion de variable en el mismo ambito");}else{symbol* newIdentificador = setNewScope(yyvsp[0]->ptr, typeAux, tableSymbol->getScope(),"var");} }
break;
case 63:
#line 161 "./gramaticaForGenCod.y"
{ addParam(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type); yyval->type = yyvsp[-1]->type;}
break;
case 64:
#line 162 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 65:
#line 163 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 67:
#line 165 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 68:
#line 168 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 71:
#line 172 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 72:
#line 173 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 73:
#line 174 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 74:
#line 175 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 75:
#line 176 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 77:
#line 178 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 78:
#line 179 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 79:
#line 180 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 80:
#line 181 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 81:
#line 182 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 87:
#line 190 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 88:
#line 191 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 89:
#line 192 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 90:
#line 193 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 92:
#line 197 "./gramaticaForGenCod.y"
{ tableSymbol->deleteSymbol(yyvsp[-2]->ptr); symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(yyvsp[-2]->ptr+tableSymbol->getScope(), "var"); if(symbolFinded == nullptr){yyerror("No se encontro declaracion previa de la variable "+ yyvsp[-2]->ptr);}else{checkTypesAsignation(symbolFinded->type, yyvsp[0]->type); int number = addTercet("=", symbolFinded->lexema, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number);} }
break;
case 98:
#line 208 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-2]->type, yyvsp[0]->type)){yyval->type=yyvsp[-2]->type;}else{yyval->type="error";}; Tercet *t = new Tercet("+", yyvsp[-2]->ptr, yyvsp[0]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 99:
#line 209 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-2]->type, yyvsp[0]->type)){yyval->type=yyvsp[-2]->type;}else{yyval->type="error";}; Tercet *t = new Tercet("-", yyvsp[-2]->ptr, yyvsp[0]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 100:
#line 210 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-3]->type, yyvsp[0]->type)){yyval->type=yyvsp[-3]->type;}else{yyval->type="error";}; yywarning("Se detecto un error en operador, quedara '-'"); Tercet *t = new Tercet("-", yyvsp[-3]->ptr, yyvsp[-1]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 101:
#line 211 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-3]->type, yyvsp[0]->type)){yyval->type=yyvsp[-3]->type;}else{yyval->type="error";}; yywarning("Se detecto un error en operador, quedara '+'"); Tercet *t = new Tercet("+", yyvsp[-3]->ptr, yyvsp[-1]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 102:
#line 212 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-3]->type, yyvsp[0]->type)){yyval->type=yyvsp[-3]->type;}else{yyval->type="error";}; yywarning("Se detecto un error en operador, quedara '-'"); Tercet *t = new Tercet("-", yyvsp[-3]->ptr, yyvsp[-1]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 103:
#line 213 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-3]->type, yyvsp[0]->type)){yyval->type=yyvsp[-3]->type;}else{yyval->type="error";}; yywarning("Se detecto un error en operador, quedara '+'"); Tercet *t = new Tercet("+", yyvsp[-3]->ptr, yyvsp[-1]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 104:
#line 214 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 105:
#line 217 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-2]->type, yyvsp[0]->type)){yyval->type=yyvsp[-2]->type;}else{yyval->type="error";}; Tercet *t = new Tercet("*", yyvsp[-2]->ptr, yyvsp[0]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 106:
#line 218 "./gramaticaForGenCod.y"
{ if(checkTypesOperation(yyvsp[-2]->type, yyvsp[0]->type)){yyval->type=yyvsp[-2]->type;}else{yyval->type="error";}; Tercet *t = new Tercet("/", yyvsp[-2]->ptr, yyvsp[0]->ptr); int number = tableTercets->add(t); yyval->ptr = charTercetoId + to_string(number); }
break;
case 107:
#line 219 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 108:
#line 222 "./gramaticaForGenCod.y"
{ Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );}}
break;
case 109:
#line 225 "./gramaticaForGenCod.y"
{ int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 110:
#line 226 "./gramaticaForGenCod.y"
{ yywarning("Falta de ultimo parentesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 111:
#line 227 "./gramaticaForGenCod.y"
{ yywarning("Falta de primer parentesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 112:
#line 228 "./gramaticaForGenCod.y"
{ yywarning("Falta de parantesis en condicion"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 113:
#line 229 "./gramaticaForGenCod.y"
{ yyerror("Falta de condicion en el bloque de control IF"); int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); yyval->ptr = charTercetoId + to_string(number);}
break;
case 115:
#line 233 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 116:
#line 234 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 118:
#line 236 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 121:
#line 243 "./gramaticaForGenCod.y"
{ Tercet * t = popTercet();  if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));} int number =  addTercetAndStack("BI", "", ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 122:
#line 245 "./gramaticaForGenCod.y"
{ Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );} Tercet *t2 = popTercet(); int number; if(t2!=nullptr){int number = addTercet("BI", t2->getArg1(), "");} yyval->ptr = charTercetoId + to_string(number);}
break;
case 123:
#line 246 "./gramaticaForGenCod.y"
{ yywarning("Falta de DO en WHILE-DO"); Tercet *t = popTercet(); if (t!=nullptr){t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );} Tercet *t2 = popTercet();int number; if(t2!=nullptr){int number = addTercet("BI", t2->getArg1(), "");} yyval->ptr = charTercetoId + to_string(number);}
break;
case 124:
#line 249 "./gramaticaForGenCod.y"
{ addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), ""); }
break;
case 126:
#line 255 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet(">", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 127:
#line 256 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("<", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 128:
#line 257 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("==", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 129:
#line 258 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("!!", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 130:
#line 259 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet(">=", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 131:
#line 260 "./gramaticaForGenCod.y"
{ checkTypesCompare(yyvsp[-2]->type, yyvsp[0]->type); int number = addTercet("<=", yyvsp[-2]->ptr, yyvsp[0]->ptr); yyval->ptr = charTercetoId + to_string(number); }
break;
case 134:
#line 265 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 135:
#line 266 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 136:
#line 267 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 138:
#line 269 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 140:
#line 271 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 143:
#line 275 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 146:
#line 280 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 147:
#line 281 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 148:
#line 282 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 150:
#line 284 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 152:
#line 286 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 154:
#line 288 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 156:
#line 292 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 158:
#line 294 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 159:
#line 295 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 160:
#line 296 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 161:
#line 297 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 162:
#line 298 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 163:
#line 299 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 164:
#line 300 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 165:
#line 303 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = tableSymbol->getSymbol(yyvsp[0]->ptr)->type;}
break;
case 166:
#line 304 "./gramaticaForGenCod.y"
{ int number = addTercet("+", yyvsp[-1]->ptr, yyvsp[-1]->ptr); yyval->ptr = charTercetoId + to_string(number); yyval->type = tableSymbol->getSymbol(yyvsp[-1]->ptr)->type;}
break;
case 167:
#line 305 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 168:
#line 306 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 169:
#line 307 "./gramaticaForGenCod.y"
{ int number = addTercet("tof", " ", yyvsp[-1]->ptr); yyval->ptr = charTercetoId + to_string(number); yyval->type = "float"; }
break;
case 171:
#line 309 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 172:
#line 312 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 173:
#line 315 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 174:
#line 316 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 175:
#line 317 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 176:
#line 318 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 177:
#line 319 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 1662 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
