#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaComCHZGenerativa.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 43 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
    3,    3,    3,    3,    3,    2,    2,    4,    4,    4,
    4,   10,   10,   10,   10,   10,   10,   11,    8,    8,
    8,   14,   14,   14,   14,   14,   15,   15,   15,   16,
   16,    9,   17,   17,    6,    6,    6,    7,    7,   12,
   12,   12,   12,   12,   13,   13,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   18,   18,
    5,    5,    5,    5,    5,    5,    5,    5,   20,   20,
   21,   21,   21,   21,   26,   26,   26,   26,   26,   26,
   26,   27,   27,   27,   22,   29,   29,   29,   29,   29,
   30,   30,   30,   30,   30,   32,   34,   33,   25,   25,
   36,   37,   31,   31,   31,   31,   31,   31,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   28,   28,   28,   28,   28,   28,   28,   24,   23,
   23,   23,   23,   23,
};
short yylen[] = {                                         2,
    3,    2,    1,    1,    4,    3,    1,    2,    2,    4,
    3,    1,    2,    2,    3,    3,    2,    0,    2,    1,
    2,    2,    1,    1,    2,    2,    1,    2,    1,    1,
    1,    7,    7,    6,    8,    8,    7,    2,    5,    2,
    4,    4,    3,    3,    2,    2,    7,    6,    8,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    2,
    1,    1,    0,    4,    1,    1,    3,    2,    4,    3,
    4,    3,    2,    1,    3,    2,    3,    2,    2,    1,
    1,    1,    1,    2,    2,    2,    2,    1,    3,    5,
    4,    3,    6,    5,    3,    3,    4,    4,    4,    4,
    1,    3,    3,    1,    3,    3,    2,    2,    1,    2,
    4,    3,    3,    2,    3,    1,    1,    1,    4,    3,
    1,    1,    3,    3,    3,    3,    3,    3,    3,    5,
    6,    5,    4,    2,    2,    4,    3,    2,    6,    7,
    4,    6,    7,    6,    5,    3,    3,    5,    4,    3,
    2,    3,    2,    2,    1,    3,    2,    2,    1,    3,
    2,    1,    2,    1,    1,    4,    3,    1,    1,    1,
    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  121,   55,   56,   57,    0,
    0,    4,    0,    0,    0,    0,   20,    0,    0,    0,
   29,   30,   31,    0,   81,   82,   83,   88,    0,   25,
   54,    0,    0,    0,    0,   38,    0,    0,  169,  170,
  172,  168,    0,    0,    0,  165,  164,    0,    0,  104,
    0,    0,   85,   84,   86,   87,    0,    0,    0,    0,
   26,    9,   19,   14,    0,   21,   22,   59,    0,    0,
    0,   92,    0,    0,    0,    0,   62,    0,    0,  163,
    0,    0,  110,    0,  171,  173,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  105,    0,  116,  108,    0,    6,    0,   11,
    0,   16,    0,    0,    0,  122,  120,   91,    0,    0,
   53,   60,    0,    0,  167,    0,  106,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
  103,  151,  138,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  135,  134,  118,  114,    0,    0,  117,    0,
    0,   41,    0,    0,    0,    0,    5,   10,   58,    0,
  119,   94,    0,    0,    0,    0,  166,    0,    0,    0,
    0,  161,  137,    0,    0,    0,  158,  154,    0,    0,
  129,    0,    0,  150,  147,  146,  115,    0,  113,   46,
   50,    0,   39,    0,    0,   45,    0,    0,   93,    0,
    0,   80,    0,    0,   66,   64,  136,  149,    0,    0,
  141,  160,  133,    0,    0,  156,  152,  111,   44,    0,
   43,    0,   34,    0,    0,    0,    0,   78,    0,   33,
    0,   79,  148,  145,    0,    0,  130,    0,    0,  132,
   42,    0,   37,    0,   32,    0,   77,   36,    0,    0,
   72,  142,    0,  144,  139,    0,  131,    0,   35,    0,
   71,  143,  140,   48,    0,    0,    0,   47,   49,
};
short yydgoto[] = {                                      14,
   15,  100,  212,   18,   19,   20,   69,   21,   22,   23,
   24,   79,  213,  164,  165,  166,   35,  214,  215,   25,
   26,   27,   46,   47,   28,   48,   49,   50,   51,  103,
   52,  104,  157,  158,  116,   29,  117,  149,
};
short yysindex[] = {                                    872,
  -20,  -38,  -40,  -24,   -9,    0,    0,    0,    0, -240,
  942,    0,  -13,    0, 1348, 1372,    0,  -13,  -13, -202,
    0,    0,    0,   22,    0,    0,    0,    0,  -24,    0,
    0,  -19,  258, -181,   29,    0, -176,  -42,    0,    0,
    0,    0,   55,  410, -140,    0,    0,  139,  -15,    0,
  904,   62,    0,    0,    0,    0,  -16, -146, 1386, 1410,
    0,    0,    0,    0, 1435,    0,    0,    0,   56, -176,
  775,    0,  106,   53,  -27, -145,    0, -135,  -12,    0,
 -132,  258,    0,   89,    0,    0,  258,  258,  258,  258,
  635,  733,  258,  258,  258,  258,   87,   92,  956,  253,
   93,   95,    0,  749,    0,    0, -122,    0, -112,    0,
 1449,    0, -105,   -8,  904,    0,    0,    0,  501,  258,
    0,    0,   33,  -89,    0,  130,    0,   53,   53,   53,
   53,  258,  258,  -15,  258,  258,  -15,   53,   53,    0,
    0,    0,    0,  114,  -39, 1582,  119,  -13, 1129,  123,
  133,  146,    0,    0,    0,    0,  789,  -92,    0,  147,
  -65,    0, -202, -107,  149,  154,    0,    0,    0,   72,
    0,    0,  135,   53,  970,  -60,    0,  -15,  -15,  -15,
  -15,    0,    0,   75,  -34, 1176,    0,    0,  159,  994,
    0,  -13,  -13,    0,    0,    0,    0,  -63,    0,    0,
    0,   -3,    0, -202,  163,    0, -176,  816,    0, 1019,
 1596,    0,   84, 1610,    0,    0,    0,    0,   85, 1033,
    0,    0,    0, 1057, 1463,    0,    0,    0,    0,    6,
    0,   16,    0, 1212,   86, 1596, 1610,    0,   88,    0,
 1092,    0,    0,    0, 1487, 1501,    0, 1515, 1529,    0,
    0,   91,    0,   90,    0, 1610,    0,    0, 1596, 1610,
    0,    0, 1543,    0,    0, 1568,    0,  928,    0, 1610,
    0,    0,    0,    0, 1596,  100,  102,    0,    0,
};
short yyrindex[] = {                                    212,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  216,    0,  232,    0,  231,  243,    0,  446,  470,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  218,    0,   43,    1,    0,    0,
    0,    0,    0,    0,   25,    0,    0,    0,   49,    0,
    0,  830,    0,    0,    0,    0,  283,  255,  256,  260,
    0,    0,    0,    0,  261,    0,    0,    0,  307,   43,
    0,    0,    0,  331,    0,    0,    0,   64,    0,    0,
    0,    0,    0,  858,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  267,    0,
  271,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  497,  594,  608,
  632,    0,    0,   73,    0,    0,   97,  663,  688,    0,
    0,    0,    0,    0,    0,    0, 1282, 1296,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  213,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  355,    0,    0,    0,  121,  161,  185,
  422,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1310, 1334,    0,    0,    0,    0,  387,    0,    0,
    0,    0,    0,    0,    0,    0,   43,    0,    0,  160,
    0,    0,    0,  166,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  170,  171,    0,    0,    0,
  184,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  190,    0,    0,  194,  195,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  207,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    4,  629,  554, 1274, 1280,  -18, -151,    0,    0,    0,
    0,  -64, -197,    0,  108,    0,    0, -201, -182,    0,
    0,    0,  274,  328,    0,  708,  -53,   32,  305,    0,
  295,    0,    0,  187,  -44,    0,  241, -116,
};
#define YYTABLESIZE 1889
short yytable[] = {                                      37,
  162,   32,  162,   81,  184,  114,  105,   34,  237,  219,
  235,  202,  119,  239,   59,   44,   57,  203,   78,   65,
   45,   72,   33,   30,  174,   45,   95,  238,  123,  186,
   13,   96,  170,  120,  256,   45,  254,  134,  137,  260,
  229,  162,  162,  162,  162,  162,  124,  162,  101,  251,
  124,   78,  230,  257,   68,  113,  252,  270,  261,  159,
  162,   70,  162,  111,  113,  174,  174,  174,  174,  174,
  276,  174,   95,  225,  124,   75,  271,  277,  178,  179,
   77,  180,  181,   63,  174,  183,  174,   76,  163,  101,
  218,  101,  101,  101,   82,   91,   96,   92,    7,    8,
    9,   63,  106,  246,   61,  176,  107,  249,  101,  108,
  101,  121,  159,   95,  113,   95,   95,   95,   85,   86,
   98,  122,   61,  162,  125,  162,  140,  141,  263,  127,
  142,  266,   95,  160,   95,  143,  153,   96,  154,   96,
   96,   96,  232,  167,  161,  204,  118,  174,   91,  174,
   92,  169,    7,    8,    9,  175,   96,  182,   96,  161,
  100,   98,  187,   98,   98,   98,  194,    7,    8,    9,
  177,  101,   91,  101,   92,  209,  195,   91,  199,   92,
   98,   91,   98,   92,   97,    7,    8,    9,   78,  196,
  200,  201,  206,  207,  208,   95,  216,   95,   94,  217,
   93,  100,  222,  100,  100,  100,  231,  228,  240,  243,
  255,   18,  258,  268,  269,    3,   36,   52,   31,   96,
  100,   96,  100,   80,  278,   97,  279,   97,   97,   97,
    7,   27,   38,   39,   40,   41,   42,   38,   39,   40,
   41,   42,   12,   98,   97,   98,   97,   53,   39,   40,
   41,   54,   51,   43,    2,    8,  162,  162,   43,   13,
   17,   52,  162,  162,  162,  162,    1,  162,  162,  162,
   15,  205,  162,  162,  162,  162,  162,  162,   55,  162,
  174,  174,   40,  100,   74,  100,  174,  174,  174,  174,
   65,  174,  174,  174,   73,   76,  174,  174,  174,  174,
  174,  174,   45,  174,  101,  101,   28,   97,   68,   97,
  101,  101,  101,  101,   75,  101,  101,  101,   67,   70,
  101,  101,  101,  101,  101,  101,   40,  101,   95,   95,
   89,   69,   56,   71,   95,   95,   95,   95,   84,   95,
   95,   95,   52,  198,   95,   95,   95,   95,   95,   95,
   28,   95,   96,   96,   90,  171,   27,    0,   96,   96,
   96,   96,    0,   96,   96,   96,    0,    0,   96,   96,
   96,   96,   96,   96,   89,   96,   98,   98,    0,    0,
    0,    0,   98,   98,   98,   98,  112,   98,   98,   98,
    0,    0,   98,   98,   98,   98,   98,   98,   90,   98,
   87,   88,   89,   90,    0,    0,    0,   40,    0,    0,
    0,    0,    0,    0,    0,    0,  100,  100,    0,    0,
    0,   99,  100,  100,  100,  100,    0,  100,  100,  100,
  112,   28,  100,  100,  100,  100,  100,  100,    0,  100,
   97,   97,    0,    0,    0,   23,   97,   97,   97,   97,
   83,   97,   97,   97,   45,   89,   97,   97,   97,   97,
   97,   97,   99,   97,   99,   99,   99,    0,    0,   24,
    0,    0,    0,   52,   52,    0,    0,    0,    0,   90,
    0,   99,    0,   99,   52,   52,   52,   27,   27,   52,
   52,    0,   52,   52,   52,    0,   52,    0,   27,   27,
   27,    0,    0,   27,   27,    0,   27,   27,   27,    2,
   27,  112,    0,    0,   38,   39,   40,   41,   42,    3,
  150,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    0,    0,   43,    0,  125,   40,   40,
  125,  172,    0,    0,   99,   45,   99,    0,    0,   40,
   40,   40,    0,   17,   40,   40,    0,   40,   40,   40,
    0,   40,   28,   28,   17,    0,    0,    0,   63,   17,
   23,    0,    0,   28,   28,   28,    0,    0,   28,   28,
    0,   28,   28,   28,    0,   28,   89,   89,    0,    0,
    0,    0,    0,    0,   24,    0,    0,   89,   89,   89,
    0,    0,   89,   89,    0,   89,   89,   89,    0,   89,
   90,   90,   63,   17,    0,    0,    0,    0,   63,  125,
    0,   90,   90,   90,    0,    0,   90,   90,   16,   90,
   90,   90,    0,   90,  126,    0,    0,  126,    0,   60,
    0,   61,  112,  112,    0,    0,   66,   67,  128,    0,
    0,  128,    0,  112,  112,  112,    0,    0,  112,  112,
    0,  112,  112,  112,   63,  112,   38,   39,   40,   41,
   42,    0,  127,    0,    0,  127,  132,   99,   99,   45,
    0,  133,    0,   99,   99,   99,   99,   43,   99,   99,
   99,    0,    0,   99,   99,   99,   99,   99,   99,    0,
   99,   23,   23,  123,    0,    0,  123,    0,    0,    0,
    0,    0,   23,   23,   23,    0,  126,   23,   23,    0,
   23,   23,   23,    0,   23,   24,   24,  146,  124,    0,
  128,  124,    0,    0,    0,    0,   24,   24,   24,   73,
   74,   24,   24,    0,   24,   24,   24,    0,   24,    0,
    0,    0,  125,  125,  127,    0,    0,   38,   39,   40,
   41,   42,    0,  125,  125,  125,    0,  242,  125,  125,
  125,  125,  125,  125,  135,  125,  188,   45,   43,  136,
    0,    0,    0,    0,    0,  123,    0,    0,    0,  126,
  242,    0,   13,    0,  128,  129,  130,  131,    0,    0,
  138,  139,    0,  211,    0,    0,    0,    0,    0,  242,
  124,    0,    0,  242,    0,    0,    0,    0,   13,    0,
  226,  227,    0,  242,    0,    0,  173,  174,    0,    0,
    0,    0,   13,    0,    0,    0,  234,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  126,
  126,    0,  248,    0,    0,    0,    0,    0,    0,   13,
  126,  126,  126,  128,  128,  126,  126,  126,  126,  126,
  126,   99,  126,  109,  128,  128,  128,    0,    0,  128,
  128,  128,  128,  128,  128,    0,  128,  127,  127,    0,
    0,   38,   39,   40,   41,   42,  275,   99,  127,  127,
  127,  107,    0,  127,  127,  127,  127,  127,  127,    0,
  127,   99,   43,    0,    0,   13,    0,    0,  123,  123,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  123,
  123,  123,    0,    0,  123,  123,  123,  123,  123,  123,
  233,  123,    0,  124,  124,    0,    0,   13,    0,    0,
    0,    0,  109,    0,  124,  124,  124,    0,    0,  124,
  124,  124,  124,  124,  124,    0,  124,    0,    0,    0,
    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
  107,    0,    0,    0,    0,   13,    0,    0,    0,   38,
   39,   40,   41,   42,   11,    0,   12,    0,    0,   13,
    0,    0,    0,    0,   97,    2,    0,    0,    0,    0,
   43,    0,    0,   13,    0,    3,   98,    4,  155,  156,
    5,    6,    0,    7,    8,    9,   99,   10,    0,    0,
   97,    2,    0,    0,    0,    0,    0,  224,    0,    0,
    0,    3,   98,    4,   97,    2,    5,    6,  115,    7,
    8,    9,  274,   10,    0,    3,   98,    4,    0,  197,
    5,    6,  236,    7,    8,    9,   58,   10,    0,    0,
    0,    1,    2,    0,    0,    0,  245,    0,    0,    0,
    0,    0,    3,  210,    4,  109,  109,    5,    6,    0,
    7,    8,    9,    0,   10,    0,  109,  109,  109,    0,
   13,  109,  109,  109,  109,  109,  109,    0,  109,    0,
    0,    0,    0,  107,  107,    0,    0,    0,  223,    0,
    0,    0,    0,    0,  107,  107,  107,    1,    2,  107,
  107,  107,  107,  107,  107,  259,  107,    0,    3,    0,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,    0,    0,    0,    0,  244,    0,   97,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,   98,    4,    0,    0,    5,    6,    0,    7,    8,
    9,  247,   10,    1,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,  210,    4,    1,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,  144,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,  145,    4,    1,    2,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    3,  210,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,  144,
    2,    0,    0,  191,    0,    0,    0,    0,    0,    0,
    3,    0,    4,    0,    0,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    1,    2,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,  210,    4,  144,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
  221,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,  144,    2,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    3,  101,    4,    0,    0,    5,    6,
  102,    7,    8,    9,    0,   10,  253,    0,    0,    0,
    0,    0,    0,    0,  101,    0,    0,    1,    2,    0,
  102,    0,    0,    0,    0,    0,    0,    0,    3,  210,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,  147,  151,    0,    0,    0,  101,  148,  152,
    0,    0,    0,  102,  189,    2,    0,    0,  101,    0,
    0,    0,    0,    0,  102,    3,  190,    4,    0,    0,
    5,    6,    0,    7,    8,    9,  159,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
  155,    0,  192,    0,    0,  148,    0,    0,  193,    0,
  101,  189,    2,    0,  157,    0,  102,    0,    0,    0,
    0,    0,    3,  220,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    0,    0,  153,  192,
    0,    0,    0,  147,    0,  193,    0,    1,    2,  148,
    0,    0,   62,    0,    0,    0,    0,    0,    3,  210,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,  147,    0,    0,   64,  147,  192,  148,
    0,    0,    0,  148,  193,    0,    0,    0,    0,    0,
  109,    0,    0,    0,    0,    0,    0,    0,  147,  192,
    0,  147,  192,    0,  148,  193,    0,  148,  193,    0,
    0,    0,    0,    0,  110,    0,  192,  159,  159,  192,
    0,    0,  193,    0,    0,  193,    0,    0,  159,  159,
  159,  155,  155,  159,  159,    0,  159,  159,  159,  112,
  159,    0,  155,  155,  155,  157,  157,  155,  155,    0,
  155,  155,  155,  168,  155,    0,  157,  157,  157,    0,
    0,  157,  157,    0,  157,  157,  157,  250,  157,  153,
  153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  153,  153,  153,    1,    2,  153,  153,    0,  153,  153,
  153,  262,  153,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,  264,   10,    1,    2,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    3,  265,
    4,    1,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,  267,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    1,    2,  272,    0,    0,
    0,    0,    0,    0,    0,    0,    3,    0,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    1,    2,  273,    0,    0,    0,    0,    0,    0,    0,
    0,    3,    0,    4,    1,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,  189,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,  144,    2,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    3,    0,    4,  189,    2,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    3,    0,    4,
  144,    2,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    3,    0,    4,  189,    2,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    3,    0,    4,  189,    2,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    3,
    0,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,  189,    2,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    3,    0,    4,  144,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,  185,
    4,    1,    2,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    3,  210,    4,    1,    2,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    3,  241,    4,    0,
    0,    5,    6,    0,    7,    8,    9,    0,   10,
};
short yycheck[] = {                                      40,
    0,   40,  125,   46,   44,   70,   51,   46,  210,   44,
  208,  163,   40,  211,   11,   40,  257,  125,   37,   16,
   45,   41,   61,   44,    0,   45,   42,  210,   41,  146,
   44,   47,   41,   61,  236,   45,  234,   91,   92,  241,
   44,   41,   42,   43,   44,   45,   59,   47,    0,   44,
   59,   70,  204,  236,  257,   59,   41,  259,  241,  104,
   60,   40,   62,   60,   59,   41,   42,   43,   44,   45,
  268,   47,    0,  190,   59,  257,  259,  275,  132,  133,
  257,  135,  136,   41,   60,  125,   62,   59,  107,   41,
  125,   43,   44,   45,   40,   43,    0,   45,  275,  276,
  277,   59,   41,  220,   41,  124,  123,  224,   60,  256,
   62,  257,  157,   41,   59,   43,   44,   45,  259,  260,
    0,  257,   59,  123,  257,  125,   95,   96,  245,   41,
   44,  248,   60,  256,   62,   44,   44,   41,   44,   43,
   44,   45,  207,  256,  267,  164,   41,  123,   43,  125,
   45,  257,  275,  276,  277,  123,   60,   44,   62,  267,
    0,   41,   44,   43,   44,   45,   44,  275,  276,  277,
   41,  123,   43,  125,   45,   41,   44,   43,  271,   45,
   60,   43,   62,   45,    0,  275,  276,  277,  207,   44,
   44,  257,   44,   40,  123,  123,  257,  125,   60,  125,
   62,   41,   44,   43,   44,   45,   44,  271,  125,  125,
  125,    0,  125,  123,  125,    0,  257,    0,  257,  123,
   60,  125,   62,  266,  125,   41,  125,   43,   44,   45,
    0,    0,  257,  258,  259,  260,  261,  257,  258,  259,
  260,  261,    0,  123,   60,  125,   62,  257,  258,  259,
  260,  261,   40,  278,    0,    0,  256,  257,  278,    0,
    0,   44,  262,  263,  264,  265,    0,  267,  268,  269,
    0,  164,  272,  273,  274,  275,  276,  277,    5,  279,
  256,  257,    0,  123,  125,  125,  262,  263,  264,  265,
  125,  267,  268,  269,  125,  125,  272,  273,  274,  275,
  276,  277,   45,  279,  256,  257,    0,  123,  125,  125,
  262,  263,  264,  265,  125,  267,  268,  269,  125,  125,
  272,  273,  274,  275,  276,  277,   44,  279,  256,  257,
    0,  125,    5,   29,  262,  263,  264,  265,   44,  267,
  268,  269,  125,  157,  272,  273,  274,  275,  276,  277,
   44,  279,  256,  257,    0,  115,  125,   -1,  262,  263,
  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   44,  279,  256,  257,   -1,   -1,
   -1,   -1,  262,  263,  264,  265,    0,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,   44,  279,
  262,  263,  264,  265,   -1,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,    0,  262,  263,  264,  265,   -1,  267,  268,  269,
   44,  125,  272,  273,  274,  275,  276,  277,   -1,  279,
  256,  257,   -1,   -1,   -1,    0,  262,  263,  264,  265,
   41,  267,  268,  269,   45,  125,  272,  273,  274,  275,
  276,  277,   41,  279,   43,   44,   45,   -1,   -1,    0,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  125,
   -1,   60,   -1,   62,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,  257,
  279,  125,   -1,   -1,  257,  258,  259,  260,  261,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,  278,   -1,   41,  256,  257,
   44,   41,   -1,   -1,  123,   45,  125,   -1,   -1,  267,
  268,  269,   -1,    0,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   11,   -1,   -1,   -1,   15,   16,
  125,   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
  256,  257,   59,   60,   -1,   -1,   -1,   -1,   65,  123,
   -1,  267,  268,  269,   -1,   -1,  272,  273,    0,  275,
  276,  277,   -1,  279,   41,   -1,   -1,   44,   -1,   11,
   -1,   13,  256,  257,   -1,   -1,   18,   19,   41,   -1,
   -1,   44,   -1,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,  111,  279,  257,  258,  259,  260,
  261,   -1,   41,   -1,   -1,   44,   42,  256,  257,   45,
   -1,   47,   -1,  262,  263,  264,  265,  278,  267,  268,
  269,   -1,   -1,  272,  273,  274,  275,  276,  277,   -1,
  279,  256,  257,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,  123,  272,  273,   -1,
  275,  276,  277,   -1,  279,  256,  257,   99,   41,   -1,
  123,   44,   -1,   -1,   -1,   -1,  267,  268,  269,   32,
   33,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,  256,  257,  123,   -1,   -1,  257,  258,  259,
  260,  261,   -1,  267,  268,  269,   -1,  214,  272,  273,
  274,  275,  276,  277,   42,  279,  148,   45,  278,   47,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   82,
  237,   -1,   44,   -1,   87,   88,   89,   90,   -1,   -1,
   93,   94,   -1,  175,   -1,   -1,   -1,   -1,   -1,  256,
  123,   -1,   -1,  260,   -1,   -1,   -1,   -1,   44,   -1,
  192,  193,   -1,  270,   -1,   -1,  119,  120,   -1,   -1,
   -1,   -1,   44,   -1,   -1,   -1,  208,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,  224,   -1,   -1,   -1,   -1,   -1,   -1,   44,
  267,  268,  269,  256,  257,  272,  273,  274,  275,  276,
  277,  123,  279,   44,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,  256,  257,   -1,
   -1,  257,  258,  259,  260,  261,  268,  123,  267,  268,
  269,   44,   -1,  272,  273,  274,  275,  276,  277,   -1,
  279,  123,  278,   -1,   -1,   44,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,  274,  275,  276,  277,
  125,  279,   -1,  256,  257,   -1,   -1,   44,   -1,   -1,
   -1,   -1,  123,   -1,  267,  268,  269,   -1,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,   -1,   -1,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   -1,   -1,   44,   -1,   -1,   -1,  257,
  258,  259,  260,  261,  123,   -1,  125,   -1,   -1,   44,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   44,   -1,  267,  268,  269,  270,  271,
  272,  273,   -1,  275,  276,  277,  123,  279,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,   -1,   44,   -1,   -1,
   -1,  267,  268,  269,  256,  257,  272,  273,  274,  275,
  276,  277,  125,  279,   -1,  267,  268,  269,   -1,  271,
  272,  273,   44,  275,  276,  277,  125,  279,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  267,  268,  269,   -1,
   44,  272,  273,  274,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,  274,  275,  276,  277,   44,  279,   -1,  267,   -1,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,  125,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,  256,
  257,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  256,  257,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
  125,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   51,  269,   -1,   -1,  272,  273,
   51,  275,  276,  277,   -1,  279,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   71,   -1,   -1,  256,  257,   -1,
   71,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   99,  100,   -1,   -1,   -1,  104,   99,  100,
   -1,   -1,   -1,  104,  256,  257,   -1,   -1,  115,   -1,
   -1,   -1,   -1,   -1,  115,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,  125,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  146,
  125,   -1,  149,   -1,   -1,  146,   -1,   -1,  149,   -1,
  157,  256,  257,   -1,  125,   -1,  157,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  125,  186,
   -1,   -1,   -1,  190,   -1,  186,   -1,  256,  257,  190,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,  220,   -1,   -1,  125,  224,  225,  220,
   -1,   -1,   -1,  224,  225,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  245,  246,
   -1,  248,  249,   -1,  245,  246,   -1,  248,  249,   -1,
   -1,   -1,   -1,   -1,  125,   -1,  263,  256,  257,  266,
   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,  125,
  279,   -1,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,  125,  279,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,  125,  279,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,  268,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,  125,  279,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,  125,  279,  256,  257,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  125,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  125,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,  256,  257,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  267,   -1,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  256,  257,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,   -1,  269,  256,  257,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,
   -1,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,  256,  257,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,  267,  268,  269,   -1,
   -1,  272,  273,   -1,  275,  276,  277,   -1,  279,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"programa :",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : CLASS IDENTIFICADOR '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS IDENTIFICADOR '{' '}'",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_variables ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : tipo lista_de_variables ','",
"lista_atributos_y_metodos : metodo ','",
"lista_atributos_y_metodos : error ','",
"metodo : metodo_name '(' parametro ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro ')' '{' '}'",
"metodo : metodo_name '(' parametro ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : IDENTIFICADOR lista_de_objetos",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro : tipo IDENTIFICADOR",
"parametro : tipo",
"parametro : IDENTIFICADOR",
"parametro :",
"parametro : parametro ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 316 "./gramaticaComCHZGenerativa.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
// Esta funcion dado el acceso a un elemento de la tabla de simbolos elimina el simbolo y lo actualiza con el scope y el tipo de esa variable.
symbol* setNewScope(string key, string type, string scope, string uso){
        
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        tableSymbol->insert(newIdentificador);                          // insertamos el nuevo simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number = tableTercets->add(t);
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number = tableTercets->add(t);
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}
#line 914 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 64 "./gramaticaComCHZGenerativa.y"
{  yyPrintInLine("Se detecto un programa");}
break;
case 2:
#line 65 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 3:
#line 66 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 4:
#line 67 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 5:
#line 68 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 6:
#line 69 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 7:
#line 70 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 8:
#line 71 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 9:
#line 72 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 10:
#line 73 "./gramaticaComCHZGenerativa.y"
{  yyPrintInLine("Se detecto un programa"); }
break;
case 11:
#line 74 "./gramaticaComCHZGenerativa.y"
{  yyPrintInLine("Se detecto un programa"); }
break;
case 12:
#line 75 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 76 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 77 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 78 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 79 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 80 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 18:
#line 81 "./gramaticaComCHZGenerativa.y"
{ yyerror("No hay programa"); }
break;
case 23:
#line 90 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 91 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 25:
#line 92 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 28:
#line 99 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 30:
#line 101 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 31:
#line 102 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 33:
#line 106 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 34:
#line 107 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 36:
#line 110 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 37:
#line 111 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 38:
#line 114 "./gramaticaComCHZGenerativa.y"
{  }
break;
case 39:
#line 117 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de clase");}
break;
case 40:
#line 118 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de clase adelantada");}
break;
case 41:
#line 119 "./gramaticaComCHZGenerativa.y"
{yywarning("Se detecto una declaracion de clases vacia");}
break;
case 42:
#line 121 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 44:
#line 123 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 46:
#line 125 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia invalida dentro de clase"); }
break;
case 47:
#line 129 "./gramaticaComCHZGenerativa.y"
{  yyPrintInLine("Se detecto declaracion de metodo en clase");}
break;
case 48:
#line 130 "./gramaticaComCHZGenerativa.y"
{  yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 49:
#line 131 "./gramaticaComCHZGenerativa.y"
{  yyPrintInLine("Se detecto declaracion de metodo en clase"); }
break;
case 50:
#line 134 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 51:
#line 135 "./gramaticaComCHZGenerativa.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 55:
#line 145 "./gramaticaComCHZGenerativa.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 56:
#line 146 "./gramaticaComCHZGenerativa.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 57:
#line 147 "./gramaticaComCHZGenerativa.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 58:
#line 150 "./gramaticaComCHZGenerativa.y"
{  }
break;
case 59:
#line 151 "./gramaticaComCHZGenerativa.y"
{  }
break;
case 60:
#line 154 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 61:
#line 155 "./gramaticaComCHZGenerativa.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 62:
#line 156 "./gramaticaComCHZGenerativa.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 64:
#line 158 "./gramaticaComCHZGenerativa.y"
{ yyerror("Exceso de parametros"); }
break;
case 65:
#line 161 "./gramaticaComCHZGenerativa.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 68:
#line 165 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 69:
#line 166 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 70:
#line 167 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 71:
#line 168 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 72:
#line 169 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 74:
#line 171 "./gramaticaComCHZGenerativa.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 75:
#line 172 "./gramaticaComCHZGenerativa.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 76:
#line 173 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 77:
#line 174 "./gramaticaComCHZGenerativa.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 78:
#line 175 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 81:
#line 180 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto asignacion"); }
break;
case 82:
#line 181 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto invocacion"); }
break;
case 83:
#line 182 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto un if-else"); }
break;
case 84:
#line 183 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto una impresion de una cadena"); }
break;
case 85:
#line 184 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 86:
#line 185 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 87:
#line 186 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 88:
#line 187 "./gramaticaComCHZGenerativa.y"
{ yyPrintInLine("Se detecto un while"); }
break;
case 89:
#line 190 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 97:
#line 203 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detectaron multiples operadores '-' '*', quedara '-'");}
break;
case 98:
#line 204 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detectaron multiples operadores '+' '*', quedara '+'");}
break;
case 99:
#line 205 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detectaron multiples operadores '-' '/', quedara '-'");}
break;
case 100:
#line 206 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detectaron multiples operadores '+' '/', quedara '+'");}
break;
case 105:
#line 215 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 106:
#line 218 "./gramaticaComCHZGenerativa.y"
{  }
break;
case 107:
#line 219 "./gramaticaComCHZGenerativa.y"
{ yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 108:
#line 220 "./gramaticaComCHZGenerativa.y"
{ yywarning("Falta de primer parentesis en condicion"); }
break;
case 109:
#line 221 "./gramaticaComCHZGenerativa.y"
{ yywarning("Falta de parantesis en condicion"); }
break;
case 110:
#line 222 "./gramaticaComCHZGenerativa.y"
{ yyerror("Falta de condicion en el bloque de control IF");}
break;
case 112:
#line 226 "./gramaticaComCHZGenerativa.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 113:
#line 227 "./gramaticaComCHZGenerativa.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 115:
#line 229 "./gramaticaComCHZGenerativa.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 118:
#line 236 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 119:
#line 238 "./gramaticaComCHZGenerativa.y"
{ }
break;
case 120:
#line 239 "./gramaticaComCHZGenerativa.y"
{ yywarning("Falta de DO en WHILE-DO"); }
break;
case 121:
#line 242 "./gramaticaComCHZGenerativa.y"
{  }
break;
case 131:
#line 258 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 132:
#line 259 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 133:
#line 260 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 135:
#line 262 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 137:
#line 264 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 140:
#line 268 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 143:
#line 273 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 144:
#line 274 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 145:
#line 275 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 147:
#line 277 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 149:
#line 279 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 151:
#line 281 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 153:
#line 285 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 155:
#line 287 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 156:
#line 288 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 157:
#line 289 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 158:
#line 290 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 159:
#line 291 "./gramaticaComCHZGenerativa.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 160:
#line 292 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 161:
#line 293 "./gramaticaComCHZGenerativa.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 168:
#line 302 "./gramaticaComCHZGenerativa.y"
{ yyerror("No se puede operar con cadena de caracteres"); }
break;
case 174:
#line 312 "./gramaticaComCHZGenerativa.y"
{ yyerror("Falta constante numérica en la expresión"); }
break;
#line 1486 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
