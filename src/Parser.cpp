#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
#endif
#define YYBYACC 1
#line 2 "./gramaticaForGenCod.y"

#include "include/types.hpp"
#include "include/TableSymbol.hpp"
#include "include/TableReservedWord.hpp"
#include "include/Lexico.hpp"
#include "include/Tercets.hpp"
#include "include/VectorOfFunction.hpp"

#include <iostream>
#include <fstream>
#include <string>
#include <stack>

using namespace std;

/* generamos la tabla de simbolos*/
TableSymbol* tableSymbol = new TableSymbol();

/* generamos la tabla de palabras reservadas*/
TableReservedWord* tableRWords = new TableReservedWord();

VectorOfFunction * vectorOfFunction = new VectorOfFunction(); /* este vector se guarda las listas de tercetos instanciadas y a usar, como funciones en main o métodos de un objeto instanciado*/
VectorOfFunction * vectorOfFunctionDeclaredInClasses = new VectorOfFunction(); /* este vector se usa para cuando declaramos un método o una función dentro de una clase (esto es una declaración y se debe instanciar por cada objeto)*/
stack<functionStack*>* stackFunction = new stack<functionStack*>();
int cantOfRecursions = 0;

int lineNumber = 1;
bool isErrorInCode = false;
Tercets *tableTercets = new Tercets();
char charTercetoId = '%';

string typeAux = "";
string actualClass = "";
symbol* lastMethod;
stack<symbol*>*  stackClasses = new stack<symbol*>();

void yyerror(string s){
    isErrorInCode = true;    
    cerr << "\033[31m" << "Linea: " << lineNumber << "-> Error: " << s <<"\033[0m"<< endl;
};
void yywarning(string s){
    cerr << "\033[33m" << "Linea: " << lineNumber << "-> Warning: " << s <<"\033[0m"<< endl;
};
void yyPrintInLine(string s){
    cout << "Linea: " << lineNumber << "-> " << s << endl;
};
#line 53 "y.tab.c"
#define IDENTIFICADOR 257
#define ENTERO_SIN_SIGNO 258
#define ENTERO_CORTO 259
#define PUNTO_FLOTANTE 260
#define CADENA_CARACTERES 261
#define COMPARADOR_IGUAL_IGUAL 262
#define COMPARADOR_DISTINTO 263
#define COMPARADOR_MENOR_IGUAL 264
#define COMPARADOR_MAYOR_IGUAL 265
#define OPERADOR_SUMA_SUMA 266
#define VOID 267
#define RETURN 268
#define IF 269
#define ELSE 270
#define END_IF 271
#define PRINT 272
#define WHILE 273
#define DO 274
#define SHORT 275
#define UINT 276
#define FLOAT 277
#define TOF 278
#define CLASS 279
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    1,    1,    3,
    3,    3,    3,    3,    2,    2,    4,    4,    4,    4,
   10,   10,   10,   10,   10,   10,   11,    8,    8,    8,
    8,    8,   16,   14,   15,   15,   15,   15,   15,   15,
   17,   17,   18,   18,   18,   19,   19,    9,   21,   22,
   22,    6,    6,    6,    7,    7,   20,   20,   20,   20,
   20,   12,   12,   12,   12,   12,   13,   13,   24,   24,
   24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
   23,   23,    5,    5,    5,    5,    5,    5,    5,    5,
   25,   25,   26,   26,   26,   26,   31,   31,   31,   31,
   31,   31,   31,   32,   32,   32,   27,   34,   34,   34,
   34,   34,   35,   35,   35,   35,   35,   37,   39,   38,
   30,   30,   41,   42,   36,   36,   36,   36,   36,   36,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   33,   33,   33,   33,   33,   33,   33,
   29,   28,   28,   28,   28,   28,
};
short yylen[] = {                                         2,
    3,    4,    3,    2,    1,    1,    4,    3,    1,    2,
    2,    1,    2,    2,    3,    3,    2,    2,    1,    2,
    2,    1,    1,    2,    2,    1,    2,    1,    1,    1,
    7,    7,    6,    8,    8,    7,    2,    4,    3,    2,
    4,    3,    1,    2,    4,    3,    3,    3,    2,    2,
    3,    1,    7,    6,    8,    2,    1,    2,    1,    3,
    1,    1,    1,    1,    3,    1,    2,    1,    1,    0,
    4,    2,    1,    1,    0,    4,    1,    1,    3,    2,
    4,    3,    4,    3,    2,    1,    3,    2,    3,    2,
    2,    1,    1,    1,    1,    2,    2,    2,    2,    1,
    3,    5,    4,    3,    6,    5,    3,    3,    4,    4,
    4,    4,    1,    3,    3,    1,    3,    3,    2,    2,
    1,    2,    4,    3,    3,    2,    3,    1,    1,    1,
    4,    3,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    5,    6,    5,    4,    2,    2,    4,    3,    2,
    6,    7,    4,    6,    7,    6,    5,    3,    3,    5,
    4,    3,    2,    3,    2,    2,    1,    3,    2,    2,
    1,    3,    2,    1,    2,    1,    1,    4,    3,    1,
    1,    1,    2,    1,    2,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,  133,   62,   63,   64,    0,
    0,    6,    0,    0,    0,    0,   19,    0,    0,    0,
   28,   29,   30,    0,    0,    0,   93,   94,   95,  100,
    0,   24,    0,    0,    0,   37,    0,    0,  181,  182,
  184,  180,    0,    0,    0,  177,  176,    0,    0,  116,
    0,    0,   97,   96,   98,   99,    0,    0,    0,    0,
    0,   25,   11,   18,   14,    0,   20,   21,   66,    0,
    0,    0,   61,    0,    0,  104,    0,    0,    0,   74,
    0,    0,  175,    0,    0,  122,    0,  183,  185,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  117,    0,  128,  120,   43,
    0,   42,    0,    0,    0,    0,    0,    8,    0,    3,
    0,   16,    0,    0,   39,    0,    0,    0,  134,  132,
  103,    0,    0,   72,    0,    0,  179,    0,  118,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  114,  115,  163,  150,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  147,  146,  130,  126,    0,    0,
  129,   56,   52,    0,   41,    0,    0,    0,   50,   49,
    0,    7,    2,   65,    0,   38,   60,  131,  106,    0,
    0,    0,    0,  178,    0,    0,    0,    0,  173,  149,
    0,    0,    0,  170,  166,    0,    0,  141,    0,    0,
  162,  159,  158,  127,    0,  125,   48,    0,    0,   47,
   46,   69,    0,    0,    0,  105,    0,    0,   92,    0,
    0,   78,   76,  148,  161,    0,    0,  153,  172,  145,
    0,    0,  168,  164,  123,   51,   45,   67,    0,    0,
   33,    0,    0,    0,    0,   90,    0,   32,    0,   91,
  160,  157,    0,    0,  142,    0,    0,  144,    0,    0,
   36,    0,   31,    0,   89,   35,    0,    0,   84,  154,
    0,  156,  151,    0,  143,   54,    0,    0,   71,   34,
    0,   83,  155,  152,    0,   53,   55,
};
short yydgoto[] = {                                      14,
   15,  103,  229,   18,   19,   20,   70,   21,   22,   23,
   24,   82,  230,   25,  114,  115,  174,  116,  117,  224,
   26,   74,  231,  232,   27,   28,   29,   46,   47,   30,
   48,   49,   50,   51,  106,   52,  107,  169,  170,  129,
   31,  130,  161,
};
short yysindex[] = {                                    867,
  -31,  -21,  -34,  -40,  212,    0,    0,    0,    0, -119,
  925,    0,  -22,    0, 1314, 1328,    0,  -22,  -22, -231,
    0,    0,    0,    2,  -64, -194,    0,    0,    0,    0,
  -40,    0,  -11,  -24, -187,    0, -172,  -44,    0,    0,
    0,    0,   44,  161, -211,    0,    0,   -2,   99,    0,
  893,   51,    0,    0,    0,    0,    0, -122, -149, 1342,
 1356,    0,    0,    0,    0, 1370,    0,    0,    0,   49,
 -172,  -90,    0,   65,  772,    0,   88,  127,  -17,    0,
 -109,  -14,    0, -105,  -24,    0,   75,    0,    0,  -24,
  -24,  -24,  -24,  504,  694,  -24,  -24,  -24,  -24,  137,
  139,  949, 1564,  140,  144,    0,  605,    0,    0,    0,
  -66,    0,  -57,  -78,  149,  157,  163,    0,  -52,    0,
 1384,    0,  -49,  -13,    0,  228,  -42,  893,    0,    0,
    0,  185,  -24,    0,  101,  -35,    0,  168,    0,  127,
  127,  127,  127,  -24,  -24,   99,  -24,  -24,   99,  127,
  127,    0,    0,    0,    0,  181,  -37, 1217,  195,  -22,
  671,  200,  201,  208,    0,    0,    0,    0,  786,   -7,
    0,    0,    0,  -20,    0,  -57,  214,  224,    0,    0,
  -81,    0,    0,    0,  146,    0,    0,    0,    0,  171,
  127,  973,   13,    0,   99,   99,   99,   99,    0,    0,
  155,  -36, 1108,    0,    0,  249,  987,    0,  -22,  -22,
    0,    0,    0,    0,   23,    0,    0,   42,   24,    0,
    0,    0,   46,   31,  631,    0, 1012, 1533,    0,  179,
 1547,    0,    0,    0,    0,  186, 1026,    0,    0,    0,
 1052, 1398,    0,    0,    0,    0,    0,    0,  192,  -35,
    0, 1149,  193, 1533, 1547,    0,  198,    0, 1083,    0,
    0,    0, 1424, 1438,    0, 1452, 1477,    0,  853,   60,
    0,  202,    0, 1547,    0,    0, 1533, 1547,    0,    0,
 1491,    0,    0, 1505,    0,    0, 1533,  203,    0,    0,
 1547,    0,    0,    0,  216,    0,    0,
};
short yyrindex[] = {                                      0,
    0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
  337,    0,  251,    0,  343,  348,    0,  502,  532,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    9,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,   57,    0,
    0,  812,    0,    0,    0,    0,  291,    0,  352,  364,
  365,    0,    0,    0,    0,  366,    0,    0,    0,  316,
   38,    0,    0,  340,    0,    0,    0,  440,    0,    0,
   53,    0,    0,    0,    0,    0,  826,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  332,    0,    0,    0,    0,    0,    0,    0,  377,    0,
  388,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  546,
  570,  657,  708,    0,    0,   82,    0,    0,  106,  732,
  746,    0,    0,    0,    0,    0,    0,    0, 1189, 1261,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   80,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  454,    0,    0,    0,  130,  367,  391,  415,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1275, 1289,
    0,    0,    0,    0,  478,    0,    0,    0,    0,    0,
    0,    0,  102,    0,    0,    0,  264,    0,    0,    0,
  265,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  271,  275,    0,    0,    0,  276,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  288,    0,    0,  292,  298,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  299,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    4,   18,    1, 1235, 1241, 1141,    0,    0,    0,    0,
    0,  354, -214,    0,  356,  -27,  250,   43,    0,    0,
    0,    0, -163, -141,    0,    0,    0,  425,  426,    0,
 1702,   15,   66,  402,    0,  393,    0,    0,  269,  -41,
    0,  319, -126,
};
#define YYTABLESIZE 1843
short yytable[] = {                                      44,
   17,   84,  112,   58,   45,   37,  201,  236,  174,  108,
  253,   17,   32,  257,   60,   64,   17,   16,   33,   66,
   45,   13,  132,  217,   35,   69,  135,  185,   61,   76,
   62,  203,  186,   45,  125,   67,   68,  272,  218,   34,
   94,   71,   95,  133,  136,  136,  175,   88,   89,  174,
  174,  174,  174,  174,  288,  174,  113,   97,   72,   96,
   64,   17,   73,  255,  121,  171,   64,  247,  174,   79,
  174,  249,  295,  186,  186,  186,  186,  186,   75,  186,
  242,  107,  218,   85,   80,  256,  177,  200,  235,  250,
  274,  109,  186,   73,  186,  278,   75,  113,  177,  113,
  113,  113,    7,    8,    9,  108,  118,  123,  146,  149,
  264,   73,  275,  291,  267,  139,  113,  279,  113,  158,
   70,   64,  107,  127,  107,  107,  107,  171,  131,  110,
   94,  174,   95,  174,  110,  292,  281,   57,   70,  284,
   98,  107,   68,  107,  111,   99,  108,  134,  108,  108,
  108,  137,    7,    8,    9,  186,  178,  186,  195,  196,
   68,  197,  198,  152,  153,  108,  110,  108,  178,   94,
  110,   95,  110,  110,  110,  222,  111,  205,  110,  113,
  154,  113,  155,  165,    7,    8,    9,  166,  111,  110,
  172,  110,  179,    7,    8,    9,    7,    8,    9,  173,
  180,   86,  181,  182,  107,   45,  107,  184,  194,  228,
   94,  226,   95,   94,  187,   95,   38,   39,   40,   41,
   42,   83,   36,  192,  199,  189,  243,  244,  108,   45,
  108,  260,   38,   39,   40,   41,   42,   43,  204,    7,
    8,    9,  252,  211,  212,   38,   39,   40,   41,   42,
   26,  213,  110,   43,  110,  260,   45,  220,  266,   90,
   91,   92,   93,  216,  174,  174,   43,  221,  225,  233,
  174,  174,  174,  174,  260,  174,  174,  174,  260,  234,
  174,  174,  174,  174,  174,  174,  287,  174,  186,  186,
   40,  260,  239,  245,  186,  186,  186,  186,  246,  186,
  186,  186,  248,  258,  186,  186,  186,  186,  186,  186,
  261,  186,  113,  113,  269,   27,  289,  273,  113,  113,
  113,  113,  276,  113,  113,  113,  290,  296,  113,  113,
  113,  113,  113,  113,   40,  113,    5,  107,  107,   58,
  297,   59,    9,  107,  107,  107,  107,   12,  107,  107,
  107,    4,  186,  107,  107,  107,  107,  107,  107,   27,
  107,  108,  108,   10,   13,   17,  112,  108,  108,  108,
  108,   57,  108,  108,  108,   26,    1,  108,  108,  108,
  108,  108,  108,   58,  108,  110,  110,   15,   86,   77,
  109,  110,  110,  110,  110,   85,  110,  110,  110,   88,
   80,  110,  110,  110,  110,  110,  110,  112,  110,  112,
  112,  112,   87,   44,  111,   40,   79,   38,   39,   40,
   41,   42,   82,   81,  124,  219,  112,  126,  112,   55,
   56,  109,   75,  109,  109,  109,   87,  215,   43,  101,
   27,   38,   39,   40,   41,   42,  188,    0,    0,    0,
  109,    0,  109,  102,    0,  111,    0,  111,  111,  111,
    0,    0,   43,    0,   58,    0,    0,    0,   53,   39,
   40,   41,   54,    0,  111,    0,  111,  124,    0,    0,
    0,    0,    0,  101,  110,    0,    0,    0,    0,  112,
    0,  112,    0,    0,  111,    0,    0,  102,    0,    0,
    0,   22,    7,    8,    9,    0,   26,   26,    0,    0,
    0,    0,    0,  109,    0,  109,    0,   26,   26,   26,
    0,  124,   26,   26,    0,   26,   26,   26,    0,   26,
    0,   23,    0,    0,    0,    0,    0,  111,    0,  111,
    0,    0,    0,    0,    0,  144,   40,   40,   45,    0,
  145,    0,    0,    0,    0,    0,    0,   40,   40,   40,
    0,    0,   40,   40,  101,   40,   40,   40,    0,   40,
    0,   27,   27,    0,    0,    0,    0,    0,  102,    0,
    0,    0,   27,   27,   27,    0,  137,   27,   27,  137,
   27,   27,   27,    0,   27,   58,   58,    0,    0,    0,
    0,    0,  124,    0,    0,    0,   58,   58,   58,    0,
  138,   58,   58,  138,   58,   58,   58,    0,   58,    0,
    0,    0,  112,  112,    0,    0,   22,    0,  112,  112,
  112,  112,    0,  112,  112,  112,    0,    0,  112,  112,
  112,  112,  112,  112,    0,  112,  109,  109,   13,    0,
    0,    0,  109,  109,  109,  109,   23,  109,  109,  109,
    0,    0,  109,  109,  109,  109,  109,  109,  137,  109,
  111,  111,    0,    0,   13,    0,  111,  111,  111,  111,
    0,  111,  111,  111,    0,    0,  111,  111,  111,  111,
  111,  111,  138,  111,    0,  101,  101,  140,    0,    0,
  140,    0,    0,    0,    0,    0,  101,  101,  101,  102,
  102,  101,  101,    0,  101,  101,  101,    0,  101,    0,
  102,  102,  102,    0,    0,  102,  102,  102,  102,  102,
  102,    0,  102,  124,  124,  147,    0,    0,   45,    0,
  148,    0,    0,    0,  124,  124,  124,    0,  139,  124,
  124,  139,  124,  124,  124,  251,  124,   22,   22,    0,
   38,   39,   40,   41,   42,    0,    0,    0,   22,   22,
   22,    0,  135,   22,   22,  135,   22,   22,   22,  140,
   22,   43,    0,    0,    0,    0,  136,   23,   23,  136,
    0,    0,    0,    0,    0,  208,    0,    0,   23,   23,
   23,  137,  137,   23,   23,    0,   23,   23,   23,    0,
   23,    0,  137,  137,  137,   13,    0,  137,  137,  137,
  137,  137,  137,    0,  137,  138,  138,    0,    0,   13,
  139,    0,    0,    0,    0,    0,  138,  138,  138,    0,
    0,  138,  138,  138,  138,  138,  138,    0,  138,    0,
    0,    0,    0,    0,  135,  121,    0,    0,    0,    0,
  100,    2,    0,    0,    0,    0,    0,    0,  136,  119,
    0,    3,  101,    4,  167,  168,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    0,    1,    2,    0,    0,
    0,    0,    0,    0,  102,    0,   13,    3,  227,    4,
    0,    0,    5,    6,    0,    7,    8,    9,  102,   10,
   13,    0,  140,  140,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  140,  140,  140,  206,    2,  140,  140,
  140,  140,  140,  140,  121,  140,   13,    3,  207,    4,
    0,    0,    5,    6,    0,    7,    8,    9,  119,   10,
   38,   39,   40,   41,   42,    0,    0,    0,    0,    0,
    0,    0,    0,  139,  139,    0,    0,    0,   13,    0,
    0,   43,    0,    0,  139,  139,  139,  286,    0,  139,
  139,  139,  139,  139,  139,    0,  139,  135,  135,   11,
    0,   12,   13,    0,    0,    0,    0,    0,  135,  135,
  135,  136,  136,  135,  135,  135,  135,  135,  135,    0,
  135,    0,  136,  136,  136,  102,   13,  136,  136,  136,
  136,  136,  136,    0,  136,    0,    0,  100,    2,    0,
  241,    0,    0,    0,    0,    0,    0,    0,    3,  101,
    4,  100,    2,    5,    6,  128,    7,    8,    9,   59,
   10,    0,    3,  101,    4,  254,  214,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    0,  121,  121,  263,
    0,    0,    0,    0,    0,    0,    0,    0,  121,  121,
  121,  119,  119,  121,  121,  121,  121,  121,  121,    0,
  121,    0,  119,  119,  119,   13,    0,  119,  119,  119,
  119,  119,  119,    0,  119,    0,    0,    0,    1,    2,
    0,  240,    0,    0,    0,    0,    0,    0,    0,    3,
  227,    4,    1,    2,    5,    6,  277,    7,    8,    9,
    0,   10,    0,    3,    0,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    0,  100,    2,
  262,    0,    0,    0,    0,    0,    0,    0,    0,    3,
  101,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    0,    0,    0,  265,   81,    0,    0,
    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    3,    0,    4,    0,    0,    5,    6,  113,    7,
    8,    9,    0,   10,  156,    2,    0,    0,    0,    0,
    0,   81,  113,    0,    0,    3,  157,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    1,    2,
    0,    0,  238,    0,    0,    0,    0,    0,    0,    3,
  227,    4,  156,    2,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    3,  176,    4,    0,    0,    5,    6,
    0,    7,    8,    9,    0,   10,  176,    1,    2,    0,
    0,    0,    0,  271,    0,    0,  193,    0,    3,  227,
    4,  156,    2,    5,    6,  104,    7,    8,    9,    0,
   10,  105,    3,    0,    4,    0,    0,    5,    6,    0,
    7,    8,    9,    0,   10,    0,    0,  156,    2,  104,
    0,    0,    0,  171,    0,  105,    0,    0,    3,    0,
    4,  223,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,    0,    0,    0,    0,  159,  163,    1,    2,
    0,  104,  160,  164,    0,    0,    0,  105,    0,    3,
  227,    4,    0,    0,    5,    6,    0,    7,    8,    9,
    0,   10,  104,  206,    2,    0,    0,    0,  105,    0,
    0,    0,    0,    0,    3,  237,    4,    0,    0,    5,
    6,    0,    7,    8,    9,  167,   10,    0,    0,    0,
  270,    0,  159,    0,    0,  209,    0,    0,  160,  169,
    0,  210,    0,  104,    1,    2,    0,    0,    0,  105,
    0,    0,    0,  165,    0,    3,  227,    4,    0,    0,
    5,    6,    0,    7,    8,    9,    0,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  209,   63,    0,
    0,  159,    0,  210,  171,  171,    0,  160,    0,    0,
    0,    0,   65,    0,    0,  171,  171,  171,    0,    0,
  171,  171,    0,  171,  171,  171,  119,  171,    0,    0,
    0,  159,  156,    2,    0,  159,  209,  160,    0,    0,
  120,  160,  210,    3,  202,    4,    0,    0,    5,    6,
    0,    7,    8,    9,  122,   10,    0,  159,  209,    0,
  159,  209,    0,  160,  210,    0,  160,  210,  183,    0,
    0,    0,    0,    0,    0,  209,  167,  167,  209,    0,
    0,  210,  268,    0,  210,    0,    0,  167,  167,  167,
  169,  169,  167,  167,    0,  167,  167,  167,    0,  167,
    0,  169,  169,  169,  165,  165,  169,  169,  280,  169,
  169,  169,    0,  169,    0,  165,  165,  165,    0,    0,
  165,  165,  282,  165,  165,  165,    0,  165,    0,    1,
    2,    0,    0,    0,    0,    0,  283,    0,    0,    0,
    3,    0,    4,    1,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,    1,    2,    5,
    6,  285,    7,    8,    9,    0,   10,    0,    3,    0,
    4,    1,    2,    5,    6,  293,    7,    8,    9,    0,
   10,    0,    3,    0,    4,    1,    2,    5,    6,  294,
    7,    8,    9,    0,   10,    0,    3,    0,    4,    1,
    2,    5,    6,    0,    7,    8,    9,    0,   10,    0,
    3,    0,    4,  206,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,    0,    0,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    0,  156,
    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    3,    0,    4,  206,    2,    5,    6,    0,    7,    8,
    9,    0,   10,    0,    3,    0,    4,  156,    2,    5,
    6,    0,    7,    8,    9,    0,   10,    0,    3,    0,
    4,    0,    0,    5,    6,    0,    7,    8,    9,    0,
   10,    0,  206,    2,   77,   78,    0,    0,    0,    0,
    0,    0,    0,    3,    0,    4,  206,    2,    5,    6,
    0,    7,    8,    9,    0,   10,    0,    3,    0,    4,
  206,    2,    5,    6,    0,    7,    8,    9,    0,   10,
    0,    3,    0,    4,    0,    0,    5,    6,    0,    7,
    8,    9,    0,   10,    0,    0,  138,    0,    1,    2,
    0,  140,  141,  142,  143,    0,    0,  150,  151,    3,
  227,    4,    1,    2,    5,    6,    0,    7,    8,    9,
    0,   10,    0,    3,  259,    4,    0,    0,    5,    6,
    2,    7,    8,    9,    0,   10,    0,    0,    0,    0,
    3,  162,    4,  190,  191,    5,    6,    0,    7,    8,
    9,    0,   10,
};
short yycheck[] = {                                      40,
    0,   46,  125,  123,   45,   40,   44,   44,    0,   51,
  225,   11,   44,  228,   11,   15,   16,    0,   40,   16,
   45,   44,   40,   44,   46,  257,   41,   41,   11,   41,
   13,  158,    0,   45,  125,   18,   19,  252,   59,   61,
   43,   40,   45,   61,   59,   59,  125,  259,  260,   41,
   42,   43,   44,   45,  269,   47,    0,   60,  123,   62,
   60,   61,  257,  227,   61,  107,   66,   44,   60,  257,
   62,   41,  287,   41,   42,   43,   44,   45,   41,   47,
  207,    0,   59,   40,  257,  227,  114,  125,  125,   59,
  254,   41,   60,   41,   62,  259,   59,   41,  126,   43,
   44,   45,  275,  276,  277,    0,  256,   59,   94,   95,
  237,   59,  254,  277,  241,   41,   60,  259,   62,  102,
   41,  121,   41,   59,   43,   44,   45,  169,   41,    0,
   43,  123,   45,  125,  257,  277,  263,  257,   59,  266,
   42,   60,   41,   62,  267,   47,   41,  257,   43,   44,
   45,  257,  275,  276,  277,  123,  114,  125,  144,  145,
   59,  147,  148,   98,   99,   60,  257,   62,  126,   43,
   41,   45,   43,   44,   45,  257,  267,  160,  257,  123,
   44,  125,   44,   44,  275,  276,  277,   44,  267,   60,
  257,   62,   44,  275,  276,  277,  275,  276,  277,  257,
   44,   41,   40,  256,  123,   45,  125,  257,   41,  192,
   43,   41,   45,   43,  257,   45,  257,  258,  259,  260,
  261,  266,  257,  123,   44,   41,  209,  210,  123,   45,
  125,  231,  257,  258,  259,  260,  261,  278,   44,  275,
  276,  277,  225,   44,   44,  257,  258,  259,  260,  261,
    0,   44,  123,  278,  125,  255,   45,   44,  241,  262,
  263,  264,  265,  271,  256,  257,  278,   44,  123,  257,
  262,  263,  264,  265,  274,  267,  268,  269,  278,  125,
  272,  273,  274,  275,  276,  277,  269,  279,  256,  257,
    0,  291,   44,  271,  262,  263,  264,  265,  257,  267,
  268,  269,  257,  125,  272,  273,  274,  275,  276,  277,
  125,  279,  256,  257,  123,    0,  257,  125,  262,  263,
  264,  265,  125,  267,  268,  269,  125,  125,  272,  273,
  274,  275,  276,  277,   44,  279,    0,  256,  257,    0,
  125,  257,    0,  262,  263,  264,  265,    0,  267,  268,
  269,    0,  125,  272,  273,  274,  275,  276,  277,   44,
  279,  256,  257,    0,    0,    0,    0,  262,  263,  264,
  265,   40,  267,  268,  269,  125,    0,  272,  273,  274,
  275,  276,  277,   44,  279,  256,  257,    0,  125,  125,
    0,  262,  263,  264,  265,  125,  267,  268,  269,  125,
  125,  272,  273,  274,  275,  276,  277,   41,  279,   43,
   44,   45,  125,  123,    0,  125,  125,  257,  258,  259,
  260,  261,  125,  125,   71,  176,   60,   72,   62,    5,
    5,   41,   31,   43,   44,   45,   44,  169,  278,    0,
  125,  257,  258,  259,  260,  261,  128,   -1,   -1,   -1,
   60,   -1,   62,    0,   -1,   41,   -1,   43,   44,   45,
   -1,   -1,  278,   -1,  125,   -1,   -1,   -1,  257,  258,
  259,  260,  261,   -1,   60,   -1,   62,    0,   -1,   -1,
   -1,   -1,   -1,   44,  257,   -1,   -1,   -1,   -1,  123,
   -1,  125,   -1,   -1,  267,   -1,   -1,   44,   -1,   -1,
   -1,    0,  275,  276,  277,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,  267,  268,  269,
   -1,   44,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,    0,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   42,  256,  257,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,
   -1,   -1,  272,  273,  125,  275,  276,  277,   -1,  279,
   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,  267,  268,  269,   -1,   41,  272,  273,   44,
  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,   -1,
   -1,   -1,  125,   -1,   -1,   -1,  267,  268,  269,   -1,
   41,  272,  273,   44,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,  256,  257,   -1,   -1,  125,   -1,  262,  263,
  264,  265,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  274,  275,  276,  277,   -1,  279,  256,  257,   44,   -1,
   -1,   -1,  262,  263,  264,  265,  125,  267,  268,  269,
   -1,   -1,  272,  273,  274,  275,  276,  277,  123,  279,
  256,  257,   -1,   -1,   44,   -1,  262,  263,  264,  265,
   -1,  267,  268,  269,   -1,   -1,  272,  273,  274,  275,
  276,  277,  123,  279,   -1,  256,  257,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,  268,  269,   -1,   -1,  272,  273,  123,  275,  276,
  277,   -1,  279,  256,  257,   42,   -1,   -1,   45,   -1,
   47,   -1,   -1,   -1,  267,  268,  269,   -1,   41,  272,
  273,   44,  275,  276,  277,  125,  279,  256,  257,   -1,
  257,  258,  259,  260,  261,   -1,   -1,   -1,  267,  268,
  269,   -1,   41,  272,  273,   44,  275,  276,  277,  123,
  279,  278,   -1,   -1,   -1,   -1,   41,  256,  257,   44,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,   44,   -1,  272,  273,  274,
  275,  276,  277,   -1,  279,  256,  257,   -1,   -1,   44,
  123,   -1,   -1,   -1,   -1,   -1,  267,  268,  269,   -1,
   -1,  272,  273,  274,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  123,   44,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,  123,   44,
   -1,  267,  268,  269,  270,  271,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   44,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,  123,  279,
   44,   -1,  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,  268,  269,  256,  257,  272,  273,
  274,  275,  276,  277,  123,  279,   44,  267,  268,  269,
   -1,   -1,  272,  273,   -1,  275,  276,  277,  123,  279,
  257,  258,  259,  260,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   44,   -1,
   -1,  278,   -1,   -1,  267,  268,  269,  125,   -1,  272,
  273,  274,  275,  276,  277,   -1,  279,  256,  257,  123,
   -1,  125,   44,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,  274,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,  123,   44,  272,  273,  274,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,  274,  275,  276,  277,  125,
  279,   -1,  267,  268,  269,   44,  271,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,  268,
  269,  256,  257,  272,  273,  274,  275,  276,  277,   -1,
  279,   -1,  267,  268,  269,   44,   -1,  272,  273,  274,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,  256,  257,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  256,  257,  272,  273,   44,  275,  276,  277,
   -1,  279,   -1,  267,   -1,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,  125,   37,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  267,   -1,  269,   -1,   -1,  272,  273,   58,  275,
  276,  277,   -1,  279,  256,  257,   -1,   -1,   -1,   -1,
   -1,   71,   72,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,  256,  257,
   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,  267,
  268,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  267,  114,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,   -1,  279,  126,  256,  257,   -1,
   -1,   -1,   -1,  125,   -1,   -1,  136,   -1,  267,  268,
  269,  256,  257,  272,  273,   51,  275,  276,  277,   -1,
  279,   51,  267,   -1,  269,   -1,   -1,  272,  273,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  256,  257,   75,
   -1,   -1,   -1,  125,   -1,   75,   -1,   -1,  267,   -1,
  269,  181,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  102,  103,  256,  257,
   -1,  107,  102,  103,   -1,   -1,   -1,  107,   -1,  267,
  268,  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,
   -1,  279,  128,  256,  257,   -1,   -1,   -1,  128,   -1,
   -1,   -1,   -1,   -1,  267,  268,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,  125,  279,   -1,   -1,   -1,
  250,   -1,  158,   -1,   -1,  161,   -1,   -1,  158,  125,
   -1,  161,   -1,  169,  256,  257,   -1,   -1,   -1,  169,
   -1,   -1,   -1,  125,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  203,  125,   -1,
   -1,  207,   -1,  203,  256,  257,   -1,  207,   -1,   -1,
   -1,   -1,  125,   -1,   -1,  267,  268,  269,   -1,   -1,
  272,  273,   -1,  275,  276,  277,  125,  279,   -1,   -1,
   -1,  237,  256,  257,   -1,  241,  242,  237,   -1,   -1,
  125,  241,  242,  267,  268,  269,   -1,   -1,  272,  273,
   -1,  275,  276,  277,  125,  279,   -1,  263,  264,   -1,
  266,  267,   -1,  263,  264,   -1,  266,  267,  125,   -1,
   -1,   -1,   -1,   -1,   -1,  281,  256,  257,  284,   -1,
   -1,  281,  125,   -1,  284,   -1,   -1,  267,  268,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,  268,  269,  256,  257,  272,  273,  125,  275,
  276,  277,   -1,  279,   -1,  267,  268,  269,   -1,   -1,
  272,  273,  125,  275,  276,  277,   -1,  279,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,
  273,  125,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,  256,  257,  272,  273,  125,  275,  276,  277,   -1,
  279,   -1,  267,   -1,  269,  256,  257,  272,  273,  125,
  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,  256,
  257,  272,  273,   -1,  275,  276,  277,   -1,  279,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,   -1,   -1,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  267,   -1,  269,  256,  257,  272,  273,   -1,  275,  276,
  277,   -1,  279,   -1,  267,   -1,  269,  256,  257,  272,
  273,   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,
  269,   -1,   -1,  272,  273,   -1,  275,  276,  277,   -1,
  279,   -1,  256,  257,   33,   34,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  267,   -1,  269,  256,  257,  272,  273,
   -1,  275,  276,  277,   -1,  279,   -1,  267,   -1,  269,
  256,  257,  272,  273,   -1,  275,  276,  277,   -1,  279,
   -1,  267,   -1,  269,   -1,   -1,  272,  273,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   85,   -1,  256,  257,
   -1,   90,   91,   92,   93,   -1,   -1,   96,   97,  267,
  268,  269,  256,  257,  272,  273,   -1,  275,  276,  277,
   -1,  279,   -1,  267,  268,  269,   -1,   -1,  272,  273,
  257,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
  267,  268,  269,  132,  133,  272,  273,   -1,  275,  276,
  277,   -1,  279,
};
#define YYFINAL 14
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 279
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,0,0,0,0,0,0,0,
0,"';'","'<'","'='","'>'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'",0,"'}'",
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,"IDENTIFICADOR","ENTERO_SIN_SIGNO","ENTERO_CORTO",
"PUNTO_FLOTANTE","CADENA_CARACTERES","COMPARADOR_IGUAL_IGUAL",
"COMPARADOR_DISTINTO","COMPARADOR_MENOR_IGUAL","COMPARADOR_MAYOR_IGUAL",
"OPERADOR_SUMA_SUMA","VOID","RETURN","IF","ELSE","END_IF","PRINT","WHILE","DO",
"SHORT","UINT","FLOAT","TOF","CLASS",
};
char *yyrule[] = {
"$accept : programa",
"programa : '{' sentencias '}'",
"programa : '{' comas sentencias '}'",
"programa : '{' comas '}'",
"programa : '{' '}'",
"programa : '{'",
"programa : '}'",
"programa : '{' sentencias '}' error",
"programa : '{' '}' error",
"programa : sentencias",
"programa : '{' sentencias",
"programa : sentencias '}'",
"programa : comas",
"programa : '{' comas",
"programa : comas '}'",
"programa : '{' comas sentencias",
"programa : comas sentencias '}'",
"programa : comas sentencias",
"sentencias : sentencias sentencia",
"sentencias : sentencia",
"sentencia : declarativa comas",
"sentencia : ejecutable comas",
"sentencia : declarativa",
"sentencia : ejecutable",
"sentencia : error ','",
"comas : ',' comas",
"comas : ','",
"declarativa : tipo lista_de_variables",
"declarativa : declaracion_clase",
"declarativa : declaracion_objeto",
"declarativa : declaracion_funcion",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : VOID '(' parametro_funcion ')' '{' comas cuerpo_de_la_funcion '}'",
"declaracion_funcion : funcion_name '(' parametro_funcion ')' '{' comas '}'",
"funcion_name : VOID IDENTIFICADOR",
"declaracion_clase : nombre_clase '{' lista_atributos_y_metodos '}'",
"declaracion_clase : nombre_clase '{' '}'",
"declaracion_clase : CLASS IDENTIFICADOR",
"declaracion_clase : CLASS '{' lista_atributos_y_metodos '}'",
"declaracion_clase : CLASS '{' '}'",
"clase_heredada : IDENTIFICADOR",
"nombre_clase : CLASS IDENTIFICADOR",
"lista_atributos_y_metodos : lista_atributos_y_metodos tipo lista_de_atributos ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos metodo ','",
"lista_atributos_y_metodos : lista_atributos_y_metodos clase_heredada ','",
"lista_atributos_y_metodos : tipo lista_de_atributos ','",
"lista_atributos_y_metodos : metodo ','",
"lista_atributos_y_metodos : clase_heredada ','",
"lista_de_atributos : lista_de_atributos ';' IDENTIFICADOR",
"lista_de_atributos : IDENTIFICADOR",
"metodo : metodo_name '(' parametro_metodo ')' '{' cuerpo_de_la_funcion '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' '}'",
"metodo : metodo_name '(' parametro_metodo ')' '{' comas cuerpo_de_la_funcion '}'",
"metodo_name : VOID IDENTIFICADOR",
"metodo_name : VOID",
"declaracion_objeto : typeClass lista_de_objetos",
"typeClass : IDENTIFICADOR",
"lista_de_objetos : lista_de_objetos ';' IDENTIFICADOR",
"lista_de_objetos : IDENTIFICADOR",
"tipo : SHORT",
"tipo : UINT",
"tipo : FLOAT",
"lista_de_variables : lista_de_variables ';' IDENTIFICADOR",
"lista_de_variables : IDENTIFICADOR",
"parametro_metodo : tipo IDENTIFICADOR",
"parametro_metodo : tipo",
"parametro_metodo : IDENTIFICADOR",
"parametro_metodo :",
"parametro_metodo : parametro_metodo ';' tipo IDENTIFICADOR",
"parametro_funcion : tipo IDENTIFICADOR",
"parametro_funcion : tipo",
"parametro_funcion : IDENTIFICADOR",
"parametro_funcion :",
"parametro_funcion : parametro_funcion ';' tipo IDENTIFICADOR",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion : cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ','",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : cuerpo_de_la_funcion_sin_return RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN ','",
"cuerpo_de_la_funcion_con_return : RETURN",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_sin_return",
"cuerpo_de_la_funcion_con_return : RETURN ',' cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_con_return : RETURN cuerpo_de_la_funcion_con_return",
"cuerpo_de_la_funcion_sin_return : cuerpo_de_la_funcion_sin_return sentencia",
"cuerpo_de_la_funcion_sin_return : sentencia",
"ejecutable : asignacion",
"ejecutable : invocacion",
"ejecutable : seleccion",
"ejecutable : PRINT CADENA_CARACTERES",
"ejecutable : PRINT IDENTIFICADOR",
"ejecutable : PRINT constanteConSigno",
"ejecutable : PRINT constanteSinSigno",
"ejecutable : ciclo_while",
"asignacion : IDENTIFICADOR '=' expresion_aritmetica",
"asignacion : IDENTIFICADOR '.' IDENTIFICADOR '=' expresion_aritmetica",
"invocacion : IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '(' ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' expresion_aritmetica ')'",
"invocacion : IDENTIFICADOR '.' IDENTIFICADOR '(' ')'",
"expresion_aritmetica : expresion_aritmetica '+' termino",
"expresion_aritmetica : expresion_aritmetica '-' termino",
"expresion_aritmetica : expresion_aritmetica '-' '*' termino",
"expresion_aritmetica : expresion_aritmetica '+' '*' termino",
"expresion_aritmetica : expresion_aritmetica '-' '/' termino",
"expresion_aritmetica : expresion_aritmetica '+' '/' termino",
"expresion_aritmetica : termino",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"seleccion : IF bloque_condicion cuerpo_if",
"bloque_condicion : '(' condicion ')'",
"bloque_condicion : '(' condicion",
"bloque_condicion : condicion ')'",
"bloque_condicion : condicion",
"bloque_condicion : '(' ')'",
"cuerpo_if : cuerpo_then else_if cuerpo_else END_IF",
"cuerpo_if : cuerpo_then else_if cuerpo_else",
"cuerpo_if : cuerpo_then cuerpo_else END_IF",
"cuerpo_if : cuerpo_then END_IF",
"cuerpo_if : cuerpo_then else_if END_IF",
"cuerpo_then : bloque_ejecutables",
"cuerpo_else : bloque_ejecutables",
"else_if : ELSE",
"ciclo_while : inicio_while bloque_condicion DO cuerpo_while",
"ciclo_while : inicio_while bloque_condicion cuerpo_while",
"inicio_while : WHILE",
"cuerpo_while : bloque_ejecutables",
"condicion : expresion_aritmetica '>' expresion_aritmetica",
"condicion : expresion_aritmetica '<' expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_IGUAL_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_DISTINTO expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MAYOR_IGUAL expresion_aritmetica",
"condicion : expresion_aritmetica COMPARADOR_MENOR_IGUAL expresion_aritmetica",
"bloque_ejecutables : '{' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : ejecutable ','",
"bloque_ejecutables : declarativa ','",
"bloque_ejecutables : '{' RETURN ',' '}'",
"bloque_ejecutables : '{' RETURN '}'",
"bloque_ejecutables : RETURN ','",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas '}'",
"bloque_ejecutables : '{' sentencias_ejecutables RETURN ',' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN ',' sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN sentencias_ejecutables '}'",
"bloque_ejecutables : '{' comas sentencias_ejecutables RETURN '}'",
"bloque_ejecutables : comas ejecutable ','",
"bloque_ejecutables : comas declarativa ','",
"bloque_ejecutables : '{' comas RETURN ',' '}'",
"bloque_ejecutables : '{' comas RETURN '}'",
"bloque_ejecutables : comas RETURN ','",
"bloque_ejecutables : error ','",
"sentencias_ejecutables : sentencias_ejecutables ejecutable comas",
"sentencias_ejecutables : sentencias_ejecutables ejecutable",
"sentencias_ejecutables : ejecutable comas",
"sentencias_ejecutables : ejecutable",
"sentencias_ejecutables : sentencias_ejecutables declarativa comas",
"sentencias_ejecutables : sentencias_ejecutables declarativa",
"sentencias_ejecutables : declarativa ','",
"sentencias_ejecutables : declarativa",
"sentencias_ejecutables : sentencias_ejecutables error ','",
"sentencias_ejecutables : error ','",
"factor : IDENTIFICADOR",
"factor : IDENTIFICADOR OPERADOR_SUMA_SUMA",
"factor : constanteSinSigno",
"factor : constanteConSigno",
"factor : TOF '(' expresion_aritmetica ')'",
"factor : IDENTIFICADOR '.' IDENTIFICADOR",
"factor : CADENA_CARACTERES",
"constanteSinSigno : ENTERO_SIN_SIGNO",
"constanteConSigno : ENTERO_CORTO",
"constanteConSigno : '-' ENTERO_CORTO",
"constanteConSigno : PUNTO_FLOTANTE",
"constanteConSigno : '-' PUNTO_FLOTANTE",
"constanteConSigno : '-'",
};
#endif
#ifndef YYSTYPE
typedef myTypeYYLVAL* YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 341 "./gramaticaForGenCod.y"
void checkIntegerShort(string lexeme){
        symbol* sm = tableSymbol->getSymbol(lexeme);
        if(sm != nullptr ){
            if(atoi(sm->value.c_str()) >= 128){
                    yyerror("Entero corto fuera de rango { -128 - 127 }");
            }
        }
        else{
                yyerror("No se encuentra el token en la tabla de simbolo");
        }
}
string checkIntegerShortNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;

        size_t pos = lexeme.find("_s");
        string value = lexeme.substr(0, pos);
        
        tableSymbol->insert(lexeme, lexeme, value, "short");
        return lexeme;
}
string setFloatNegative(string lexeme){
        tableSymbol->deleteSymbol(lexeme); // reduce el contador, si llega a 0 lo elimina
        
        lexeme = '-'+lexeme;
        
        tableSymbol->insert(lexeme, lexeme, lexeme, "float");
        return lexeme;
}
void checkTypesCompare(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al comparar entre "+ type1 + " y " + type2);
        }
}
bool checkTypesOperation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al operar entre "+ type1 + " y " + type2);
                return false;
        }
        return true;
}
void checkTypesAsignation(string type1, string type2){
        if(type1 != type2 && type1 != "error" && type2 != "error"){
                yyerror("Incompatibilidad de tipos al asignar "+ type2 + " a " + type1);
        }
}
/**
 * Carga el símbolo en la tabla
 * Dado el acceso a un elemento de la tabla de simbolos lo elimina
 * Actualiza el símbolocon los datos pasados, 
 * si no se quiere modificar los datos dejar ""
 * 
 * @param key nombre del acceso
 * @param type tipo del acceso
 * @param scope scope actual
 * @param uso uso del acceso
 * @param ts tabla de símbolo a la que agregarle el acceso
 */
symbol* setNewScope(string key, string type, string scope, string uso, TableSymbol* ts){
        
        // borramos el símbolo de la tabla de símbolos general
        symbol* identificador = tableSymbol->getSymbol(key);    // obtenemos el simbolo
        symbol* newIdentificador = new symbol(*identificador);  // copiamos el simbolo
        tableSymbol->deleteSymbol(key);                         // eliminamos el simbolo (usa el contador)
        
        // seteas los nuevos valores
        if(type != ""){
                newIdentificador->type = type;                          // actualizamos el tipo
        }
        if(scope != ""){
                newIdentificador->lexema += scope;                      // actualizamos el scope
        }
        if(uso != ""){
                newIdentificador->uso = uso;                            // actualizamos el uso
        }

        // insrtamos en la nueva tabla de símbolos
        ts->insert(newIdentificador);                          // insertamos el nuevo simbolo en la tabla
        
        // retornamos el puntero al simbolo
        return newIdentificador;
}
// Crea un terceto y lo agrega a la tabla de tercetos.
// Los paramtros son argumento, operador1, y operador2
int addTercet(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
                
        return number;
}
// Crea un terceto y lo agrega a la tabla de tercetos y lo apila.
// Los paramtros son argumento, operador1, y operador2
int addTercetAndStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        int number;
        if(cantOfRecursions <= 0){
                number = tableTercets->add(t);
        }else{
                number = stackFunction->top()->ter->add(t);
        }
        tableTercets->push(t);
        return number;
}
// Crea un terceto y lo apila.
// Los paramtros son argumento, operador1, y operador2
void addTercetOnlyStack(string argumento, string operando1, string operando2){
        Tercet *t = new Tercet(argumento, operando1, operando2); 
        tableTercets->push(t);
        return ;
}

// desapila un terceto de la stack de tercetos y la retorna
Tercet* popTercet(){
        return tableTercets->pop();
}

void initClass(string key, string scope, string & reglaptr){
        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        int diff = tableSymbol->getDiffOffScope2(key, "clase", scope); 
        
        // si está en el mismo ámbito
        if(diff == 0){
                // en el mismo ámbito existe una clase, verificar si es forward declaration
                symbol* symbolFinded = tableSymbol->getSymbol(key+scope); // obtenemos el símbolo con mismo scope
                if(symbolFinded->forwarded == false){
                        yyerror("Redeclaracion de clase " + key + " en el mismo ambito");
                }else{
                        //aca borramos el simbolo de la tabla de simbolos general
                        tableSymbol->deleteSymbol(key); 
                        // la marcamos como que ya se declaró
                        symbolFinded->forwarded = false;
                        symbolFinded->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                        symbolFinded->classOfSymbol = key;
                        // agregamos la clase al stack de clases
                        stackClasses->push(symbolFinded);

                }
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
                newIdentificador->attributesAndMethodsVector = new TableSymbol(scope+":"+key); // inicializamos el vector de simbolos
                newIdentificador->classOfSymbol = key;
                stackClasses->push(newIdentificador);
        } 
        actualClass = key; 
        reglaptr = key; 
        tableSymbol->addScope(key);
};
void finishClass(){
        tableSymbol->deleteScope();
        stackClasses->pop();
};
void forwardClass(string key, string scope){
        // las clases van en la tabla general 
        int diff = tableSymbol->getDiffOffScope(key+scope, "clase", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de clase en el mismo ambito");
        }else{
                symbol* newIdentificador = setNewScope(key, "", scope, "clase", tableSymbol); 
        } 
        tableSymbol->getSymbol(key+scope)->forwarded = true; 
}
/**
 * Cuando detectamos un atributo de clase se ejecuta esta función
 * Obtiene el símbolo viejo lo elimina 
 * y lo carga a la tabla de la clase
 *
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addAtribute(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);         // eliminamos el simbolo dela tabla general

        // operamos sobre la tabla de símbolos de la clase
        TableSymbol * tsClass = stackClasses->top()->attributesAndMethodsVector;

        // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
        int diff = tsClass->getDiffOffScope2(key, "atributo", scope); 
                
        if(diff == 0){
                yyerror("Redeclaracion de atributo en la misma clase");
        }else{
                // creamos el nuevo símbolo para el atributo
                symbol* newAttribute = new symbol(key+scope, "", type, "atributo");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE ATRIBUTOS CARGADOS
                */

                // Marcamos a la clase que pertenece el atributo
                newAttribute->classOfSymbol = classOfAttribute;

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newAttribute);
        }        
};
/**
 * Esta función verifica si un método con la clave, alcance y uso dados existe en la tabla de símbolos de la clase actual o en cualquiera de sus clases heredadas.
 * Si el método se encuentra en la tabla de símbolos de la clase actual, devuelve 0.
 * Si el método se encuentra en una tabla de símbolos de clase heredada, devuelve 1.
 * Si el método no se encuentra en ninguna de las tablas de símbolos, devuelve -1.
 *
 * @param key La clave del método a buscar.
 * @param scope El alcance del método a buscar.
 * @param uso El uso del método a buscar.
 * @param classSymbol La tabla de símbolos de la clase actual en la que buscar.
 * @return Un entero que indica si el método se encontró en la tabla de símbolos de la clase actual (0), en una tabla de símbolos de clase heredada (1), o no se encontró (-1).
 */
int existMethodInInheritance(string key, string scope, string uso, symbol* classSymbol){
    // verificamos si el método está en la tabla de símbolos de la clase actual, si es asi devolvemos 0
    // si no es asi verificamos si está en alguna de las que hereda (de derecha a izquierda), si es asi devolvemos 1 y si no esta devolvemos 2
    // revisar cuantas herencias hay, en base a esto hacer un for que se encargue de reccorer cada una de las tablas de las clases y en cada llamado usar la funcion getdiffscope y si lo que devuelve es 0 significa que esta
    
    // verificamos a que distancia se encuentra la primer aparición del atributo en un ámbito alcanzable
    int diff = classSymbol->attributesAndMethodsVector->getDiffOffScope2(key, "metodo", scope);        
    if(diff == 0){
        //si el método está en la propia tabla de símbolos de la clase se devuelve 0
        return 0;
    }else{
        // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
        for (int i=2; i >= 0; i--){
            if(classSymbol->inheritance[i]!=nullptr){
                
                // verificar que en esa tabla no exista el simbolo
                bool existMethodInTable = classSymbol->inheritance[i]->existMethodInTable(key,uso);

                if(existMethodInTable){
                    return 1;
                }
            }
        }
        return -1;
   }           
}
/**
 * Cuando detectamos un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param classOfAttribute nombre de la clase a la que pertenece
 */
void initMethod(string key, string scope, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // cargarlo al arreglo de la clase

        tableSymbol->deleteSymbol(key);   // eliminamos el simbolo (usa el contador) de la tabla general
        symbol * classSymbol = stackClasses->top();
        TableSymbol* tsClass = classSymbol->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        int methodAlredyExist = existMethodInInheritance(key, scope, "metodo", classSymbol);    // verificamos si el método ya existe en la clase o en alguna de sus clases heredadas

        if(methodAlredyExist == 0){
                yyerror("Redeclaracion de metodo en la misma clase");
        }else{
                if(methodAlredyExist == 1){
                        yyerror("Sobreescritura de metodos prohibida");
                }else{        
                        // creamos el nuevo símbolo
                        symbol* newMetodo = new symbol(key+scope, "", "void", "metodo");
                        /*
                                ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE METODOS CARGADOS
                        */

                        newMetodo->classOfSymbol = classOfAttribute;

                        // agregamos el nuevo símbolo al vector de simbolos de la clase        
                        tsClass->insert(newMetodo);
                        
                        // seteamos que si se debe agregar un parametro se le haga a este método
                        lastMethod = newMetodo;

                        // agregamos un scope
                        tableSymbol->addScope(key);

                        // creamos una stack para la función y la agregamos al stack con el nombre
                        functionStack* fs = new functionStack(key+scope);
                        fs->ter = new Tercets();
                        stackFunction->push(fs);
                        
                        cantOfRecursions++;
                } 
        }
};                        
/**
 * Cuando detectamos un parámtro en un método de clase
 * se elimina el símbolo viejo de la tabla
 * se carga el nuevo símbolo a la tabla de la clase
 * Se carga como una variable y se le agrega a su scope el nombre del método
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del acceso
 * @param classOfAttribute nombre de la clase a la que pertenece
*/
void addParamMetodo(string key, string scope, string type, string classOfAttribute){

        // obtener el símbolo viejo y eliminarlo
        // verificar que no esté previamente en ese scope en esa tabla de símobolo
        // lo agregamos y setear el tipo del parametro


        tableSymbol->deleteSymbol(key);    // eliminamos el simbolo (usa el contador) de la tabla general
        
        TableSymbol* tsClass = stackClasses->top()->attributesAndMethodsVector; // obtenemos la tabla de simbolos de la clase a la que le agramos el metodo

        /* SE SUPONE QUE ESTO NUNCA DEBERÍA SUCEDER PORQUE ES UN SOLO PARÁEMETRO Y LA PRIMER VARIABLE DEL ÁMBITO */

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable dentro de la tala de símbolos de la clase
        int diff = tsClass->getDiffOffScope2(key, "var", scope); 
        if(diff == 0){
                yyerror("Redeclaracion de variable en el misma ambito del metodo");
        }else{
                // creamos el nuevo símbolo
                symbol* newparam = new symbol(key+scope, "", type, "var");
                /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE PARAMETROS DE METODO CARGADOS
                */

                // Marcamos a la clase que pertenece la variable
                newparam->classOfSymbol = classOfAttribute;

                // obtenemos el scopeInsideClass, que al ser un parámetro de un método siempre es el mismo método
                newparam->scopeInsideClass = ":"+lastMethod->lexema.substr(0, lastMethod->lexema.find(":"));

                // agregamos el nuevo símbolo al vector de simbolos de la clase        
                tsClass->insert(newparam);

                lastMethod->cantParam++;
                lastMethod->typeParam = type;
                lastMethod->nameParam = key;
        }
};
/**
 * Cuando detectamos un parámtro en una declaración de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase terminamos
 * 
 * @param key nombre del acceso
 * @param scope scope actual
 * @param type tipo del parámetro
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
*/
void addParamFunction(string key, string scope, string type, string & reglaptr, string& reglatype){
        // verificamos si está dentro de la declaración de una clase o no

        // obtener el símbolo viejo y eliminarlo
        // setear el tipo del parametro

        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;

        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general y le cargamos el parametro como variable
                ts = tableSymbol;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
        }else{
                // obtenemos la tabla de la clase y le cargamos el parametro como variable
                ts = stackClasses->top()->attributesAndMethodsVector;
                newIdentificador = setNewScope(key, type, scope, "var", ts); 
                
                // marcamos a que clase pertenece el simbolo
                string classOfAttribute = stackClasses->top()->classOfSymbol;
                newIdentificador->classOfSymbol = classOfAttribute;

                string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                newIdentificador->scopeInsideClass = scopeInsideClass;
        }

        reglaptr = newIdentificador->lexema; 
        reglatype = type; 
};

string checkNewNameBeforeInsert(symbol* newSm){
        // funcion que se encarga de borrar las apariciones de nombres de clases dentro un lexema 
        // y de verificar que no exista un nombre igual en el mismo ámbito
        // la logica funciona en iterar sobre la tabla de symbolor preguntando por cada uno de los lexemas si es que son de tipo clase
        // si es asi se crea una variable auxiliar donde se concatena de forma correcta el nuevo lexema para buscar si este se encuentra como substring dentro de 
        // de nuevo lexema a insertar dentro de la tabla de simbolos 
        
        for (const auto& par : tableSymbol->getSymbolTable()){
                symbol* sm = par.second;
                if(sm->uso == "clase"){
                        // creo una variable aux para guardar el lexema                 ejemplo= b:main:func3
                        string lexemaAux = sm->lexema;
                        //busco la primera aparicion de :                               ejemplo= 2
                        size_t firstColonPos = lexemaAux.find(':');
                        //obtengo el nombre de la clase para su uso a posteriori        ejemplo= b
                        string nameOfClass = lexemaAux.substr(0, firstColonPos); 
                        //busco el tamaño de la palabra                                 ejemplo= 12
                        size_t secondColonPos = lexemaAux.size();
                        //creo el nuevo lexema                                         ejemplo= primer substr = main:func3 segundo substr = b, lo concateno y queda main:func3:b
                        lexemaAux =  lexemaAux.substr(firstColonPos + 1, secondColonPos)+":"+lexemaAux.substr(0,firstColonPos);
                        //busco si el nuevo lexema se encuentra dentro del lexema a insertar
                        size_t pos = newSm->lexema.find(lexemaAux);
                        // si encuentra una posicion con el find significa que esta
                        if(pos != string::npos){
                                //si se encuentra dentro del lexema a insertar, se borra la aparicion de el nombre de la clase unicamente 
                                size_t pos = newSm->lexema.find(nameOfClass);
                                newSm->lexema.erase(pos-1, pos);      //siguiendo con el ejemplo y suponiendo que tenemos x:main:func3:b, se borra la aparicion de b y queda x:main:func3
                                newSm->lexema =  newSm->lexema +":"+nameOfClass; //se concatena el nombre de la clase al final del lexema
                        }
                }
        }
        return newSm->lexema;
}
/**
 * Esta función se llama cuando se quiere crear un método o función de un objeto a instanciar
 * Para esto se require de buscar el bloque de tercetos en el vecto de bloques de tercetos de declaración
 * copiarlo y agregarle a cada argumento que sea propio del objeto ":"+objeto+scope 
 * al nuevo bloque también le agregamos eso al nombre e insertamos la copia en el vecotr de bloques de tercetos de ejecución
 * 
 * 
 * @param objectName El nombre del objeto.
 * @param scope El scope actual.
 * @param simboloDeFuncion El símbolo de la función o método.
 * @param tableSymbolOfTheClass La tabla de símbolos de la clase.
 */
void createFunctionTerecets(string objectName, string scope, symbol* simboloDeFuncion, TableSymbol* tableSymbolOfTheClass){
     /*
        la función debe buscar en el vector de declaración de bloques de tercetos de funciones la declaraciónde este método o función, 
            copiarlo al vector de ejecución
            recorrer cada terceto y por cada operador de este terceto verificar si alguno es igual a algún atributo o método de la clase ode sus herencias, 
            en ese caso se le agrega el objeto y el scope actual
    */
    functionStack* copyOfTheStack = vectorOfFunctionDeclaredInClasses->getCopyOfFunction(simboloDeFuncion->lexema);

    // recorremos el stack de tercetos de la función o método
    for (const auto& tercet : copyOfTheStack->ter->getTercets()){
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg1())){
            tercet->setArg1(tercet->getArg1()+":"+objectName+scope);
        }
        // si la tabla contiene exactamente ese elemento del terceto entonces le agregamos el objeto y el scope actual
        if(tableSymbolOfTheClass->isTheSpecificLexemaInTable(tercet->getArg2())){
            tercet->setArg2(tercet->getArg1()+":"+objectName+scope);
        }
    }

    copyOfTheStack->name += ":"+objectName+scope; // le agregamos el nombre del objeto + el scope actual
    // agregamos el nuevo stack de funciones a la tabla de funciones en ejecución
    vectorOfFunction->add(copyOfTheStack);

};
/**
 * Cuando se detecta una declaración de objeto se llama esta función
 * Verificamos que no exista un objeto en el mismo ámbito con el mismo nombre   
 * agregamos el objeto a la tabla general, obtenemos la clase del objeto
 * agregamos cada atributo y método de la clase y de sus herencias. 
 * 
 * @param key El nombre del objeto a agregar.
 * @param scope El scope del objeto a agregar.
 * @param classType La clase del objeto a agregar.
 */
void addObject(string key, string scope, string classType){
        
        // si la clase no existe no hacemos nada ya que en la función initObjectDeclaration() se levanta el error de clase no declarada
        if (classType == "_error"){
                return;
        }
        
        // verificamos que no existea un objeto con el mismo nombre en el mismo ámbito
        int diff = tableSymbol->getDiffOffScope2(key, "objeto", scope); 
        if(diff == 0){
                // existe un objeto ocn el mismo nombre en el mismo ámbito
                yyerror("Redeclaracion del objeto " + key + " en el mismo ambito");
        }else{
                // eliminamos el símbolo viejo y lo agregamos en la tabla de simbolo general
                symbol* newObject = setNewScope(key, "", scope, "objeto", tableSymbol);
                /*
                    ACA SE AGREGAN LOS ATRIBUTOS AL OBJETO INSTANCIADO
                */
                newObject->classOfSymbol = classType; // seteamos el tipo de clase del objeto

                // obtenemos el símbolo de la clase del objeto
                symbol* matchingClass = tableSymbol->getFirstSymbolMatching2(classType, "clase", ":main"); // obtenemos el símbolo de la clase del objeto
                
                // recorremos la tabla de símbolos de la clase del objeto y agregamos cada uno de los elementos
                for (const auto& par : matchingClass->attributesAndMethodsVector->getSymbolTable()){
                        symbol* simbolo = par.second;
                        // creamos el nuevo símbolo
                        symbol* newSm = new symbol(*simbolo);                
                        
                        // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                        //      la tabla de tercetos principal o de ejecución
                        if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                            createFunctionTerecets(key, scope, newSm, matchingClass->attributesAndMethodsVector);
                        }
                                

                        newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                        
                        // agregamos el nuevo símbolo a la tabla de simbolos        
                        tableSymbol->insert(newSm);
                }

                // recorremos las herencias de derecha a izquierda y agregamos cada uno de los elementos a la tabla general

                // recorres el arreglo de herencia de esta clase verificando que exista alguna posicion con nullptr, si es asi verificas si esa clase tiene unmetodo con el mismo nombre y si es asi devuelves 1
                for (int i=2; i >= 0; i--){
                    TableSymbol* tableSymbolMatchingClass = matchingClass->inheritance[i];
                    // si hereda de alguna clase recorremos sus simbolos y los agregamos
                    if(tableSymbolMatchingClass != nullptr){
                        
                        // recorremos la tabla de símbolos de la clase que hereda y agregamos cada uno de los elementos
                        for (const auto& par : tableSymbolMatchingClass->getSymbolTable()){
                                symbol* simbolo = par.second;
                                // creamos el nuevo símbolo
                                symbol* newSm = new symbol(*simbolo);                
                                
                                // verificamos si el simbolo es una función o método y cargamos su bloque de tercetos en 
                                //      la tabla de tercetos principal o de ejecución
                                if(newSm->uso=="metodo" || newSm->uso=="funcion"){
                                    createFunctionTerecets(key, scope, newSm, tableSymbolMatchingClass);
                                }

                                newSm->lexema = newSm->lexema+":"+key+scope; // le agregamos el nombre del objeto + el scope actual
                                
                                // agregamos el nuevo símbolo a la tabla de simbolos        
                                tableSymbol->insert(newSm);
                        }
                    }
                }
        } 
};
/**
 * cuando detectamos una declaracion de función
 * eliminamos el símbolo viejo de la tabla
 * verificamos si es dentro de una clase o fuera
 * si está afuera de una clase lo agregamos a la tabla general
 * si está dentro de una clase lo agregamos a la tabla de la clase y le seteamos la clase a la que pertenece y el scope inside class
 * 
 * @param key nombre del acceso
 * @param scope scope actual
*/
void initFunction(string key, string scope){
        TableSymbol* ts;
        
        string scopeOriginal = scope;

        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }

        // buscamos si existe una función con el mismo nombre en el mismo ámbito
        int diff = ts->getDiffOffScope2(key, "funcion", scope); 
        if( diff == 0){
                yyerror("Redeclaracion de funcion en el mismo ambito");
        }else{
                symbol* newFunction = setNewScope(key, "void", scope, "funcion", ts); 
                
                // cargamos cual fue el último método o función por si tiene un parámetro
                lastMethod = newFunction;
                // si esta dentro de una clase le seteamos los atributos de clase y scopeInsideClass
                if(stackClasses->size() > 0){
                        string classOfAttribute = stackClasses->top()->classOfSymbol;
                        newFunction->classOfSymbol = classOfAttribute;
                        newFunction->scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                }
        } 
        // agregamos al scope el nombre de la función
        tableSymbol->addScope(key);
        // creamos un vector de función y lo agregamos al stack con el nombre
        functionStack* fs = new functionStack(key+scope);
        fs->ter = new Tercets();
        stackFunction->push(fs);
        //verificamos las recursiones y le sumamos uno
        cantOfRecursions++;
};
/**
 * Cuando detectamos el fin de una declaracion de función
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishFunction(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión

        if(stackClasses->size() <= 0){
                // si no está dentro de una clase lo agregamos a la tabla general
                vectorOfFunction->add(fs);
        }else{
            // si está dentro de una clase es una función declarada de ntro de un metodo y se guarda en el vector de funciones declaradas en clases
            vectorOfFunctionDeclaredInClasses->add(fs);
        }
            
}
/**
 * cuando detectamos el fin de una declaracion de metodo
 * guardamos el bloque de tercetos de la función
 * sacamos el scope de la función
*/
void finishMethod(){
        // obtenemos el stack con los tercetos de la función
        functionStack* fs = stackFunction->top();
        stackFunction->pop();
        // los vectores siempre se guardan en el vector de funciones declaradas en clases
        vectorOfFunctionDeclaredInClasses->add(fs);
        tableSymbol->deleteScope(); // sacamos el scope de la función
        cantOfRecursions--;     // sacamos una recursión
};
/**
 * Cuando detectas una variable
 * Borras el símbolo de la tabla general
 * verifica si existe una variable alcanzable y si existe seteea el $$->ptr con el lexema
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void checkVarInScope(string key, string scope, string uso, string& reglaptr, string& reglatype){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        // verificamos a que distancia se encuentra la primer aparición de la variable en un ámbito alcanzable
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching2(key, uso, scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                reglaptr = symbolFinded->lexema;
                reglatype = symbolFinded->type;
        }
};

/**
 * función cuando se detecta una variable++ 
 *
 * @param key el acceso.
 * @param scope el scope actual
 * @param reglaptr puntero al lexema de la regla
 * @param reglatype puntero al tipo de la regla
 * @throws yyerror si no hay variable enalcanzable
 */
void newFactorMasMas (string key, string scope, string& reglaptr, string& reglatype){
        tableSymbol->deleteSymbol(key);

        // busca variable en scope que coincide con el uso
        symbol* symbolFinded = tableSymbol->getFirstSymbolMatching(key+scope, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                int number = addTercet("+", symbolFinded->lexema, symbolFinded->lexema);          
                
                reglaptr = charTercetoId + to_string(number);
                reglatype = symbolFinded->type;
        }
}
/**
 * función cuando se detecta una asginaciín sobre una variable
 *
 * @param key el acceso al identificador al que se le asigna.
 * @param scope el scope actual
 * @param op2Lexeme el acceso de lo que se asigna
 * @param op2Type el tipo de lo que se asigna
 * @throws yyerror si no hay variable alcanzable
 */
void newAsignacion(string key, string scope, string op2Lexeme, string op2Type){
        // borramos el simbolo de la tabla general
        tableSymbol->deleteSymbol(key); 

        TableSymbol* ts;
        // verificamos si es dentro de una clase o fuera y obtenemos la respectiva tabla de símbolos
        if(stackClasses->size() <= 0){
                ts = tableSymbol;
        }else{
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        
        //buscamos si existe una variable con el mismo nombre al alcance de la tabla de simbolos
        symbol* symbolFinded = ts->getFirstSymbolMatching2(key, "var", scope); 
        if(symbolFinded == nullptr){
                yyerror("No se encontro declaracion previa de la variable "+ key);
        }else{
                // checkeamos que los tipos sean iguales 
                checkTypesAsignation(symbolFinded->type, op2Type); 
                // agregamos el terceto de asignación en la respectiva tabla de tercetos
                int number = addTercet("=", symbolFinded->lexema, op2Lexeme); 
        } 
};

void newOperacionAritmetica(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr, string& reglatype){
        if(checkTypesOperation(op1type, op2type)){
                reglatype = op1type;
        }else{
                reglatype = "error";
        } 
        
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number); 
}
void newTof(string key, string& reglaptr, string& reglatype){
        int number = addTercet("tof", " ", key); 
        reglaptr = charTercetoId + to_string(number); 
        reglatype = "float";
}
void condition(string& reglaptr){
        int number = addTercetAndStack("BF", charTercetoId + to_string(tableTercets->numberOfLastTercet()), ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void addElse(string& reglaptr){
        Tercet * t = popTercet();  
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2));
        } 
        int number =  addTercetAndStack("BI", "", ""); 
        reglaptr = charTercetoId + to_string(number); 
}

void finIf(){
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1) );
        }
}

void initWhile(){
        addTercetOnlyStack("incioCondicionWhile", charTercetoId + to_string(tableTercets->numberOfLastTercet() + 1), "");
}

void finWhile(string & reglaptr) {
        Tercet *t = popTercet(); 
        if (t!=nullptr){
                t->setArg2( charTercetoId + to_string(tableTercets->numberOfLastTercet() + 2) );
        } 
        Tercet *t2 = popTercet(); 
        int number; 
        if(t2!=nullptr){
                int number = addTercet("BI", t2->getArg1(), "");
        } 
        reglaptr = charTercetoId + to_string(number);
}

void newCondicion(string operador, string op1ptr, string op2ptr, string op1type, string op2type, string& reglaptr){
        checkTypesCompare(op1type, op2type); 
        int number = addTercet(operador, op1ptr, op2ptr); 
        reglaptr = charTercetoId + to_string(number);
}

/**
 * Cuando se detecta una sentencia que declara una variable se llama esta función.
 * Agrega una nueva variable a la tabla de símbolos específica de clase o la general.
 * 
 * @param key La clave de la variable.
 * @param scope El ámbito de la variable.
 * @param type El tipo de la variable.
 */
void newVariable(string key, string scope, string type){
        TableSymbol* ts;
        
        symbol* newIdentificador = nullptr;
        
        // determinas que tabla de símbolo usas checkeando si esta vacio el stack de clases
        if(stackClasses->size() <= 0){
                // obtenemos la tabla general
                ts = tableSymbol;
        }else{
                // obtenemos la tabla de la clase
                ts = stackClasses->top()->attributesAndMethodsVector;
        }
        //buscamos si esta definida ya una variable con ese mismo nombre dentro de la tabla de simbolos que corresponda
        int diff = ts->getDiffOffScope2(key, "var", scope); 
        
        if(diff == 0){
                // existe una variable previa en el mismo ambito con el mismo nombre
                yyerror("Redeclaracion de variable en el mismo ambito");
        }else{
            // eliminamos el simbolo de la tabla general y lo agregamos a la tabla específica, si es de clase le seteamos los atributos
            if(stackClasses->size() <= 0){
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */
            }else{
                    newIdentificador = setNewScope(key, type, scope, "var", ts); 
                    /*
                        ACA SE PUEDEN AGREGAR COSAS A LOS SIMBOLOS DE VARIABLES CARGADOS
                    */

                    // marcamos a que clase pertenece el simbolo
                    string classOfAttribute = stackClasses->top()->classOfSymbol;
                    newIdentificador->classOfSymbol = classOfAttribute;
                    // marcamos cual seria el scope dentro de la clase de donde proviene la variable
                    string scopeInsideClass = scope.substr(scope.find(classOfAttribute) + classOfAttribute.length());
                    newIdentificador->scopeInsideClass = scopeInsideClass;
            }
        }
};
/**
 * Cuando se detecta la clase de un objeto a instanciar se llama esta función.
 * Borra el símbolo de la tabla de símbolos general.
 * Verifica que la clase haya sido declarada y exista.
 * 
 * @param key nombre de la clase
 * @param scope El alcance del objeto.
 * @param reglaptr El puntero a la regla.
 */
void initObjectDeclaration(string key, string scope, string& reglaptr){
    // verificar que la clase haya sido declarada y exista
    // borramos el símbolo de la tabla de símbolos general
    tableSymbol->deleteSymbol(key);
    // usamos ":main" porque todas las clases se usan en el ámbito ":main"
    symbol* classFinded = tableSymbol->getFirstSymbolMatching2(key, "clase", ":main");
    if(classFinded == nullptr){
        yyerror("No se encontro declaracion previa de la clase "+ key);
        actualClass = "_error"; 
    }else{
        reglaptr = key; 
        actualClass = key; 
    }
}
/**
 * Borra el simbolo de la tabla general
 * verifica si existe la clase a heredar, sino existe lanza un error de que no existe la clase
 * si encontras la clase copias su arreglo de herencia a esta clase que hereda y le agregas en el primer nullptr la clase a heredar (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))
 *
 *
 * @param classToInherit The name of the class to inherit from.
 * @param scope The scope of the inheriting class.
 * @param classWhoInherit The name of the class that inherits.
 * @return void
 */
void  detectInheritance(string classToInherit , string scope, string classWhoInherit){
        
        // borrar el simbolo de la tabla general
        // buscar si existe la clase a heredar, sino existe lanzar un error de que no existe la clase
        // si encontras la clase copias su arrehlo de herencia a el arreglo de este símbolo y luego le agregas la clase a 
        // heredar en el primer nullptr de ese arreglo (si te pasas de 3 elemetos throw error de que no se puede heredar más de 3 veces))

        tableSymbol->deleteSymbol(classToInherit); // borramos el símbolo de la tabla general

        symbol* symbolofClassWhoInherit = stackClasses->top();  //guardas el simbolo de la ultima clase creada y agregada al stack de clases

        // verificamos que no herede esta clase de otro,solo puede heredar de una
        if (symbolofClassWhoInherit->isAlreadyInhenriting){
                        yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de otra clase");
        }else{
                // buscamos la clase a heredar, la buscamos con scope ":main" porque es en el único lugar donde se pueden declarar clases
                symbol* classFinded = tableSymbol->getFirstSymbolMatching2(classToInherit, "clase", ":main");
                if(classFinded == nullptr){
                        yyerror("No se encontro declaracion previa de la clase a heredar "+ classToInherit);
                }else{
                        // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                        // intentamos agregar la clase a heredar en el primer nullptr del arreglo de herencia, si tiene más de 3 elementos lanzamos un error

                        // copiamos el arreglo de herencia de la clase a heredar a la clase que hereda
                        for(int i = 0; i < 3; i++) {
                                symbolofClassWhoInherit->inheritance[i] = classFinded->inheritance[i];
                        }
                        bool isNullptr = false;
                        int posOfNullInInheritance = -1;
                        // recorres el arreglo verificando que exista alguna posicion con nullptr, si es asi seteas el booleano con true y guardas la posicion del nullptr.
                        for (int i=0; i < 3; i++){
                                if(symbolofClassWhoInherit->inheritance[i]==nullptr){
                                        isNullptr = true;
                                        posOfNullInInheritance = i;
                                        break;
                                }
                        }
                        // si el boleano es true, agregas la clase a heredar en el lugar que se encuentra nullptr del arreglo de herencia, si no es true lanzas un error diciendo que ya existe una herencia de 3 clases
                        if(isNullptr){
                                symbolofClassWhoInherit->inheritance[posOfNullInInheritance] = classFinded->attributesAndMethodsVector;  
                        }else{
                                yyerror("La clase " + symbolofClassWhoInherit->classOfSymbol +" ya hereda de 3 clases");
                        }
                        
                }
        }
}
#line 1738 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse(Lexico* lexico)
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: state %d, shifting to state %d (%s)\n",
                    yystate, yytable[yyn],yyrule[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 74 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 2:
#line 75 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 3:
#line 76 "./gramaticaForGenCod.y"
{ int number = addTercet("FIN", "-", "-"); }
break;
case 4:
#line 77 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); }
break;
case 5:
#line 78 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la ultima llave"); }
break;
case 6:
#line 79 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido y falta la primer llave"); }
break;
case 7:
#line 80 "./gramaticaForGenCod.y"
{ yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 8:
#line 81 "./gramaticaForGenCod.y"
{ yywarning("Se esta compilando un programa sin contenido"); yyerror("Se detecto contenido luego de finalizado el programa");}
break;
case 9:
#line 82 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 10:
#line 83 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 11:
#line 84 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 12:
#line 85 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 13:
#line 86 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 14:
#line 87 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 15:
#line 88 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la ultima llave del programa"); }
break;
case 16:
#line 89 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de la primera llave del programa"); }
break;
case 17:
#line 90 "./gramaticaForGenCod.y"
{ yywarning("Se detecto la falta de llaves en el programa"); }
break;
case 22:
#line 99 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 23:
#line 100 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 24:
#line 101 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida"); }
break;
case 27:
#line 108 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable");}
break;
case 29:
#line 110 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de objeto");}
break;
case 30:
#line 111 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de funcion");}
break;
case 31:
#line 114 "./gramaticaForGenCod.y"
{ finishFunction();  }
break;
case 32:
#line 115 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 33:
#line 116 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 34:
#line 118 "./gramaticaForGenCod.y"
{ finishFunction();}
break;
case 35:
#line 119 "./gramaticaForGenCod.y"
{ yyerror("Se detecto la falta de un nombre en la funcion"); }
break;
case 36:
#line 120 "./gramaticaForGenCod.y"
{ finishFunction(); yywarning("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 37:
#line 123 "./gramaticaForGenCod.y"
{ initFunction(yyvsp[0]->ptr, tableSymbol->getScope()); }
break;
case 38:
#line 126 "./gramaticaForGenCod.y"
{ finishClass(); }
break;
case 39:
#line 127 "./gramaticaForGenCod.y"
{ finishClass(); yywarning("Se detecto una declaracion de clases vacia");}
break;
case 40:
#line 128 "./gramaticaForGenCod.y"
{ forwardClass(yyvsp[0]->ptr, tableSymbol->getScope());}
break;
case 41:
#line 129 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 42:
#line 130 "./gramaticaForGenCod.y"
{ yyerror("Falta nombre de la clase"); }
break;
case 43:
#line 132 "./gramaticaForGenCod.y"
{ detectInheritance(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 44:
#line 134 "./gramaticaForGenCod.y"
{ initClass(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 45:
#line 136 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 48:
#line 139 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto declaracion de variable en clase");}
break;
case 51:
#line 143 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 52:
#line 144 "./gramaticaForGenCod.y"
{ addAtribute(yyvsp[0]->ptr, tableSymbol->getScope(), typeAux, actualClass); }
break;
case 53:
#line 146 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 54:
#line 147 "./gramaticaForGenCod.y"
{ finishMethod(); yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 55:
#line 148 "./gramaticaForGenCod.y"
{ finishMethod(); }
break;
case 56:
#line 151 "./gramaticaForGenCod.y"
{ initMethod(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 57:
#line 152 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de metodo"); }
break;
case 58:
#line 155 "./gramaticaForGenCod.y"
{}
break;
case 59:
#line 157 "./gramaticaForGenCod.y"
{initObjectDeclaration(yyvsp[0]->ptr, tableSymbol->getScope(), yyval->ptr); }
break;
case 60:
#line 160 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 61:
#line 161 "./gramaticaForGenCod.y"
{ addObject(yyvsp[0]->ptr, tableSymbol->getScope(), actualClass); }
break;
case 62:
#line 164 "./gramaticaForGenCod.y"
{ typeAux = "short"; yyval->type ="short";}
break;
case 63:
#line 165 "./gramaticaForGenCod.y"
{ typeAux = "unsigned int"; yyval->type = "unsigned int";}
break;
case 64:
#line 166 "./gramaticaForGenCod.y"
{ typeAux = "float"; yyval->type = "float";}
break;
case 65:
#line 169 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 66:
#line 170 "./gramaticaForGenCod.y"
{ newVariable(yyvsp[0]->ptr,tableSymbol->getScope(),typeAux); }
break;
case 67:
#line 172 "./gramaticaForGenCod.y"
{ addParamMetodo(yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, actualClass); yyval->type = yyvsp[-1]->type;}
break;
case 68:
#line 173 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 69:
#line 174 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 71:
#line 176 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 72:
#line 179 "./gramaticaForGenCod.y"
{ addParamFunction (yyvsp[0]->ptr, tableSymbol->getScope(), yyvsp[-1]->type, yyval->ptr, yyval->type); }
break;
case 73:
#line 180 "./gramaticaForGenCod.y"
{ yyerror("Falta de nombre de parametro"); }
break;
case 74:
#line 181 "./gramaticaForGenCod.y"
{ yyerror("Falta de tipo de parametro"); }
break;
case 76:
#line 183 "./gramaticaForGenCod.y"
{ yyerror("Exceso de parametros"); }
break;
case 77:
#line 186 "./gramaticaForGenCod.y"
{yyerror("Se detecto la falta de RETURN en el cuerpo de la funcion");}
break;
case 80:
#line 190 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 81:
#line 191 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 82:
#line 192 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 83:
#line 193 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 84:
#line 194 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 86:
#line 196 "./gramaticaForGenCod.y"
{yywarning("Se detecto una falta de coma"); }
break;
case 87:
#line 197 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 88:
#line 198 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 89:
#line 199 "./gramaticaForGenCod.y"
{yywarning("Se detecto codigo posterior a un return"); }
break;
case 90:
#line 200 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 96:
#line 208 "./gramaticaForGenCod.y"
{ int number = addTercet("print", tableSymbol->getSymbol(yyvsp[0]->ptr)->value, ""); yyval->ptr = charTercetoId + to_string(number); }
break;
case 97:
#line 209 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de identificador"); }
break;
case 98:
#line 210 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 99:
#line 211 "./gramaticaForGenCod.y"
{ yyPrintInLine("Se detecto una impresion de constante"); }
break;
case 101:
#line 215 "./gramaticaForGenCod.y"
{ newAsignacion(yyvsp[-2]->ptr, tableSymbol->getScope(), yyvsp[0]->ptr,yyvsp[0]->type);}
break;
case 107:
#line 226 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 108:
#line 227 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 109:
#line 228 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 110:
#line 229 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 111:
#line 230 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("-", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '-'"); }
break;
case 112:
#line 231 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("+", yyvsp[-3]->ptr, yyvsp[0]->ptr, yyvsp[-3]->type, yyvsp[0]->type, yyval->ptr, yyval->type); yywarning("Se detecto un error en operador, quedara '+'"); }
break;
case 113:
#line 232 "./gramaticaForGenCod.y"
{ yyval->type = yyvsp[0]->type; yyval->ptr = yyvsp[0]->ptr; }
break;
case 114:
#line 235 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("*", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 115:
#line 236 "./gramaticaForGenCod.y"
{ newOperacionAritmetica("/", yyvsp[-2]->ptr, yyvsp[0]->ptr, yyvsp[-2]->type, yyvsp[0]->type, yyval->ptr, yyval->type); }
break;
case 116:
#line 237 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 117:
#line 240 "./gramaticaForGenCod.y"
{ finIf(); }
break;
case 118:
#line 243 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); }
break;
case 119:
#line 244 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de ultimo parentesis en condicion"); }
break;
case 120:
#line 245 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de primer parentesis en condicion"); }
break;
case 121:
#line 246 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yywarning("Falta de parantesis en condicion"); }
break;
case 122:
#line 247 "./gramaticaForGenCod.y"
{ condition(yyval->ptr); yyerror("Falta de condicion en el bloque de control IF"); }
break;
case 124:
#line 251 "./gramaticaForGenCod.y"
{ yyerror(" Falta de END_IF en bloque de control IF-ELSE"); }
break;
case 125:
#line 252 "./gramaticaForGenCod.y"
{ yyerror(" Falta de ELSE en bloque de control IF-ELSE");}
break;
case 127:
#line 254 "./gramaticaForGenCod.y"
{ yyerror(" Falta contenido dentro del ELSE en bloque de control IF-ELSE");}
break;
case 130:
#line 261 "./gramaticaForGenCod.y"
{ addElse(yyval->ptr); }
break;
case 131:
#line 263 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); }
break;
case 132:
#line 264 "./gramaticaForGenCod.y"
{ finWhile(yyval->ptr); yywarning("Falta de DO en WHILE-DO"); }
break;
case 133:
#line 267 "./gramaticaForGenCod.y"
{ initWhile(); }
break;
case 135:
#line 273 "./gramaticaForGenCod.y"
{ newCondicion(">",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 136:
#line 274 "./gramaticaForGenCod.y"
{ newCondicion("<",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr); }
break;
case 137:
#line 275 "./gramaticaForGenCod.y"
{ newCondicion("==",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 138:
#line 276 "./gramaticaForGenCod.y"
{ newCondicion("!!",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 139:
#line 277 "./gramaticaForGenCod.y"
{ newCondicion(">=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 140:
#line 278 "./gramaticaForGenCod.y"
{ newCondicion("<=",yyvsp[-2]->ptr, yyvsp[0]->ptr,yyvsp[-2]->type, yyvsp[0]->type,yyval->ptr);}
break;
case 143:
#line 283 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 144:
#line 284 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 145:
#line 285 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 147:
#line 287 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 149:
#line 289 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 152:
#line 293 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 155:
#line 298 "./gramaticaForGenCod.y"
{ yywarning("Se detecto codigo posterior a un return"); }
break;
case 156:
#line 299 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); yywarning("Se detecto codigo posterior a un return"); }
break;
case 157:
#line 300 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 159:
#line 302 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 161:
#line 304 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 163:
#line 306 "./gramaticaForGenCod.y"
{ yyerror("Se detecto un bloque invalido"); }
break;
case 165:
#line 310 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 167:
#line 312 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 168:
#line 313 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 169:
#line 314 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control y la falta de coma"); }
break;
case 170:
#line 315 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia declarativa en bloque de control"); }
break;
case 171:
#line 316 "./gramaticaForGenCod.y"
{ yywarning("Se detecto una falta de coma"); }
break;
case 172:
#line 317 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida dentro del bloque de sentencias ejecutables"); }
break;
case 173:
#line 318 "./gramaticaForGenCod.y"
{ yyerror("Se detecto una sentencia invalida en el bloque de sentencias ejecutables"); }
break;
case 174:
#line 321 "./gramaticaForGenCod.y"
{ checkVarInScope(yyvsp[0]->ptr, tableSymbol->getScope(), "var", yyval->ptr, yyval->type); }
break;
case 175:
#line 322 "./gramaticaForGenCod.y"
{ newFactorMasMas(yyvsp[-1]->ptr, tableSymbol->getScope(), yyval->ptr, yyval->type); }
break;
case 176:
#line 323 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 177:
#line 324 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 178:
#line 325 "./gramaticaForGenCod.y"
{ newTof(yyvsp[-1]->ptr,yyval->ptr,yyval->type); }
break;
case 180:
#line 327 "./gramaticaForGenCod.y"
{ yyerror("No se puede operar con cadena de caracteres");{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;} }
break;
case 181:
#line 330 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 182:
#line 333 "./gramaticaForGenCod.y"
{ checkIntegerShort(yyvsp[0]->ptr); yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 183:
#line 334 "./gramaticaForGenCod.y"
{ string newLexema = checkIntegerShortNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 184:
#line 335 "./gramaticaForGenCod.y"
{ yyval->ptr = yyvsp[0]->ptr; yyval->type = yyvsp[0]->type;}
break;
case 185:
#line 336 "./gramaticaForGenCod.y"
{ string newLexema = setFloatNegative(yyvsp[0]->ptr); yyval->ptr = newLexema; yyval->type = yyvsp[0]->type;}
break;
case 186:
#line 337 "./gramaticaForGenCod.y"
{ yyerror("Falta constante numerica en la expresion"); }
break;
#line 2438 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = lexico->yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
